###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                14/Mar/2017  10:13:00
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\GitHub\TripleS_Zigbee\Components\hal\target\CC2530EB\hal_key.c
#    Command line       =  
#        -f
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFAFA
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        D:\GitHub\TripleS_Zigbee\Components\hal\target\CC2530EB\hal_key.c -D
#        COORDINATOR -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_HVAC_CLUSTER -D xHAL_UART=TRUE -D
#        xHAL_UART_DMA=1 -lC
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\HomeAutomation\MY-SOURCE\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List\hal_key.lst
#    Object file        =  
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj\hal_key.r51
#
###############################################################################

D:\GitHub\TripleS_Zigbee\Components\hal\target\CC2530EB\hal_key.c
      1          /**************************************************************************************************
      2            Filename:       hal_key.c
      3            Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
      4            Revision:       $Revision: 23815 $
      5          
      6            Description:    This file contains the interface to the HAL KEY Service.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          /*********************************************************************
     40           NOTE: If polling is used, the hal_driver task schedules the KeyRead()
     41                 to occur every 100ms.  This should be long enough to naturally
     42                 debounce the keys.  The KeyRead() function remembers the key
     43                 state of the previous poll and will only return a non-zero
     44                 value if the key state changes.
     45          
     46           NOTE: If interrupts are used, the KeyRead() function is scheduled
     47                 25ms after the interrupt occurs by the ISR.  This delay is used
     48                 for key debouncing.  The ISR disables any further Key interrupt
     49                 until KeyRead() is executed.  KeyRead() will re-enable Key
     50                 interrupts after executing.  Unlike polling, when interrupts
     51                 are enabled, the previous key state is not remembered.  This
     52                 means that KeyRead() will return the current state of the keys
     53                 (not a change in state of the keys).
     54          
     55           NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
     56                 the ISR.  Therefore, the joystick movements will only be detected
     57                 during a pushbutton interrupt caused by S1 or the center joystick
     58                 pushbutton.
     59          
     60           NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
     61                 high state to a low state.  This transition is typically clean.  The
     62                 duration of the low state is around 200ms.  When the signal returns
     63                 to the high state, there is a high likelihood of signal bounce, which
     64                 causes a unwanted interrupts.  Normally, we would set the interrupt
     65                 edge to falling edge to generate an interrupt when S1 is pushed, but
     66                 because of the signal bounce, it is better to set the edge to rising
     67                 edge to generate an interrupt when S1 is released.  The debounce logic
     68                 can then filter out the signal bounce.  The result is that we typically
     69                 get only 1 interrupt per button push.  This mechanism is not totally
     70                 foolproof because occasionally, signal bound occurs during the falling
     71                 edge as well.  A similar mechanism is used to handle the joystick
     72                 pushbutton on the DB.  For the EB, we do not have independent control
     73                 of the interrupt edge for the S1 and center joystick pushbutton.  As
     74                 a result, only one or the other pushbuttons work reasonably well with
     75                 interrupts.  The default is the make the S1 switch on the EB work more
     76                 reliably.
     77          
     78          *********************************************************************/
     79          
     80          /**************************************************************************************************
     81           *                                            INCLUDES
     82           **************************************************************************************************/
     83          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8a
   \   unsigned char volatile __sfr P1IFG
   \                     P1IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr P2IFG
   \                     P2IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8d
   \   unsigned char volatile __sfr P1IEN
   \                     P1IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xac
   \   unsigned char volatile __sfr P2IEN
   \                     P2IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     84          #include "hal_defs.h"
     85          #include "hal_types.h"
     86          #include "hal_board.h"
     87          #include "hal_drivers.h"
     88          #include "hal_adc.h"
     89          #include "hal_key.h"
     90          #include "osal.h"
     91          
     92          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
     93          
     94          /**************************************************************************************************
     95           *                                              MACROS
     96           **************************************************************************************************/
     97          
     98          /**************************************************************************************************
     99           *                                            CONSTANTS
    100           **************************************************************************************************/
    101          #define HAL_KEY_RISING_EDGE   0
    102          #define HAL_KEY_FALLING_EDGE  1
    103          
    104          #define HAL_KEY_DEBOUNCE_VALUE  25
    105          
    106          /* CPU port interrupt */
    107          #define HAL_KEY_CPU_PORT_0_IF P0IF
    108          #define HAL_KEY_CPU_PORT_2_IF P2IF
    109          
    110          /* SW_6 is at P0.1 */
    111          #define HAL_KEY_SW_6_PORT   P0
    112          #define HAL_KEY_SW_6_BIT    BV(1)
    113          #define HAL_KEY_SW_6_SEL    P0SEL
    114          #define HAL_KEY_SW_6_DIR    P0DIR
    115          
    116          /* SW_7 is at P2.0 */
    117          #define HAL_KEY_SW_7_PORT   P2
    118          #define HAL_KEY_SW_7_BIT    BV(0)
    119          #define HAL_KEY_SW_7_SEL    P2SEL
    120          #define HAL_KEY_SW_7_DIR    P2DIR
    121          
    122          /* SW_8 is at P1.2 */
    123          #define HAL_KEY_SW_8_PORT   P1
    124          #define HAL_KEY_SW_8_BIT    BV(2)
    125          #define HAL_KEY_SW_8_SEL    P1SEL
    126          #define HAL_KEY_SW_8_DIR    P1DIR
    127          
    128          /* SW_9 is at P0.7 */
    129          #define HAL_KEY_SW_9_PORT   P0
    130          #define HAL_KEY_SW_9_BIT    BV(7)
    131          #define HAL_KEY_SW_9_SEL    P0SEL
    132          #define HAL_KEY_SW_9_DIR    P0DIR
    133          
    134          
    135          /* edge interrupt ************************************************************/
    136          #define HAL_KEY_SW_6_EDGEBIT  BV(0)
    137          #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
    138          
    139          #define HAL_KEY_SW_7_EDGEBIT  BV(3)
    140          #define HAL_KEY_SW_7_EDGE     HAL_KEY_FALLING_EDGE
    141          
    142          #define HAL_KEY_SW_8_EDGEBIT  BV(1)
    143          #define HAL_KEY_SW_8_EDGE     HAL_KEY_FALLING_EDGE
    144          
    145          #define HAL_KEY_SW_9_EDGEBIT  BV(0)
    146          #define HAL_KEY_SW_9_EDGE     HAL_KEY_FALLING_EDGE
    147          
    148          
    149          
    150          
    151          /* SW_6 interrupts 0.1 */
    152          #define HAL_KEY_SW_6_IEN     IEN1  /* CPU interrupt mask register */
    153          #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    154          #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
    155          #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
    156          #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
    157          
    158          /* SW_7 interrupts 2.0 */
    159          #define HAL_KEY_SW_7_IEN      IEN2  /* CPU interrupt mask register */
    160          #define HAL_KEY_SW_7_IENBIT   BV(1) /* Mask bit for all of Port_0 */
    161          #define HAL_KEY_SW_7_ICTL     P2IEN /* Port Interrupt Control register */
    162          #define HAL_KEY_SW_7_ICTLBIT  BV(0) /* P2IEN - P0.1 enable/disable bit */
    163          #define HAL_KEY_SW_7_PXIFG    P2IFG /* Interrupt flag at source */
    164          
    165          /* SW_8 interrupts 1.2*/
    166          #define HAL_KEY_SW_8_IEN      IEN2  /* CPU interrupt mask register */
    167          #define HAL_KEY_SW_8_IENBIT   BV(4) /* Mask bit for all of Port_0 */
    168          #define HAL_KEY_SW_8_ICTL     P1IEN /* Port Interrupt Control register */
    169          #define HAL_KEY_SW_8_ICTLBIT  BV(2) /* P0IEN - P0.1 enable/disable bit */
    170          #define HAL_KEY_SW_8_PXIFG    P1IFG /* Interrupt flag at source */
    171          
    172          /* SW_9 interrupts 0.7*/
    173          #define HAL_KEY_SW_9_IEN      IEN1  /* CPU interrupt mask register */
    174          #define HAL_KEY_SW_9_IENBIT   BV(5) /* Mask bit for all of Port_0 */
    175          #define HAL_KEY_SW_9_ICTL     P0IEN /* Port Interrupt Control register */
    176          #define HAL_KEY_SW_9_ICTLBIT  BV(7) /* P0IEN - P0.1 enable/disable bit */
    177          #define HAL_KEY_SW_9_PXIFG    P0IFG /* Interrupt flag at source */
    178          
    179          /* Joy stick move at P2.0 */
    180          #define HAL_KEY_JOY_MOVE_PORT   P2
    181          #define HAL_KEY_JOY_MOVE_BIT    BV(0)
    182          #define HAL_KEY_JOY_MOVE_SEL    P2SEL
    183          #define HAL_KEY_JOY_MOVE_DIR    P2DIR
    184          
    185          /* edge interrupt */
    186          #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
    187          #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
    188          
    189          /* Joy move interrupts */
    190          #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
    191          #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
    192          #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
    193          #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
    194          #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
    195          
    196          #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
    197          
    198          
    199          /**************************************************************************************************
    200           *                                            TYPEDEFS
    201           **************************************************************************************************/
    202          
    203          
    204          /**************************************************************************************************
    205           *                                        GLOBAL VARIABLES
    206           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
   \                     halKeySavedKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          static halKeyCBack_t pHalKeyProcessFunction;
   \                     pHalKeyProcessFunction:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          static uint8 HalKeyConfigured;
   \                     HalKeyConfigured:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    210          bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
   \                     Hal_KeyIntEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    211          
    212          /**************************************************************************************************
    213           *                                        FUNCTIONS - Local
    214           **************************************************************************************************/
    215          void halProcessKeyInterrupt(void);
    216          uint8 halGetJoyKeyInput(void);
    217          
    218          
    219          
    220          /**************************************************************************************************
    221           *                                        FUNCTIONS - API
    222           **************************************************************************************************/
    223          
    224          
    225          /**************************************************************************************************
    226           * @fn      HalKeyInit
    227           *
    228           * @brief   Initilize Key Service
    229           *
    230           * @param   none
    231           *
    232           * @return  None
    233           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          void HalKeyInit( void )
   \                     HalKeyInit:
    235          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    236            /* Initialize previous key to 0 */
    237            halKeySavedKeys = 0;
   \   000004   90....       MOV     DPTR,#halKeySavedKeys
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    238          
    239            HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
   \   000009   53F3FD       ANL     0xf3,#0xfd
    240            HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
   \   00000C   53FDFD       ANL     0xfd,#0xfd
    241          
    242            HAL_KEY_SW_7_SEL &= ~(HAL_KEY_SW_7_BIT);    /* Set pin function to GPIO */
   \   00000F   53F5FE       ANL     0xf5,#0xfe
    243            HAL_KEY_SW_7_DIR &= ~(HAL_KEY_SW_7_BIT);    /* Set pin direction to Input */
   \   000012   53FFFE       ANL     0xff,#0xfe
    244          
    245            HAL_KEY_SW_8_SEL &= ~(HAL_KEY_SW_8_BIT);    /* Set pin function to GPIO */
   \   000015   53F4FB       ANL     0xf4,#0xfb
    246            HAL_KEY_SW_8_DIR &= ~(HAL_KEY_SW_8_BIT);    /* Set pin direction to Input */
   \   000018   53FEFB       ANL     0xfe,#0xfb
    247            
    248            HAL_KEY_SW_9_SEL &= ~(HAL_KEY_SW_9_BIT);    /* Set pin function to GPIO */
   \   00001B   53F37F       ANL     0xf3,#0x7f
    249            HAL_KEY_SW_9_DIR &= ~(HAL_KEY_SW_9_BIT);    /* Set pin direction to Input */
   \   00001E   53FD7F       ANL     0xfd,#0x7f
    250          
    251            HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
   \   000021   53F5FE       ANL     0xf5,#0xfe
    252            HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
   \   000024   53FFFE       ANL     0xff,#0xfe
    253          
    254          
    255            /* Initialize callback function */
    256            pHalKeyProcessFunction  = NULL;
   \   000027   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   F0           MOVX    @DPTR,A
    257          
    258            /* Start with key is not configured */
    259            HalKeyConfigured = FALSE;
   \   00002D   90....       MOV     DPTR,#HalKeyConfigured
   \   000030   F0           MOVX    @DPTR,A
    260          }
   \   000031   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000034                REQUIRE P0SEL
   \   000034                REQUIRE P0DIR
   \   000034                REQUIRE P2SEL
   \   000034                REQUIRE P2DIR
   \   000034                REQUIRE P1SEL
   \   000034                REQUIRE P1DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    261          
    262          
    263          /**************************************************************************************************
    264           * @fn      HalKeyConfig
    265           *
    266           * @brief   Configure the Key serivce
    267           *
    268           * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
    269           *          cback - pointer to the CallBack function
    270           *
    271           * @return  None
    272           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    273          void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
   \                     HalKeyConfig:
    274          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    275            /* Enable/Disable Interrupt or */
    276            Hal_KeyIntEnable = interruptEnable;
   \   000006   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000009   F0           MOVX    @DPTR,A
    277          
    278            /* Register the callback fucntion */
    279            pHalKeyProcessFunction = cback;
   \   00000A   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   00000D   EA           MOV     A,R2
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   EB           MOV     A,R3
   \   000011   F0           MOVX    @DPTR,A
    280          
    281            /* Determine if interrupt is enable or not */
    282            if (Hal_KeyIntEnable)
   \   000012   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000015   E0           MOVX    A,@DPTR
   \   000016   603E         JZ      ??HalKeyConfig_0
    283            {
    284              /* Rising/Falling edge configuratinn */
    285          
    286              PICTL &= ~(HAL_KEY_SW_6_EDGEBIT|HAL_KEY_SW_7_EDGEBIT
    287                        |HAL_KEY_SW_8_EDGEBIT|HAL_KEY_SW_9_EDGEBIT);    /* Clear the edge bit */
   \   000018   538CF4       ANL     0x8c,#0xf4
    288          
    289          	/* For falling edge, the bit must be set. */
    290           // #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
    291           //   PICTL |= HAL_KEY_SW_6_EDGEBIT;
    292           // #endif
    293          
    294          
    295              /* Interrupt configuration:
    296               * - Enable interrupt generation at the port
    297               * - Enable CPU interrupt
    298               * - Clear any pending interrupt
    299               */
    300              HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
   \   00001B   43AB02       ORL     0xab,#0x2
    301              HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
   \   00001E   D2BD         SETB    0xb8.5
    302              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
   \   000020   7589FD       MOV     0x89,#-0x3
    303          
    304              HAL_KEY_SW_7_ICTL |= HAL_KEY_SW_7_ICTLBIT;
   \   000023   12....       LCALL   ?Subroutine3 & 0xFFFF
    305              HAL_KEY_SW_7_IEN |= HAL_KEY_SW_7_IENBIT;
    306              HAL_KEY_SW_7_PXIFG = ~(HAL_KEY_SW_7_BIT);
    307          	
    308              HAL_KEY_SW_8_ICTL |= HAL_KEY_SW_8_ICTLBIT;
   \                     ??CrossCallReturnLabel_0:
   \   000026   438D04       ORL     0x8d,#0x4
    309              HAL_KEY_SW_8_IEN |= HAL_KEY_SW_8_IENBIT;
   \   000029   439A10       ORL     0x9a,#0x10
    310              HAL_KEY_SW_8_PXIFG = ~(HAL_KEY_SW_8_BIT);
   \   00002C   758AFB       MOV     0x8a,#-0x5
    311          
    312              HAL_KEY_SW_9_ICTL |= HAL_KEY_SW_9_ICTLBIT;
   \   00002F   43AB80       ORL     0xab,#0x80
    313              HAL_KEY_SW_9_IEN |= HAL_KEY_SW_9_IENBIT;
   \   000032   D2BD         SETB    0xb8.5
    314              HAL_KEY_SW_9_PXIFG = ~(HAL_KEY_SW_9_BIT);
                                          ^
Warning[Pe069]: integer conversion resulted in truncation
   \   000034   75897F       MOV     0x89,#0x7f
    315          
    316          
    317              /* Rising/Falling edge configuratinn */
    318          
    319              HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
   \   000037   53ACF7       ANL     0xac,#0xf7
    320              /* For falling edge, the bit must be set. */
    321            #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
    322              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
   \   00003A   43AC08       ORL     0xac,#0x8
    323            #endif
    324          
    325          
    326              /* Interrupt configuration:
    327               * - Enable interrupt generation at the port
    328               * - Enable CPU interrupt
    329               * - Clear any pending interrupt
    330               */
    331              HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
   \   00003D   12....       LCALL   ?Subroutine3 & 0xFFFF
    332              HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
    333              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
    334          
    335          
    336              /* Do this only after the hal_key is configured - to work with sleep stuff */
    337              if (HalKeyConfigured == TRUE)
   \                     ??CrossCallReturnLabel_1:
   \   000040   90....       MOV     DPTR,#HalKeyConfigured
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   7030         JNZ     ??HalKeyConfig_1
    338              {
    339                osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
   \   000048                ; Setup parameters for call to function osal_stop_timerEx
   \   000048   7A10         MOV     R2,#0x10
   \   00004A   7B00         MOV     R3,#0x0
   \   00004C   90....       MOV     DPTR,#Hal_TaskID
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000054   8022         SJMP    ??HalKeyConfig_1
    340              }
    341            }
    342            else    /* Interrupts NOT enabled */
    343            {
    344              HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
   \                     ??HalKeyConfig_0:
   \   000056   53ABFD       ANL     0xab,#0xfd
    345              HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
   \   000059   C2BD         CLR     0xb8.5
    346          
    347              HAL_KEY_SW_7_ICTL &= ~(HAL_KEY_SW_7_ICTLBIT); /* don't generate interrupt */
   \   00005B   53ACFE       ANL     0xac,#0xfe
    348              HAL_KEY_SW_7_IEN &= ~(HAL_KEY_SW_7_IENBIT);   /* Clear interrupt enable bit */
   \   00005E   539AFD       ANL     0x9a,#0xfd
    349          
    350              HAL_KEY_SW_8_ICTL &= ~(HAL_KEY_SW_8_ICTLBIT); /* don't generate interrupt */
   \   000061   538DFB       ANL     0x8d,#0xfb
    351              HAL_KEY_SW_8_IEN &= ~(HAL_KEY_SW_8_IENBIT);   /* Clear interrupt enable bit */
   \   000064   539AEF       ANL     0x9a,#0xef
    352          
    353              HAL_KEY_SW_9_ICTL &= ~(HAL_KEY_SW_9_ICTLBIT); /* don't generate interrupt */
   \   000067   53AB7F       ANL     0xab,#0x7f
    354              HAL_KEY_SW_9_IEN &= ~(HAL_KEY_SW_9_IENBIT);   /* Clear interrupt enable bit */
   \   00006A   C2BD         CLR     0xb8.5
    355          
    356              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
   \   00006C                ; Setup parameters for call to function osal_set_event
   \   00006C   7A10         MOV     R2,#0x10
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   90....       MOV     DPTR,#Hal_TaskID
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    357            }
    358          
    359            /* Key now is configured */
    360            HalKeyConfigured = TRUE;
   \                     ??HalKeyConfig_1:
   \   000078   90....       MOV     DPTR,#HalKeyConfigured
   \   00007B   7401         MOV     A,#0x1
   \   00007D   F0           MOVX    @DPTR,A
    361          }
   \   00007E   FF           MOV     R7,A
   \   00007F   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000082                REQUIRE PICTL
   \   000082                REQUIRE P0IEN
   \   000082                REQUIRE _A_IEN1
   \   000082                REQUIRE P0IFG
   \   000082                REQUIRE P2IEN
   \   000082                REQUIRE IEN2
   \   000082                REQUIRE P2IFG
   \   000082                REQUIRE P1IEN
   \   000082                REQUIRE P1IFG

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   43AC01       ORL     0xac,#0x1
   \   000003   439A02       ORL     0x9a,#0x2
   \   000006   758BFE       MOV     0x8b,#-0x2
   \   000009   22           RET
    362          
    363          
    364          /**************************************************************************************************
    365           * @fn      HalKeyRead
    366           *
    367           * @brief   Read the current value of a key
    368           *
    369           * @param   None
    370           *
    371           * @return  keys - current keys status
    372           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          uint8 HalKeyRead ( void )
   \                     HalKeyRead:
    374          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    375            uint8 keys = 0;
   \   000005   7E00         MOV     R6,#0x0
    376          
    377            if (HAL_PUSH_BUTTON1())
   \   000007   A281         MOV     C,0x80.1
   \   000009   4002         JC      ??HalKeyRead_0
    378            {
    379              keys |= HAL_KEY_SW_6;
   \   00000B   7E20         MOV     R6,#0x20
    380            }
    381          
    382            if (HAL_PUSH_BUTTON2())
   \                     ??HalKeyRead_0:
   \   00000D   A2A0         MOV     C,0xa0.0
   \   00000F   4004         JC      ??HalKeyRead_1
    383            {
    384              keys |= HAL_KEY_SW_7;
   \   000011   EE           MOV     A,R6
   \   000012   D2E6         SETB    0xE0 /* A   */.6
   \   000014   FE           MOV     R6,A
    385            }
    386          
    387            if (HAL_PUSH_BUTTON3())
   \                     ??HalKeyRead_1:
   \   000015   A292         MOV     C,0x90.2
   \   000017   4004         JC      ??HalKeyRead_2
    388            {
    389              keys |= HAL_KEY_SW_8;
   \   000019   EE           MOV     A,R6
   \   00001A   D2E7         SETB    0xE0 /* A   */.7
   \   00001C   FE           MOV     R6,A
    390            }
    391            
    392            if (HAL_PUSH_BUTTON4())
   \                     ??HalKeyRead_2:
   \   00001D   A287         MOV     C,0x80.7
   \   00001F   4004         JC      ??HalKeyRead_3
    393            {
    394              keys |= HAL_KEY_SW_9;
   \   000021   EE           MOV     A,R6
   \   000022   D2E0         SETB    0xE0 /* A   */.0
   \   000024   FE           MOV     R6,A
    395            }
    396          
    397          
    398            if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
   \                     ??HalKeyRead_3:
   \   000025   A2A0         MOV     C,0xa0.0
   \   000027   5007         JNC     ??HalKeyRead_4
    399            {
    400              keys |= halGetJoyKeyInput();
   \   000029                ; Setup parameters for call to function halGetJoyKeyInput
   \   000029   12....       LCALL   `??halGetJoyKeyInput::?relay`; Banked call to: halGetJoyKeyInput
   \   00002C   E9           MOV     A,R1
   \   00002D   CE           XCH     A,R6
   \   00002E   4E           ORL     A,R6
   \   00002F   FE           MOV     R6,A
    401            }
    402          
    403            return keys;
   \                     ??HalKeyRead_4:
   \   000030                REQUIRE ?Subroutine1
   \   000030                REQUIRE _A_P0
   \   000030                REQUIRE _A_P2
   \   000030                REQUIRE _A_P1
   \   000030                ; // Fall through to label ?Subroutine1
    404          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7F01         MOV     R7,#0x1
   \   000004   02....       LJMP    ?BANKED_LEAVE_XDATA
    405          
    406          
    407          /**************************************************************************************************
    408           * @fn      HalKeyPoll
    409           *
    410           * @brief   Called by hal_driver to poll the keys
    411           *
    412           * @param   None
    413           *
    414           * @return  None
    415           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    416          void HalKeyPoll (void)
   \                     HalKeyPoll:
    417          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    418            uint8 keys = 0;
   \   000004   7900         MOV     R1,#0x0
    419          
    420          //  if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
    421          //  {
    422          //    keys = halGetJoyKeyInput();
    423          //  }
    424          
    425          	if (HAL_PUSH_BUTTON1())
   \   000006   A281         MOV     C,0x80.1
   \   000008   4002         JC      ??HalKeyPoll_0
    426            {
    427              keys |= HAL_KEY_SW_6;
   \   00000A   7920         MOV     R1,#0x20
    428            }
    429          
    430            if (HAL_PUSH_BUTTON2())
   \                     ??HalKeyPoll_0:
   \   00000C   A2A0         MOV     C,0xa0.0
   \   00000E   4004         JC      ??HalKeyPoll_1
    431            {
    432              keys |= HAL_KEY_SW_7;
   \   000010   E9           MOV     A,R1
   \   000011   D2E6         SETB    0xE0 /* A   */.6
   \   000013   F9           MOV     R1,A
    433            }
    434          
    435            if (HAL_PUSH_BUTTON3())
   \                     ??HalKeyPoll_1:
   \   000014   A292         MOV     C,0x90.2
   \   000016   4004         JC      ??HalKeyPoll_2
    436            {
    437              keys |= HAL_KEY_SW_8;
   \   000018   E9           MOV     A,R1
   \   000019   D2E7         SETB    0xE0 /* A   */.7
   \   00001B   F9           MOV     R1,A
    438            }
    439            if (HAL_PUSH_BUTTON4())
   \                     ??HalKeyPoll_2:
   \   00001C   A287         MOV     C,0x80.7
   \   00001E   4004         JC      ??HalKeyPoll_3
    440            {
    441            	keys |= HAL_KEY_SW_9;
   \   000020   E9           MOV     A,R1
   \   000021   D2E0         SETB    0xE0 /* A   */.0
   \   000023   F9           MOV     R1,A
    442            }
    443          
    444            /* If interrupts are not enabled, previous key status and current key status
    445             * are compared to find out if a key has changed status.
    446             */
    447            if (!Hal_KeyIntEnable)
   \                     ??HalKeyPoll_3:
   \   000024   90....       MOV     DPTR,#Hal_KeyIntEnable
   \   000027   E0           MOVX    A,@DPTR
   \   000028   7009         JNZ     ??HalKeyPoll_4
    448            {
    449              if (keys == halKeySavedKeys)
   \   00002A   90....       MOV     DPTR,#halKeySavedKeys
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   69           XRL     A,R1
   \   00002F   6021         JZ      ??HalKeyPoll_5
    450              {
    451                /* Exit - since no keys have changed */
    452                return;
    453              }
    454              /* Store the current keys for comparation next time */
    455              halKeySavedKeys = keys;
   \   000031   E9           MOV     A,R1
   \   000032   F0           MOVX    @DPTR,A
    456            }
    457            else
    458            {
    459              /* Key interrupt handled here */
    460            }
    461          
    462            /* Invoke Callback if new keys were depressed */
    463            if (keys && (pHalKeyProcessFunction))
   \                     ??HalKeyPoll_4:
   \   000033   E9           MOV     A,R1
   \   000034   601C         JZ      ??HalKeyPoll_5
   \   000036   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FA           MOV     R2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FB           MOV     R3,A
   \   00003E   EA           MOV     A,R2
   \   00003F   4B           ORL     A,R3
   \   000040   6010         JZ      ??HalKeyPoll_5
    464            {
    465              (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
   \   000042                ; Setup parameters for indirect call
   \   000042   7A00         MOV     R2,#0x0
   \   000044   90....       MOV     DPTR,#pHalKeyProcessFunction
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F583         MOV     DPH,A
   \   00004D   8882         MOV     DPL,R0
   \   00004F   12....       LCALL   ?CALL_IND
    466            }
    467          }
   \                     ??HalKeyPoll_5:
   \   000052   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000055                REQUIRE _A_P0
   \   000055                REQUIRE _A_P2
   \   000055                REQUIRE _A_P1
    468          
    469          /**************************************************************************************************
    470           * @fn      halGetJoyKeyInput
    471           *
    472           * @brief   Map the ADC value to its corresponding key.
    473           *
    474           * @param   None
    475           *
    476           * @return  keys - current joy key status
    477           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    478          uint8 halGetJoyKeyInput(void)
   \                     halGetJoyKeyInput:
    479          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    480            /* The joystick control is encoded as an analog voltage.
    481             * Read the JOY_LEVEL analog value and map it to joy movement.
    482             */
    483            uint8 adc;
    484            uint8 ksave0 = 0;
   \   000005   7E00         MOV     R6,#0x0
    485            uint8 ksave1;
    486          
    487            /* Keep on reading the ADC until two consecutive key decisions are the same. */
    488            do
    489            {
    490              ksave1 = ksave0;    /* save previouse key reading */
   \                     ??halGetJoyKeyInput_0:
   \   000007   EE           MOV     A,R6
   \   000008   FF           MOV     R7,A
    491          
    492              adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
   \   000009                ; Setup parameters for call to function HalAdcRead
   \   000009   7A01         MOV     R2,#0x1
   \   00000B   7906         MOV     R1,#0x6
   \   00000D   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   000010   EA           MOV     A,R2
   \   000011   F8           MOV     R0,A
    493          
    494              if ((adc >= 2) && (adc <= 38))
   \   000012   74FE         MOV     A,#-0x2
   \   000014   2A           ADD     A,R2
   \   000015   C3           CLR     C
   \   000016   9425         SUBB    A,#0x25
   \   000018   5005         JNC     ??halGetJoyKeyInput_1
    495              {
    496                 ksave0 |= HAL_KEY_UP;
   \   00001A   EE           MOV     A,R6
   \   00001B   D2E0         SETB    0xE0 /* A   */.0
   \   00001D   8032         SJMP    ??halGetJoyKeyInput_2
    497              }
    498              else if ((adc >= 74) && (adc <= 88))
   \                     ??halGetJoyKeyInput_1:
   \   00001F   74B6         MOV     A,#-0x4a
   \   000021   2A           ADD     A,R2
   \   000022   C3           CLR     C
   \   000023   940F         SUBB    A,#0xf
   \   000025   5005         JNC     ??halGetJoyKeyInput_3
    499              {
    500                ksave0 |= HAL_KEY_RIGHT;
   \   000027   EE           MOV     A,R6
   \   000028   D2E1         SETB    0xE0 /* A   */.1
   \   00002A   8025         SJMP    ??halGetJoyKeyInput_2
    501              }
    502              else if ((adc >= 60) && (adc <= 73))
   \                     ??halGetJoyKeyInput_3:
   \   00002C   74C4         MOV     A,#-0x3c
   \   00002E   2A           ADD     A,R2
   \   00002F   C3           CLR     C
   \   000030   940E         SUBB    A,#0xe
   \   000032   5005         JNC     ??halGetJoyKeyInput_4
    503              {
    504                ksave0 |= HAL_KEY_LEFT;
   \   000034   EE           MOV     A,R6
   \   000035   D2E3         SETB    0xE0 /* A   */.3
   \   000037   8018         SJMP    ??halGetJoyKeyInput_2
    505              }
    506              else if ((adc >= 39) && (adc <= 59))
   \                     ??halGetJoyKeyInput_4:
   \   000039   74D9         MOV     A,#-0x27
   \   00003B   2A           ADD     A,R2
   \   00003C   C3           CLR     C
   \   00003D   9415         SUBB    A,#0x15
   \   00003F   5005         JNC     ??halGetJoyKeyInput_5
    507              {
    508                ksave0 |= HAL_KEY_DOWN;
   \   000041   EE           MOV     A,R6
   \   000042   D2E4         SETB    0xE0 /* A   */.4
   \   000044   800B         SJMP    ??halGetJoyKeyInput_2
    509              }
    510              else if ((adc >= 89) && (adc <= 100))
   \                     ??halGetJoyKeyInput_5:
   \   000046   74A7         MOV     A,#-0x59
   \   000048   2A           ADD     A,R2
   \   000049   C3           CLR     C
   \   00004A   940C         SUBB    A,#0xc
   \   00004C   5004         JNC     ??halGetJoyKeyInput_6
    511              {
    512                ksave0 |= HAL_KEY_CENTER;
   \   00004E   EE           MOV     A,R6
   \   00004F   D2E2         SETB    0xE0 /* A   */.2
   \                     ??halGetJoyKeyInput_2:
   \   000051   FE           MOV     R6,A
    513              }
    514            } while (ksave0 != ksave1);
   \                     ??halGetJoyKeyInput_6:
   \   000052   EF           MOV     A,R7
   \   000053   6E           XRL     A,R6
   \   000054   70B1         JNZ     ??halGetJoyKeyInput_0
    515          
    516            return ksave0;
   \   000056   02....       LJMP    ?Subroutine1 & 0xFFFF
    517          }
    518          
    519          
    520          
    521          
    522          
    523          /**************************************************************************************************
    524           * @fn      halProcessKeyInterrupt
    525           *
    526           * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
    527           *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
    528           *
    529           * @param
    530           *
    531           * @return
    532           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          void halProcessKeyInterrupt (void)
   \                     halProcessKeyInterrupt:
    534          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    535            bool valid=FALSE;
   \   000004   7800         MOV     R0,#0x0
    536          
    537            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
   \   000006   E589         MOV     A,0x89
   \   000008   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000A   5005         JNC     ??halProcessKeyInterrupt_0
    538            {
    539              HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
   \   00000C   7589FD       MOV     0x89,#-0x3
    540              valid = TRUE;
   \   00000F   7801         MOV     R0,#0x1
    541            }
    542            if (HAL_KEY_SW_7_PXIFG & HAL_KEY_SW_7_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_0:
   \   000011   E58B         MOV     A,0x8b
   \   000013   A2E0         MOV     C,0xE0 /* A   */.0
   \   000015   5005         JNC     ??halProcessKeyInterrupt_1
    543            {
    544              HAL_KEY_SW_7_PXIFG = ~(HAL_KEY_SW_7_BIT); /* Clear Interrupt Flag */
   \   000017   758BFE       MOV     0x8b,#-0x2
    545              valid = TRUE;
   \   00001A   7801         MOV     R0,#0x1
    546            }
    547             if (HAL_KEY_SW_8_PXIFG & HAL_KEY_SW_8_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_1:
   \   00001C   E58A         MOV     A,0x8a
   \   00001E   A2E2         MOV     C,0xE0 /* A   */.2
   \   000020   5005         JNC     ??halProcessKeyInterrupt_2
    548            {
    549              HAL_KEY_SW_8_PXIFG = ~(HAL_KEY_SW_8_BIT); /* Clear Interrupt Flag */
   \   000022   758AFB       MOV     0x8a,#-0x5
    550              valid = TRUE;
   \   000025   7801         MOV     R0,#0x1
    551            }
    552             if (HAL_KEY_SW_9_PXIFG & HAL_KEY_SW_9_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_2:
   \   000027   E589         MOV     A,0x89
   \   000029   A2E7         MOV     C,0xE0 /* A   */.7
   \   00002B   5005         JNC     ??halProcessKeyInterrupt_3
    553            {
    554              HAL_KEY_SW_9_PXIFG = ~(HAL_KEY_SW_9_BIT); /* Clear Interrupt Flag */
                                          ^
Warning[Pe069]: integer conversion resulted in truncation
   \   00002D   75897F       MOV     0x89,#0x7f
    555              valid = TRUE;
   \   000030   7801         MOV     R0,#0x1
    556            }
    557          
    558          
    559            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
   \                     ??halProcessKeyInterrupt_3:
   \   000032   E58B         MOV     A,0x8b
   \   000034   A2E0         MOV     C,0xE0 /* A   */.0
   \   000036   5005         JNC     ??halProcessKeyInterrupt_4
    560            {
    561              HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
   \   000038   758BFE       MOV     0x8b,#-0x2
    562              valid = TRUE;
   \   00003B   8005         SJMP    ??halProcessKeyInterrupt_5
    563            }
    564          
    565            if (valid)
   \                     ??halProcessKeyInterrupt_4:
   \   00003D   E8           MOV     A,R0
   \   00003E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000040   5017         JNC     ??halProcessKeyInterrupt_6
    566            {
    567              osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
   \                     ??halProcessKeyInterrupt_5:
   \   000042                ; Setup parameters for call to function osal_start_timerEx
   \   000042   90....       MOV     DPTR,#__Constant_19
   \   000045   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000048   7A10         MOV     R2,#0x10
   \   00004A   7B00         MOV     R3,#0x0
   \   00004C   90....       MOV     DPTR,#Hal_TaskID
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000054   7404         MOV     A,#0x4
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
    568            }
    569          }
   \                     ??halProcessKeyInterrupt_6:
   \   000059                REQUIRE ?Subroutine0
   \   000059                REQUIRE P0IFG
   \   000059                REQUIRE P2IFG
   \   000059                REQUIRE P1IFG
   \   000059                ; // Fall through to label ?Subroutine0
    570          
    571          /**************************************************************************************************
    572           * @fn      HalKeyEnterSleep
    573           *
    574           * @brief  - Get called to enter sleep mode
    575           *
    576           * @param
    577           *
    578           * @return
    579           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          void HalKeyEnterSleep ( void )
   \                     HalKeyEnterSleep:
    581          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    582          }
   \   000000   02....       LJMP    ?BRET
    583          
    584          /**************************************************************************************************
    585           * @fn      HalKeyExitSleep
    586           *
    587           * @brief   - Get called when sleep is over
    588           *
    589           * @param
    590           *
    591           * @return  - return saved keys
    592           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          uint8 HalKeyExitSleep ( void )
   \                     HalKeyExitSleep:
    594          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    595            /* Wake up and read keys */
    596            return ( HalKeyRead () );
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   80..         SJMP    ?Subroutine0
    597          }
    598          
    599          /***************************************************************************************************
    600           *                                    INTERRUPT SERVICE ROUTINE
    601           ***************************************************************************************************/
    602          
    603          /**************************************************************************************************
    604           * @fn      halKeyPort0Isr
    605           *
    606           * @brief   Port0 ISR
    607           *
    608           * @param
    609           *
    610           * @return
    611           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    612          HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
   \                     halKeyPort0Isr:
    613          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    614            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   D2AF         SETB    0xa8.7
    615          
    616            if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
   \   00000E   E589         MOV     A,0x89
   \   000010   A2E1         MOV     C,0xE0 /* A   */.1
   \   000012   5003         JNC     ??halKeyPort0Isr_0
    617            {
    618              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL   `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    619            }
    620          
    621            /*
    622              Clear the CPU interrupt flag for Port_0
    623              PxIFG has to be cleared before PxIF
    624            */
    625            HAL_KEY_SW_6_PXIFG = 0;
   \                     ??halKeyPort0Isr_0:
   \   000017   758900       MOV     0x89,#0x0
    626            HAL_KEY_CPU_PORT_0_IF = 0;
   \   00001A   C2C5         CLR     0xc0.5
    627            
    628            CLEAR_SLEEP_MODE();
    629            HAL_EXIT_ISR();
   \   00001C                REQUIRE ?Subroutine2
   \   00001C                REQUIRE _A_IEN0
   \   00001C                REQUIRE P0IFG
   \   00001C                REQUIRE _A_IRCON
   \   00001C                ; // Fall through to label ?Subroutine2
    630          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   A2E0         MOV     C,0xE0 /* A   */.0
   \   000003   92AF         MOV     0xa8.7,C
   \   000005   7F01         MOV     R7,#0x1
   \   000007   02....       LJMP    ?INTERRUPT_LEAVE_XSP
    631          
    632          
    633          /**************************************************************************************************
    634           * @fn      halKeyPort2Isr
    635           *
    636           * @brief   Port2 ISR
    637           *
    638           * @param
    639           *
    640           * @return
    641           **************************************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    642          HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
   \                     halKeyPort2Isr:
    643          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    644            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   D2AF         SETB    0xa8.7
    645            
    646            if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
   \   00000E   E58B         MOV     A,0x8b
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5003         JNC     ??halKeyPort2Isr_0
    647            {
    648              halProcessKeyInterrupt();
   \   000014                ; Setup parameters for call to function halProcessKeyInterrupt
   \   000014   12....       LCALL   `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
    649            }
    650          
    651            /*
    652              Clear the CPU interrupt flag for Port_2
    653              PxIFG has to be cleared before PxIF
    654              Notes: P2_1 and P2_2 are debug lines.
    655            */
    656            HAL_KEY_JOY_MOVE_PXIFG = 0;
   \                     ??halKeyPort2Isr_0:
   \   000017   758B00       MOV     0x8b,#0x0
    657            HAL_KEY_CPU_PORT_2_IF = 0;
   \   00001A   C2E8         CLR     0xe8.0
    658          
    659            CLEAR_SLEEP_MODE();
    660            HAL_EXIT_ISR();
   \   00001C   80..         SJMP    ?Subroutine2
   \   00001E                REQUIRE _A_IEN0
   \   00001E                REQUIRE P2IFG
   \   00001E                REQUIRE _A_IRCON2
    661          }

   \                                 In  segment INTVEC, offset 0x33, root
   \                     `??halKeyPort2Isr::??INTVEC 51`:
   \   000033   02....       LJMP       (halKeyPort2Isr)

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??halKeyPort0Isr::??INTVEC 107`:
   \   00006B   02....       LJMP       (halKeyPort0Isr)

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_19:
   \   000000   19000000     DD 25

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halGetJoyKeyInput::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halGetJoyKeyInput

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halProcessKeyInterrupt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halProcessKeyInterrupt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyEnterSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalKeyExitSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalKeyExitSleep
    662          
    663          #else
    664          
    665          
    666          void HalKeyInit(void){}
    667          void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
    668          uint8 HalKeyRead(void){ return 0;}
    669          void HalKeyPoll(void){}
    670          
    671          #endif /* HAL_KEY */
    672          
    673          
    674          
    675          
    676          
    677          /**************************************************************************************************
    678          **************************************************************************************************/
    679          
    680          
    681          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   HalKeyConfig
        0      9   -> osal_set_event
        0      9   -> osal_stop_timerEx
      0      0   HalKeyEnterSleep
      2      0   HalKeyExitSleep
        2      0   -> HalKeyRead
      2      0   HalKeyInit
      2      0   HalKeyPoll
      0      9   HalKeyRead
        0      9   -> halGetJoyKeyInput
      0     18   halGetJoyKeyInput
        0      9   -> HalAdcRead
      0     14   halKeyPort0Isr
        0     14   -> halProcessKeyInterrupt
      0     14   halKeyPort2Isr
        0     14   -> halProcessKeyInterrupt
      2     18   halProcessKeyInterrupt
        2      4   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?Subroutine0
       7  ?Subroutine1
      10  ?Subroutine2
      10  ?Subroutine3
     130  HalKeyConfig
       6  HalKeyConfig::?relay
       1  HalKeyConfigured
       3  HalKeyEnterSleep
       6  HalKeyEnterSleep::?relay
       9  HalKeyExitSleep
       6  HalKeyExitSleep::?relay
      52  HalKeyInit
       6  HalKeyInit::?relay
      85  HalKeyPoll
       6  HalKeyPoll::?relay
      48  HalKeyRead
       6  HalKeyRead::?relay
       1  Hal_KeyIntEnable
       1  IEN2
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0SEL
       1  P1DIR
       1  P1IEN
       1  P1IFG
       1  P1SEL
       1  P2DIR
       1  P2IEN
       1  P2IFG
       1  P2SEL
       1  PICTL
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       1  _A_IRCON2
       1  _A_P0
       1  _A_P1
       1  _A_P2
       4  __Constant_19
      89  halGetJoyKeyInput
       6  halGetJoyKeyInput::?relay
      28  halKeyPort0Isr
       3  halKeyPort0Isr::??INTVEC 107
      30  halKeyPort2Isr
       3  halKeyPort2Isr::??INTVEC 51
       1  halKeySavedKeys
      89  halProcessKeyInterrupt
       6  halProcessKeyInterrupt::?relay
       2  pHalKeyProcessFunction

 
 529 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
  68 bytes in segment NEAR_CODE
  21 bytes in segment SFR_AN
   4 bytes in segment XDATA_ROM_C
   5 bytes in segment XDATA_Z
 
 116 bytes of CODE     memory (+  6 bytes shared)
   0 bytes of CONST    memory (+  4 bytes shared)
   0 bytes of DATA     memory (+ 21 bytes shared)
 529 bytes of HUGECODE memory
   5 bytes of XDATA    memory

Errors: none
Warnings: 2
