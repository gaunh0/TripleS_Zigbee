###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                11/Mar/2017  09:25:36
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART_CMD.c
#    Command line       =  
#        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Teddy\Desktop\aaa\[COMBROS]
#        Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFAFA
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART_CMD.c"
#        -D COORDINATOR -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
#        -D xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D
#        ZCL_HVAC_CLUSTER -D xHAL_UART=TRUE -D xHAL_UART_DMA=1 -lC
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
#        -lA "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Teddy\Desktop\aaa\[COMBROS]
#        Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\HomeAutomation\MY-SOURCE\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List\MS_UART_CMD.lst
#    Object file        =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj\MS_UART_CMD.r51
#
###############################################################################

C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART_CMD.c
      1          /*******************************************************************************
      2           *                                            INCLUDES
      3           *******************************************************************************/
      4          #include "MS_UART_CMD.h"
      5          #include "MS_UART.h"
      6          #include "string.h"
      7          
      8          #include "zcl.h"
      9          #include "zcl_general.h"
     10          #include "zcl_ha.h"
     11          #include "zcl_ezmode.h"
     12          #include "zcl_hvac.h"
     13          #include "zcl_ms.h"
     14          
     15          #if 	(defined COORDINATOR) || (defined ROUTER)
     16          	#include "zcl_samplethermostat.h" 
     17          #elif (defined END_DEVICE_SENSOR)
     18          	#include "zcl_sampletemperaturesensor.h"
     19          #elif (defined END_DEVICE_ENGINE)
     20          	#include "zcl_sampleheatingcoolingunit.h"
     21          #endif
     22          
     23          /*******************************************************************************
     24           *                                             MACROS
     25           *******************************************************************************/
     26          
     27          /*******************************************************************************
     28           *                                            CONSTANTS
     29           *******************************************************************************/
     30          #define UART_CMD_BUF_SIZE_128           			128
     31          
     32          #define CMD_CHECK_ALIVE												0
     33          #define CMD_BINDING_START											1
     34          #define CMD_BINDING_STOP											2
     35          #define CMD_RETURN_SHORT_ADDRESS							3
     36          #define CMD_RETURN_COORD_SHORT_ADDRESS				4
     37          #define CMD_ENABLE_ECHO_SDATA									5
     38          #define CMD_DISABLE_ECHO_SDATA								6
     39          #define CMD_ENABLE_ECHO_RDATA									7
     40          #define CMD_DISABLE_ECHO_RDATA								8
     41          #define CMD_SEND_FREE_DATA										10
     42          #define CMD_SEND_CONTROL                              11
     43          
     44          
     45          /*******************************************************************************
     46           *                                             TYPEDEFS
     47           *******************************************************************************/
     48          
     49          /*******************************************************************************
     50           *                                         GLOBAL VARIABLES
     51           *******************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     52          static uint16 packageLength = 0;
   \                     packageLength:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     53          char* pcmdData;
   \                     pcmdData:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     54          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     55          bool FLAG_ECHO_SDATA 	= FALSE;
   \                     FLAG_ECHO_SDATA:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     56          bool FLAG_ECHO_RDATA 	= FALSE;
   \                     FLAG_ECHO_RDATA:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     57          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     58          char		Free_Data[FREE_DATA_BFR_SIZE + 1];
   \                     Free_Data:
   \   000000                DS 21
   \   000015                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     59          uint8 	Free_Data_Size;
   \                     Free_Data_Size:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     60          
     61          /*******************************************************************************
     62           *                                          FUNCTIONS - External
     63           *******************************************************************************/
     64          
     65          /*******************************************************************************
     66           *                                          FUNCTIONS - Local
     67           *******************************************************************************/
     68          static char* ZCMD_MatchCMD(char* buf, char* str);
     69          static uint8 ZCMD_FindChrStr(char* buf, uint8 chr);
     70          static void ZCMD_ProcessCMD(uint8 CMD);
     71          /*******************************************************************************
     72           *                                          FUNCTIONS - API
     73           *******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     74          void ZCMD_ReplyCMD(void)
   \                     ZCMD_ReplyCMD:
     75          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     76          	char Rx0_tmpBuffer[UART_CMD_BUF_SIZE_128];
     77          	packageLength = UART_ParseLength(HAL_UART_PORT_0);
   \   00000A                ; Setup parameters for call to function UART_ParseLength
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   12....       LCALL   `??UART_ParseLength::?relay`; Banked call to: UART_ParseLength
   \   00000F   E9           MOV     A,R1
   \   000010   90....       MOV     DPTR,#packageLength
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
     78          	
     79          	UART_GetData(HAL_UART_PORT_0, (uint8*)Rx0_tmpBuffer, packageLength);
   \   000017                ; Setup parameters for call to function UART_GetData
   \   000017   90....       MOV     DPTR,#packageLength
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FC           MOV     R4,A
   \   00001C   AA..         MOV     R2,?XSP + 0
   \   00001E   AB..         MOV     R3,?XSP + 1
   \   000020   7900         MOV     R1,#0x0
   \   000022   12....       LCALL   `??UART_GetData::?relay`; Banked call to: UART_GetData
     80          	UART_DebugPrintNum(HAL_UART_PORT_0, packageLength);
   \   000025                ; Setup parameters for call to function UART_DebugPrintNum
   \   000025   90....       MOV     DPTR,#packageLength
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   AA..         MOV     R2,?V0
   \   00002F   FB           MOV     R3,A
   \   000030   E4           CLR     A
   \   000031   FC           MOV     R4,A
   \   000032   FD           MOV     R5,A
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   `??UART_DebugPrintNum::?relay`; Banked call to: UART_DebugPrintNum
     81          	UART_DebugPrint(HAL_UART_PORT_0, " ");
   \   000037                ; Setup parameters for call to function UART_DebugPrint
   \   000037   7A..         MOV     R2,#`?<Constant " ">` & 0xff
   \   000039   7B..         MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
     82          
     83          	if ( Rx0_tmpBuffer[0] == '@' && Rx0_tmpBuffer[1] == 'Z' &&
     84          		 	 Rx0_tmpBuffer[2] == 'B' && Rx0_tmpBuffer[packageLength-1] == '!' &&
     85          		 	 ZCMD_FindChrStr(Rx0_tmpBuffer, '!') )
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6440         XRL     A,#0x40
   \   000049   6003         JZ      $+5
   \   00004B   02....       LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
   \   00004E   7401         MOV     A,#0x1
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E0           MOVX    A,@DPTR
   \   000054   645A         XRL     A,#0x5a
   \   000056   6003         JZ      $+5
   \   000058   02....       LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6442         XRL     A,#0x42
   \   000063   6003         JZ      $+5
   \   000065   02....       LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
   \   000068   90....       MOV     DPTR,#packageLength
   \   00006B   A8..         MOV     R0,?XSP + 0
   \   00006D   A9..         MOV     R1,?XSP + 1
   \   00006F   89..         MOV     ?V1,R1
   \   000071   E0           MOVX    A,@DPTR
   \   000072   28           ADD     A,R0
   \   000073   F8           MOV     R0,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   35..         ADDC    A,?V1
   \   000078   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00007B   6421         XRL     A,#0x21
   \   00007D   6003         JZ      $+5
   \   00007F   02....       LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
   \   000082   7D00         MOV     R5,#0x0
   \   000084   7C00         MOV     R4,#0x0
   \   000086   8017         SJMP    ??ZCMD_ReplyCMD_1
   \                     ??ZCMD_ReplyCMD_2:
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   E582         MOV     A,DPL
   \   000090   28           ADD     A,R0
   \   000091   F582         MOV     DPL,A
   \   000093   E4           CLR     A
   \   000094   3583         ADDC    A,DPH
   \   000096   F583         MOV     DPH,A
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6421         XRL     A,#0x21
   \   00009B   7001         JNZ     ??ZCMD_ReplyCMD_3
   \   00009D   0D           INC     R5
   \                     ??ZCMD_ReplyCMD_3:
   \   00009E   0C           INC     R4
   \                     ??ZCMD_ReplyCMD_1:
   \   00009F   EC           MOV     A,R4
   \   0000A0   F8           MOV     R0,A
   \   0000A1   90....       MOV     DPTR,#packageLength
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FB           MOV     R3,A
   \   0000A9   C3           CLR     C
   \   0000AA   E8           MOV     A,R0
   \   0000AB   9A           SUBB    A,R2
   \   0000AC   E4           CLR     A
   \   0000AD   9B           SUBB    A,R3
   \   0000AE   40D8         JC      ??ZCMD_ReplyCMD_2
   \   0000B0   7401         MOV     A,#0x1
   \   0000B2   6D           XRL     A,R5
   \   0000B3   6003         JZ      $+5
   \   0000B5   02....       LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
     86          	{
     87          		// Check alive
     88          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB!"))
   \   0000B8                ; Setup parameters for call to function ZCMD_MatchCMD
   \   0000B8   7C..         MOV     R4,#`?<Constant "@ZB!">` & 0xff
   \   0000BA   7D..         MOV     R5,#(`?<Constant "@ZB!">` >> 8) & 0xff
   \   0000BC   AA..         MOV     R2,?XSP + 0
   \   0000BE   AB..         MOV     R3,?XSP + 1
   \   0000C0   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   0000C3   8B..         MOV     ?V1,R3
   \   0000C5   EA           MOV     A,R2
   \   0000C6   45..         ORL     A,?V1
   \   0000C8   6005         JZ      ??ZCMD_ReplyCMD_4
     89          		{
     90          			ZCMD_ProcessCMD(CMD_CHECK_ALIVE);
   \   0000CA                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   0000CA   7900         MOV     R1,#0x0
   \   0000CC   02....       LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
     91          			return;
     92          		}
     93          		
     94          		// Binding STOP
     95          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+BIND=0!"))
   \                     ??ZCMD_ReplyCMD_4:
   \   0000CF                ; Setup parameters for call to function ZCMD_MatchCMD
   \   0000CF   7C..         MOV     R4,#`?<Constant "@ZB+BIND=0!">` & 0xff
   \   0000D1   7D..         MOV     R5,#(`?<Constant "@ZB+BIND=0!">` >> 8) & 0xff
   \   0000D3   AA..         MOV     R2,?XSP + 0
   \   0000D5   AB..         MOV     R3,?XSP + 1
   \   0000D7   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   0000DA   8B..         MOV     ?V1,R3
   \   0000DC   EA           MOV     A,R2
   \   0000DD   45..         ORL     A,?V1
   \   0000DF   6005         JZ      ??ZCMD_ReplyCMD_6
     96          		{
     97          			ZCMD_ProcessCMD(CMD_BINDING_STOP);
   \   0000E1                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   0000E1   7902         MOV     R1,#0x2
   \   0000E3   02....       LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
     98          			return;
     99          		}
    100          		
    101          		// Binding START
    102          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+BIND=1!"))
   \                     ??ZCMD_ReplyCMD_6:
   \   0000E6                ; Setup parameters for call to function ZCMD_MatchCMD
   \   0000E6   7C..         MOV     R4,#`?<Constant "@ZB+BIND=1!">` & 0xff
   \   0000E8   7D..         MOV     R5,#(`?<Constant "@ZB+BIND=1!">` >> 8) & 0xff
   \   0000EA   AA..         MOV     R2,?XSP + 0
   \   0000EC   AB..         MOV     R3,?XSP + 1
   \   0000EE   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   0000F1   8B..         MOV     ?V1,R3
   \   0000F3   EA           MOV     A,R2
   \   0000F4   45..         ORL     A,?V1
   \   0000F6   6005         JZ      ??ZCMD_ReplyCMD_7
    103          		{
    104          			ZCMD_ProcessCMD(CMD_BINDING_START);
   \   0000F8                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   0000F8   7901         MOV     R1,#0x1
   \   0000FA   02....       LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
    105          			return;
    106          		}
    107          		
    108          		// Get Short Address
    109          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+SHORTADDR!"))
   \                     ??ZCMD_ReplyCMD_7:
   \   0000FD                ; Setup parameters for call to function ZCMD_MatchCMD
   \   0000FD   7C..         MOV     R4,#`?<Constant "@ZB+SHORTADDR!">` & 0xff
   \   0000FF   7D..         MOV     R5,#(`?<Constant "@ZB+SHORTADDR!">` >> 8) & 0xff
   \   000101   AA..         MOV     R2,?XSP + 0
   \   000103   AB..         MOV     R3,?XSP + 1
   \   000105   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   000108   8B..         MOV     ?V1,R3
   \   00010A   EA           MOV     A,R2
   \   00010B   45..         ORL     A,?V1
   \   00010D   6005         JZ      ??ZCMD_ReplyCMD_8
    110          		{
    111          			ZCMD_ProcessCMD(CMD_RETURN_SHORT_ADDRESS);
   \   00010F                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   00010F   7903         MOV     R1,#0x3
   \   000111   02....       LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
    112          			return;
    113          		}
    114          
    115          		// Get Coord Short Address
    116          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+COORDSHORTADDR!"))
   \                     ??ZCMD_ReplyCMD_8:
   \   000114                ; Setup parameters for call to function ZCMD_MatchCMD
   \   000114   7C..         MOV     R4,#`?<Constant "@ZB+COORDSHORTADDR!">` & 0xff
   \   000116   7D..         MOV     R5,#(`?<Constant "@ZB+COORDSHORTADDR!">` >> 8) & 0xff
   \   000118   AA..         MOV     R2,?XSP + 0
   \   00011A   AB..         MOV     R3,?XSP + 1
   \   00011C   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   00011F   8B..         MOV     ?V1,R3
   \   000121   EA           MOV     A,R2
   \   000122   45..         ORL     A,?V1
   \   000124   6005         JZ      ??ZCMD_ReplyCMD_9
    117          		{
    118          			ZCMD_ProcessCMD(CMD_RETURN_COORD_SHORT_ADDRESS);
   \   000126                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   000126   7904         MOV     R1,#0x4
   \   000128   02....       LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
    119          			return;
    120          		}
    121          
    122          		// Disable Echo SEND Data
    123          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+ECHOSDATA=0!"))
   \                     ??ZCMD_ReplyCMD_9:
   \   00012B                ; Setup parameters for call to function ZCMD_MatchCMD
   \   00012B   7C..         MOV     R4,#`?<Constant "@ZB+ECHOSDATA=0!">` & 0xff
   \   00012D   7D..         MOV     R5,#(`?<Constant "@ZB+ECHOSDATA=0!">` >> 8) & 0xff
   \   00012F   AA..         MOV     R2,?XSP + 0
   \   000131   AB..         MOV     R3,?XSP + 1
   \   000133   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   000136   8B..         MOV     ?V1,R3
   \   000138   EA           MOV     A,R2
   \   000139   45..         ORL     A,?V1
   \   00013B   6004         JZ      ??ZCMD_ReplyCMD_10
    124          		{
    125          			ZCMD_ProcessCMD(CMD_DISABLE_ECHO_SDATA);
   \   00013D                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   00013D   7906         MOV     R1,#0x6
   \   00013F   806C         SJMP    ??ZCMD_ReplyCMD_5
    126          			return;
    127          		}
    128          
    129          		// Enable Echo SEND Data
    130          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+ECHOSDATA=1!"))
   \                     ??ZCMD_ReplyCMD_10:
   \   000141                ; Setup parameters for call to function ZCMD_MatchCMD
   \   000141   7C..         MOV     R4,#`?<Constant "@ZB+ECHOSDATA=1!">` & 0xff
   \   000143   7D..         MOV     R5,#(`?<Constant "@ZB+ECHOSDATA=1!">` >> 8) & 0xff
   \   000145   AA..         MOV     R2,?XSP + 0
   \   000147   AB..         MOV     R3,?XSP + 1
   \   000149   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   00014C   8B..         MOV     ?V1,R3
   \   00014E   EA           MOV     A,R2
   \   00014F   45..         ORL     A,?V1
   \   000151   6004         JZ      ??ZCMD_ReplyCMD_11
    131          		{		
    132          			ZCMD_ProcessCMD(CMD_ENABLE_ECHO_SDATA);
   \   000153                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   000153   7905         MOV     R1,#0x5
   \   000155   8056         SJMP    ??ZCMD_ReplyCMD_5
    133          			return;
    134          		}
    135          
    136          		// Disable Echo RECEIVE Data
    137          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+ECHORDATA=0!"))
   \                     ??ZCMD_ReplyCMD_11:
   \   000157                ; Setup parameters for call to function ZCMD_MatchCMD
   \   000157   7C..         MOV     R4,#`?<Constant "@ZB+ECHORDATA=0!">` & 0xff
   \   000159   7D..         MOV     R5,#(`?<Constant "@ZB+ECHORDATA=0!">` >> 8) & 0xff
   \   00015B   AA..         MOV     R2,?XSP + 0
   \   00015D   AB..         MOV     R3,?XSP + 1
   \   00015F   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   000162   8B..         MOV     ?V1,R3
   \   000164   EA           MOV     A,R2
   \   000165   45..         ORL     A,?V1
   \   000167   6004         JZ      ??ZCMD_ReplyCMD_12
    138          		{
    139          			ZCMD_ProcessCMD(CMD_DISABLE_ECHO_RDATA);
   \   000169                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   000169   7908         MOV     R1,#0x8
   \   00016B   8040         SJMP    ??ZCMD_ReplyCMD_5
    140          			return;
    141          		}
    142          
    143          		// Enable Echo RECEIVE Data
    144          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+ECHORDATA=1!"))
   \                     ??ZCMD_ReplyCMD_12:
   \   00016D                ; Setup parameters for call to function ZCMD_MatchCMD
   \   00016D   7C..         MOV     R4,#`?<Constant "@ZB+ECHORDATA=1!">` & 0xff
   \   00016F   7D..         MOV     R5,#(`?<Constant "@ZB+ECHORDATA=1!">` >> 8) & 0xff
   \   000171   AA..         MOV     R2,?XSP + 0
   \   000173   AB..         MOV     R3,?XSP + 1
   \   000175   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   000178   8B..         MOV     ?V1,R3
   \   00017A   EA           MOV     A,R2
   \   00017B   45..         ORL     A,?V1
   \   00017D   6004         JZ      ??ZCMD_ReplyCMD_13
    145          		{		
    146          			ZCMD_ProcessCMD(CMD_ENABLE_ECHO_RDATA);
   \   00017F                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   00017F   7907         MOV     R1,#0x7
   \   000181   802A         SJMP    ??ZCMD_ReplyCMD_5
    147          			return;
    148          		}
    149          
    150          		// Send FREE DATA - Only for ZB Coordinator
    151          		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+DATA="))
   \                     ??ZCMD_ReplyCMD_13:
   \   000183                ; Setup parameters for call to function ZCMD_MatchCMD
   \   000183   7C..         MOV     R4,#`?<Constant "@ZB+DATA=">` & 0xff
   \   000185   7D..         MOV     R5,#(`?<Constant "@ZB+DATA=">` >> 8) & 0xff
   \   000187   AA..         MOV     R2,?XSP + 0
   \   000189   AB..         MOV     R3,?XSP + 1
   \   00018B   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   00018E   8B..         MOV     ?V1,R3
   \   000190   EA           MOV     A,R2
   \   000191   45..         ORL     A,?V1
   \   000193   6004         JZ      ??ZCMD_ReplyCMD_14
    152          		{		
    153          			ZCMD_ProcessCMD(CMD_SEND_FREE_DATA);
   \   000195                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   000195   790A         MOV     R1,#0xa
   \   000197   8014         SJMP    ??ZCMD_ReplyCMD_5
    154          			return;
    155          		}
    156          		// control led -  only for ZBC
    157          		if (ZCMD_MatchCMD(Rx0_tmpBuffer,"@ZB+CONTROL="))
   \                     ??ZCMD_ReplyCMD_14:
   \   000199                ; Setup parameters for call to function ZCMD_MatchCMD
   \   000199   7C..         MOV     R4,#`?<Constant "@ZB+CONTROL=">` & 0xff
   \   00019B   7D..         MOV     R5,#(`?<Constant "@ZB+CONTROL=">` >> 8) & 0xff
   \   00019D   AA..         MOV     R2,?XSP + 0
   \   00019F   AB..         MOV     R3,?XSP + 1
   \   0001A1   12....       LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
   \   0001A4   8B..         MOV     ?V1,R3
   \   0001A6   EA           MOV     A,R2
   \   0001A7   45..         ORL     A,?V1
   \   0001A9   6007         JZ      ??ZCMD_ReplyCMD_0
    158          		{
    159          			ZCMD_ProcessCMD(CMD_SEND_CONTROL);
   \   0001AB                ; Setup parameters for call to function ZCMD_ProcessCMD
   \   0001AB   790B         MOV     R1,#0xb
   \                     ??ZCMD_ReplyCMD_5:
   \   0001AD   12....       LCALL   `??ZCMD_ProcessCMD::?relay`; Banked call to: ZCMD_ProcessCMD
    160          			return;
   \   0001B0   8009         SJMP    ??ZCMD_ReplyCMD_15
    161          		}
    162          		
    163          	}
    164          	UART_ZCmdPrint(HAL_UART_PORT_0, "ERROR");		
   \                     ??ZCMD_ReplyCMD_0:
   \   0001B2                ; Setup parameters for call to function UART_ZCmdPrint
   \   0001B2   7A..         MOV     R2,#`?<Constant "ERROR">` & 0xff
   \   0001B4   7B..         MOV     R3,#(`?<Constant "ERROR">` >> 8) & 0xff
   \   0001B6   7900         MOV     R1,#0x0
   \   0001B8   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
    165          }
   \                     ??ZCMD_ReplyCMD_15:
   \   0001BB   7480         MOV     A,#-0x80
   \   0001BD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C0   7F02         MOV     R7,#0x2
   \   0001C2   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F9           MOV     R1,A
   \   000001   E8           MOV     A,R0
   \   000002   24FF         ADD     A,#-0x1
   \   000004   F582         MOV     DPL,A
   \   000006   E9           MOV     A,R1
   \   000007   34FF         ADDC    A,#-0x1
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET
    166          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    167          void ZCMD_ProcessCMD(uint8 CMD)
   \                     ZCMD_ProcessCMD:
    168          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    169          	switch (CMD)
   \   000005   E9           MOV     A,R1
   \   000006   6028         JZ      ??ZCMD_ProcessCMD_0
   \   000008   14           DEC     A
   \   000009   6043         JZ      ??ZCMD_ProcessCMD_1
   \   00000B   14           DEC     A
   \   00000C   6025         JZ      ??ZCMD_ProcessCMD_2
   \   00000E   14           DEC     A
   \   00000F   605A         JZ      ??ZCMD_ProcessCMD_3
   \   000011   14           DEC     A
   \   000012   606D         JZ      ??ZCMD_ProcessCMD_4
   \   000014   14           DEC     A
   \   000015   6071         JZ      ??ZCMD_ProcessCMD_5
   \   000017   14           DEC     A
   \   000018   6073         JZ      ??ZCMD_ProcessCMD_6
   \   00001A   14           DEC     A
   \   00001B   6075         JZ      ??ZCMD_ProcessCMD_7
   \   00001D   14           DEC     A
   \   00001E   607A         JZ      ??ZCMD_ProcessCMD_8
   \   000020   24FE         ADD     A,#-0x2
   \   000022   7003         JNZ     $+5
   \   000024   02....       LJMP    ??ZCMD_ProcessCMD_9 & 0xFFFF
   \   000027   14           DEC     A
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??ZCMD_ProcessCMD_10 & 0xFFFF
   \   00002D   02....       LJMP    ??ZCMD_ProcessCMD_11 & 0xFFFF
    170          	{
    171          		case CMD_CHECK_ALIVE:
    172          			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");
   \                     ??ZCMD_ProcessCMD_0:
   \   000030                ; Setup parameters for call to function UART_ZCmdPrint
   \   000030   02....       LJMP    ??ZCMD_ProcessCMD_12 & 0xFFFF
    173          			break;
    174          			
    175          		case CMD_BINDING_STOP:
    176          			if (FLAG_BINDING)
   \                     ??ZCMD_ProcessCMD_2:
   \   000033   90....       MOV     DPTR,#FLAG_BINDING
   \   000036   E0           MOVX    A,@DPTR
   \   000037   600E         JZ      ??ZCMD_ProcessCMD_13
    177          			{
    178          				#if 	(defined COORDINATOR) || (defined ROUTER)
    179          					zclSampleThermostat_BindingProcess();
   \   000039                ; Setup parameters for call to function zclSampleThermostat_BindingProcess
   \   000039   12....       LCALL   `??zclSampleThermostat_BindingProcess::?relay`; Banked call to: zclSampleThermostat_BindingProcess
    180          				#elif (defined END_DEVICE_SENSOR)
    181          					zclSampleTemperatureSensor_BindingProcess();
    182          				#elif (defined END_DEVICE_ENGINE)
    183          					zclSampleHeatingCoolingUnit_BindingProcess();
    184          				#endif
    185          				FLAG_HARD_BINDING = FALSE;
   \   00003C   90....       MOV     DPTR,#FLAG_HARD_BINDING
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
    186          				UART_ZCmdPrint(HAL_UART_PORT_0, "BINDING STOPPED");
   \   000041                ; Setup parameters for call to function UART_ZCmdPrint
   \   000041   7A..         MOV     R2,#`?<Constant "BINDING STOPPED">` & 0xff
   \   000043   7B..         MOV     R3,#(`?<Constant "BINDING STOPPED">` >> 8) & 0xff
   \   000045   805C         SJMP    ??ZCMD_ProcessCMD_14
    187          			}
    188          			else
    189          			{
    190          				UART_ZCmdPrint(HAL_UART_PORT_0, "BINDING STOP ALREADY");
   \                     ??ZCMD_ProcessCMD_13:
   \   000047                ; Setup parameters for call to function UART_ZCmdPrint
   \   000047   7A..         MOV     R2,#`?<Constant "BINDING STOP ALREADY">` & 0xff
   \   000049   7B..         MOV     R3,#(`?<Constant "BINDING STOP ALREADY">` >> 8) & 0xff
   \   00004B   02....       LJMP    ??ZCMD_ProcessCMD_15 & 0xFFFF
    191          			}
    192          			break;
    193          
    194          		case CMD_BINDING_START:
    195          			if (!FLAG_BINDING)
   \                     ??ZCMD_ProcessCMD_1:
   \   00004E   90....       MOV     DPTR,#FLAG_BINDING
   \   000051   E0           MOVX    A,@DPTR
   \   000052   7010         JNZ     ??ZCMD_ProcessCMD_16
    196          			{
    197          				#if 	(defined COORDINATOR) || (defined ROUTER)
    198          					zclSampleThermostat_BindingProcess();
   \   000054                ; Setup parameters for call to function zclSampleThermostat_BindingProcess
   \   000054   12....       LCALL   `??zclSampleThermostat_BindingProcess::?relay`; Banked call to: zclSampleThermostat_BindingProcess
    199          				#elif (defined END_DEVICE_SENSOR)
    200          					zclSampleTemperatureSensor_BindingProcess();
    201          				#elif (defined END_DEVICE_ENGINE)
    202          					zclSampleHeatingCoolingUnit_BindingProcess();
    203          				#endif
    204          				FLAG_HARD_BINDING = TRUE;
   \   000057   90....       MOV     DPTR,#FLAG_HARD_BINDING
   \   00005A   7401         MOV     A,#0x1
   \   00005C   F0           MOVX    @DPTR,A
    205          				UART_ZCmdPrint(HAL_UART_PORT_0, "BINDING STARTED");
   \   00005D                ; Setup parameters for call to function UART_ZCmdPrint
   \   00005D   7A..         MOV     R2,#`?<Constant "BINDING STARTED">` & 0xff
   \   00005F   7B..         MOV     R3,#(`?<Constant "BINDING STARTED">` >> 8) & 0xff
   \   000061   02....       LJMP    ??ZCMD_ProcessCMD_15 & 0xFFFF
    206          			}
    207          			else
    208          			{					
    209          				UART_ZCmdPrint(HAL_UART_PORT_0, "BINDING START ALREADY");
   \                     ??ZCMD_ProcessCMD_16:
   \   000064                ; Setup parameters for call to function UART_ZCmdPrint
   \   000064   7A..         MOV     R2,#`?<Constant "BINDING START ALREADY">` & 0xff
   \   000066   7B..         MOV     R3,#(`?<Constant "BINDING START ALREADY">` >> 8) & 0xff
   \   000068   02....       LJMP    ??ZCMD_ProcessCMD_15 & 0xFFFF
    210          			}
    211          			
    212          			break;
    213          
    214          		case CMD_RETURN_SHORT_ADDRESS:
    215          			UART_ZCmdPrintNum(HAL_UART_PORT_0, NLME_GetShortAddr());
   \                     ??ZCMD_ProcessCMD_3:
   \   00006B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00006E                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   00006E   E4           CLR     A
   \   00006F   FC           MOV     R4,A
   \   000070   FD           MOV     R5,A
   \   000071   F9           MOV     R1,A
   \   000072   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    216          			UART_ZCmdPrintString(HAL_UART_PORT_0, "\r\n");
   \   000075                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000075   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   000077   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000079   7900         MOV     R1,#0x0
   \   00007B   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    217          			break;
   \   00007E   02....       LJMP    ??ZCMD_ProcessCMD_11 & 0xFFFF
    218          
    219          		case CMD_RETURN_COORD_SHORT_ADDRESS:
    220          			#ifndef COORDINATOR
    221          				UART_ZCmdPrintNum(HAL_UART_PORT_0, NLME_GetCoordShortAddr());
    222          				UART_ZCmdPrintString(HAL_UART_PORT_0, "\r\n");
    223          			#else
    224          				UART_ZCmdPrint(HAL_UART_PORT_0, "COORDINATOR!");
   \                     ??ZCMD_ProcessCMD_4:
   \   000081                ; Setup parameters for call to function UART_ZCmdPrint
   \   000081   7A..         MOV     R2,#`?<Constant "COORDINATOR!">` & 0xff
   \   000083   7B..         MOV     R3,#(`?<Constant "COORDINATOR!">` >> 8) & 0xff
   \   000085   02....       LJMP    ??ZCMD_ProcessCMD_15 & 0xFFFF
    225          			#endif		
    226          
    227          			break;
    228          			
    229          		case CMD_ENABLE_ECHO_SDATA:
    230          			FLAG_ECHO_SDATA = TRUE;
   \                     ??ZCMD_ProcessCMD_5:
   \   000088   90....       MOV     DPTR,#FLAG_ECHO_SDATA
   \   00008B   8008         SJMP    ??ZCMD_ProcessCMD_17
    231          			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");			
    232          			break;
    233          
    234          		case CMD_DISABLE_ECHO_SDATA:
    235          			FLAG_ECHO_SDATA = FALSE;
   \                     ??ZCMD_ProcessCMD_6:
   \   00008D   90....       MOV     DPTR,#FLAG_ECHO_SDATA
   \   000090   800B         SJMP    ??ZCMD_ProcessCMD_18
    236          			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");		
    237          			break;
    238          
    239          		case CMD_ENABLE_ECHO_RDATA:
    240          			FLAG_ECHO_RDATA = TRUE;
   \                     ??ZCMD_ProcessCMD_7:
   \   000092   90....       MOV     DPTR,#FLAG_ECHO_RDATA
   \                     ??ZCMD_ProcessCMD_17:
   \   000095   7401         MOV     A,#0x1
   \   000097   F0           MOVX    @DPTR,A
    241          			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");
   \   000098                ; Setup parameters for call to function UART_ZCmdPrint
   \   000098   804E         SJMP    ??ZCMD_ProcessCMD_12
    242          			break;
    243          
    244          		case CMD_DISABLE_ECHO_RDATA:
    245          			FLAG_ECHO_RDATA = FALSE;
   \                     ??ZCMD_ProcessCMD_8:
   \   00009A   90....       MOV     DPTR,#FLAG_ECHO_RDATA
   \                     ??ZCMD_ProcessCMD_18:
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
    246          			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");
   \   00009F                ; Setup parameters for call to function UART_ZCmdPrint
   \   00009F   7A..         MOV     R2,#`?<Constant "OK">` & 0xff
   \   0000A1   7B..         MOV     R3,#(`?<Constant "OK">` >> 8) & 0xff
   \                     ??ZCMD_ProcessCMD_14:
   \   0000A3   F9           MOV     R1,A
   \   0000A4   02....       LJMP    ??ZCMD_ProcessCMD_19 & 0xFFFF
    247          			break;
    248          
    249          		case CMD_SEND_FREE_DATA:
    250          			{
    251          				#ifdef COORDINATOR
    252          				uint8 i = 0;
    253          				uint8 parseStr_len = osal_strlen("@ZB+DATA=");
   \                     ??ZCMD_ProcessCMD_9:
   \   0000A7                ; Setup parameters for call to function osal_strlen
   \   0000A7   7A..         MOV     R2,#`?<Constant "@ZB+DATA=">` & 0xff
   \   0000A9   7B..         MOV     R3,#(`?<Constant "@ZB+DATA=">` >> 8) & 0xff
   \   0000AB   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000AE   EA           MOV     A,R2
   \   0000AF   F5..         MOV     ?V2,A
    254          				Free_Data_Size = packageLength - (parseStr_len + 1); 			// +  "!" ->  + 1
   \   0000B1   90....       MOV     DPTR,#packageLength
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   C3           CLR     C
   \   0000B6   95..         SUBB    A,?V2
   \   0000B8   12....       LCALL   ?Subroutine2 & 0xFFFF
    255          				Free_Data[0] = '0'; 																			// DUMMY Byte
    256          
    257          				if ( Free_Data_Size <= FREE_DATA_BFR_SIZE )
   \                     ??CrossCallReturnLabel_4:
   \   0000BB   5070         JNC     ??ZCMD_ProcessCMD_20
    258          				{	
    259          					
    260          					for (i = 1; i <= FREE_DATA_BFR_SIZE; i++)
   \   0000BD   75..01       MOV     ?V1,#0x1
    261          					{
    262          						if (i <= Free_Data_Size)
   \                     ??ZCMD_ProcessCMD_21:
   \   0000C0   A8..         MOV     R0,?V1
   \   0000C2   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000C5   95..         SUBB    A,?V1
   \   0000C7   400C         JC      ??ZCMD_ProcessCMD_22
    263          						{
    264          							Free_Data[i] = *(pcmdData + parseStr_len + i - 1);
   \   0000C9   AA..         MOV     R2,?V2
   \   0000CB   90....       MOV     DPTR,#pcmdData
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   2A           ADD     A,R2
   \   0000D0   12....       LCALL   ?Subroutine0 & 0xFFFF
    265          						}
   \                     ??CrossCallReturnLabel_0:
   \   0000D3   8006         SJMP    ??ZCMD_ProcessCMD_23
    266          						else
    267          						{
    268          							Free_Data[i] = ' ';
   \                     ??ZCMD_ProcessCMD_22:
   \   0000D5   8C82         MOV     DPL,R4
   \   0000D7   8D83         MOV     DPH,R5
   \   0000D9   7420         MOV     A,#0x20
   \                     ??ZCMD_ProcessCMD_23:
   \   0000DB   F0           MOVX    @DPTR,A
    269          						}
    270          					}
   \   0000DC   05..         INC     ?V1
   \   0000DE   E5..         MOV     A,?V1
   \   0000E0   C3           CLR     C
   \   0000E1   9415         SUBB    A,#0x15
   \   0000E3   40DB         JC      ??ZCMD_ProcessCMD_21
    271          					zclSampleThermostat_SendFreeData();
   \   0000E5                ; Setup parameters for call to function zclSampleThermostat_SendFreeData
   \   0000E5   12....       LCALL   `??zclSampleThermostat_SendFreeData::?relay`; Banked call to: zclSampleThermostat_SendFreeData
    272          					
    273          					UART_ZCmdPrint(HAL_UART_PORT_0, "OK");
   \   0000E8                ; Setup parameters for call to function UART_ZCmdPrint
   \                     ??ZCMD_ProcessCMD_12:
   \   0000E8   7A..         MOV     R2,#`?<Constant "OK">` & 0xff
   \   0000EA   7B..         MOV     R3,#(`?<Constant "OK">` >> 8) & 0xff
   \   0000EC   8043         SJMP    ??ZCMD_ProcessCMD_15
    274          				}
    275          				else
    276          				{
    277          					UART_ZCmdPrint(HAL_UART_PORT_0, "ERROR");
    278          				}
    279          				#else
    280          					UART_ZCmdPrint(HAL_UART_PORT_0, "NOT SUPPORT");
    281          				#endif
    282          			}
    283          			break;
    284          		case CMD_SEND_CONTROL:
    285          			{
    286          				#ifdef COORDINATOR
    287          				uint8 i = 0;
    288          				uint8 parseStr_len = osal_strlen("@ZB+CONTROL=");
   \                     ??ZCMD_ProcessCMD_10:
   \   0000EE                ; Setup parameters for call to function osal_strlen
   \   0000EE   7A..         MOV     R2,#`?<Constant "@ZB+CONTROL=">` & 0xff
   \   0000F0   7B..         MOV     R3,#(`?<Constant "@ZB+CONTROL=">` >> 8) & 0xff
   \   0000F2   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000F5   EA           MOV     A,R2
   \   0000F6   FF           MOV     R7,A
    289          				Free_Data_Size = packageLength - (parseStr_len + 1); 			// +  "!" ->  + 1
   \   0000F7   90....       MOV     DPTR,#packageLength
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   C3           CLR     C
   \   0000FC   9F           SUBB    A,R7
   \   0000FD   12....       LCALL   ?Subroutine2 & 0xFFFF
    290          				Free_Data[0] = '0'; 																			// DUMMY Byte
    291          
    292          				if ( Free_Data_Size <= FREE_DATA_BFR_SIZE )
   \                     ??CrossCallReturnLabel_5:
   \   000100   502B         JNC     ??ZCMD_ProcessCMD_20
    293          				{	
    294          					
    295          					for (i = 1; i <= FREE_DATA_BFR_SIZE; i++)
   \   000102   7E01         MOV     R6,#0x1
    296          					{
    297          						if (i <= Free_Data_Size)
   \                     ??ZCMD_ProcessCMD_24:
   \   000104   EE           MOV     A,R6
   \   000105   F8           MOV     R0,A
   \   000106   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000109   9E           SUBB    A,R6
   \   00010A   400A         JC      ??ZCMD_ProcessCMD_25
    298          						{
    299          							Free_Data[i] = *(pcmdData + parseStr_len + i - 1);
   \   00010C   90....       MOV     DPTR,#pcmdData
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   2F           ADD     A,R7
   \   000111   12....       LCALL   ?Subroutine0 & 0xFFFF
    300          						}
   \                     ??CrossCallReturnLabel_1:
   \   000114   8006         SJMP    ??ZCMD_ProcessCMD_26
    301          						else
    302          						{
    303          							Free_Data[i] = ' ';
   \                     ??ZCMD_ProcessCMD_25:
   \   000116   8C82         MOV     DPL,R4
   \   000118   8D83         MOV     DPH,R5
   \   00011A   7420         MOV     A,#0x20
   \                     ??ZCMD_ProcessCMD_26:
   \   00011C   F0           MOVX    @DPTR,A
    304          						}
    305          					}
   \   00011D   0E           INC     R6
   \   00011E   EE           MOV     A,R6
   \   00011F   C3           CLR     C
   \   000120   9415         SUBB    A,#0x15
   \   000122   40E0         JC      ??ZCMD_ProcessCMD_24
    306          					zclSampleThermostat_SendControlData();
   \   000124                ; Setup parameters for call to function zclSampleThermostat_SendControlData
   \   000124   12....       LCALL   `??zclSampleThermostat_SendControlData::?relay`; Banked call to: zclSampleThermostat_SendControlData
    307          					
    308          					UART_ZCmdPrint(HAL_UART_PORT_0, "DONE");
   \   000127                ; Setup parameters for call to function UART_ZCmdPrint
   \   000127   7A..         MOV     R2,#`?<Constant "DONE">` & 0xff
   \   000129   7B..         MOV     R3,#(`?<Constant "DONE">` >> 8) & 0xff
   \   00012B   8004         SJMP    ??ZCMD_ProcessCMD_15
    309          				}
    310          				else
    311          				{
    312          					UART_ZCmdPrint(HAL_UART_PORT_0, "ERROR");
   \                     ??ZCMD_ProcessCMD_20:
   \   00012D                ; Setup parameters for call to function UART_ZCmdPrint
   \   00012D   7A..         MOV     R2,#`?<Constant "ERROR">` & 0xff
   \   00012F   7B..         MOV     R3,#(`?<Constant "ERROR">` >> 8) & 0xff
   \                     ??ZCMD_ProcessCMD_15:
   \   000131   7900         MOV     R1,#0x0
   \                     ??ZCMD_ProcessCMD_19:
   \   000133   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
    313          				}
    314          				#else
    315          					UART_ZCmdPrint(HAL_UART_PORT_0, "ONLY ZBC");
    316          				#endif
    317          			}
    318          			break;		
    319          
    320          		default:
    321          			break;
    322          	}
    323          }
   \                     ??ZCMD_ProcessCMD_11:
   \   000136   7F06         MOV     R7,#0x6
   \   000138   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   14           DEC     A
   \   000001   90....       MOV     DPTR,#Free_Data_Size
   \   000004   F0           MOVX    @DPTR,A
   \   000005   90....       MOV     DPTR,#Free_Data
   \   000008   7430         MOV     A,#0x30
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   90....       MOV     DPTR,#Free_Data_Size
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   C3           CLR     C
   \   000010   9415         SUBB    A,#0x15
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   74..         MOV     A,#Free_Data & 0xff
   \   000002   28           ADD     A,R0
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   34..         ADDC    A,#(Free_Data >> 8) & 0xff
   \   000007   FB           MOV     R3,A
   \   000008   EA           MOV     A,R2
   \   000009   FC           MOV     R4,A
   \   00000A   EB           MOV     A,R3
   \   00000B   FD           MOV     R5,A
   \   00000C   90....       MOV     DPTR,#Free_Data_Size
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   C3           CLR     C
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   EA           MOV     A,R2
   \   000007   28           ADD     A,R0
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   22           RET
    324          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    325          char* ZCMD_MatchCMD(char* buf, char* str)
   \                     ZCMD_MatchCMD:
    326          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    327          	pcmdData = strstr(buf, str);
   \   000004                ; Setup parameters for call to function strstr
   \   000004   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000007   90....       MOV     DPTR,#pcmdData
   \   00000A   EA           MOV     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   EB           MOV     A,R3
   \   00000E   F0           MOVX    @DPTR,A
    328          	return pcmdData;
   \   00000F   D083         POP     DPH
   \   000011   D082         POP     DPL
   \   000013   02....       LJMP    ?BRET
    329          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZCMD_ReplyCMD::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZCMD_ReplyCMD

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZCMD_ProcessCMD::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZCMD_ProcessCMD

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZCMD_MatchCMD::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZCMD_MatchCMD

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " ">`:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB!">`:
   \   000000   405A4221     DB "@ZB!"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+BIND=0!">`:
   \   000000   405A422B     DB "@ZB+BIND=0!"
   \            42494E44
   \            3D302100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+BIND=1!">`:
   \   000000   405A422B     DB "@ZB+BIND=1!"
   \            42494E44
   \            3D312100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+SHORTADDR!">`:
   \   000000   405A422B     DB "@ZB+SHORTADDR!"
   \            53484F52
   \            54414444
   \            522100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+COORDSHORTADDR!">`:
   \   000000   405A422B     DB "@ZB+COORDSHORTADDR!"
   \            434F4F52
   \            4453484F
   \            52544144
   \            44522100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+ECHOSDATA=0!">`:
   \   000000   405A422B     DB "@ZB+ECHOSDATA=0!"
   \            4543484F
   \            53444154
   \            413D3021
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+ECHOSDATA=1!">`:
   \   000000   405A422B     DB "@ZB+ECHOSDATA=1!"
   \            4543484F
   \            53444154
   \            413D3121
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+ECHORDATA=0!">`:
   \   000000   405A422B     DB "@ZB+ECHORDATA=0!"
   \            4543484F
   \            52444154
   \            413D3021
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+ECHORDATA=1!">`:
   \   000000   405A422B     DB "@ZB+ECHORDATA=1!"
   \            4543484F
   \            52444154
   \            413D3121
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+DATA=">`:
   \   000000   405A422B     DB "@ZB+DATA="
   \            44415441
   \            3D00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZB+CONTROL=">`:
   \   000000   405A422B     DB "@ZB+CONTROL="
   \            434F4E54
   \            524F4C3D
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR">`:
   \   000000   4552524F     DB "ERROR"
   \            5200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK">`:
   \   000000   4F4B00       DB "OK"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BINDING STOPPED">`:
   \   000000   42494E44     DB "BINDING STOPPED"
   \            494E4720
   \            53544F50
   \            50454400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BINDING STOP ALREADY">`:
   \   000000   42494E44     DB "BINDING STOP ALREADY"
   \            494E4720
   \            53544F50
   \            20414C52
   \            45414459
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BINDING STARTED">`:
   \   000000   42494E44     DB "BINDING STARTED"
   \            494E4720
   \            53544152
   \            54454400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BINDING START ALREADY">`:
   \   000000   42494E44     DB "BINDING START ALREADY"
   \            494E4720
   \            53544152
   \            5420414C
   \            52454144
   \            5900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "COORDINATOR!">`:
   \   000000   434F4F52     DB "COORDINATOR!"
   \            44494E41
   \            544F5221
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DONE">`:
   \   000000   444F4E45     DB "DONE"
   \            00      
    330          
    331          uint8 ZCMD_FindChrStr(char* buf, uint8 chr)
    332          {
    333          	uint8 i, num;
    334          
    335          	num = 0;
    336          	for (i = 0; i < packageLength; i++)
    337          	{
    338          		if (buf[i] == chr)
    339          		{
    340          			num++;
    341          		}
    342          	}
    343          
    344          	if (num == 1)
    345          	{
    346          		return 1;
    347          	}
    348          
    349          	return 0;
    350          }
    351          
    352          /*******************************************************************************
    353          ********************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2    138   ZCMD_MatchCMD
        2      0   -> strstr
      1    152   ZCMD_ProcessCMD
        0     14   -> NLME_GetShortAddr
        0     14   -> UART_ZCmdPrint
        0     14   -> UART_ZCmdPrintNum
        0     14   -> UART_ZCmdPrintString
        0     14   -> osal_strlen
        0     14   -> zclSampleThermostat_BindingProcess
        0     14   -> zclSampleThermostat_SendControlData
        0     14   -> zclSampleThermostat_SendFreeData
      0    138   ZCMD_ReplyCMD
        0    138   -> UART_DebugPrint
        0    138   -> UART_DebugPrintNum
        0    138   -> UART_GetData
        0    138   -> UART_ParseLength
        0    138   -> UART_ZCmdPrint
        0    138   -> ZCMD_MatchCMD
        0    138   -> ZCMD_ProcessCMD


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant " ">
       5  ?<Constant "@ZB!">
      12  ?<Constant "@ZB+BIND=0!">
      12  ?<Constant "@ZB+BIND=1!">
      13  ?<Constant "@ZB+CONTROL=">
      20  ?<Constant "@ZB+COORDSHORTADDR!">
      10  ?<Constant "@ZB+DATA=">
      17  ?<Constant "@ZB+ECHORDATA=0!">
      17  ?<Constant "@ZB+ECHORDATA=1!">
      17  ?<Constant "@ZB+ECHOSDATA=0!">
      17  ?<Constant "@ZB+ECHOSDATA=1!">
      15  ?<Constant "@ZB+SHORTADDR!">
      22  ?<Constant "BINDING START ALREADY">
      16  ?<Constant "BINDING STARTED">
      21  ?<Constant "BINDING STOP ALREADY">
      16  ?<Constant "BINDING STOPPED">
      13  ?<Constant "COORDINATOR!">
       5  ?<Constant "DONE">
       6  ?<Constant "ERROR">
       3  ?<Constant "OK">
       3  ?<Constant "\r\n">
      19  ?Subroutine0
      18  ?Subroutine1
      19  ?Subroutine2
      13  ?Subroutine3
       1  FLAG_ECHO_RDATA
       1  FLAG_ECHO_SDATA
      21  Free_Data
       1  Free_Data_Size
      22  ZCMD_MatchCMD
       6  ZCMD_MatchCMD::?relay
     315  ZCMD_ProcessCMD
       6  ZCMD_ProcessCMD::?relay
     453  ZCMD_ReplyCMD
       6  ZCMD_ReplyCMD::?relay
       2  packageLength
       2  pcmdData

 
 859 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
 262 bytes in segment XDATA_ROM_C
  28 bytes in segment XDATA_Z
 
  18 bytes of CODE     memory
 262 bytes of CONST    memory
 859 bytes of HUGECODE memory
  28 bytes of XDATA    memory

Errors: none
Warnings: none
