###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                14/Mar/2017  17:15:58
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c
#    Command line       =  
#        -f
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFAFA
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c
#        -D COORDINATOR -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
#        -D xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
#        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D
#        ZCL_HVAC_CLUSTER -D xHAL_UART=TRUE -D xHAL_UART_DMA=1 -lC
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\HomeAutomation\MY-SOURCE\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List\zcl_samplethermostat.lst
#    Object file        =  
#        D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj\zcl_samplethermostat.r51
#
###############################################################################

D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplethermostat.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2013 - 2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This device will act as a thermostat.
     42          
     43            SCREEN MODES
     44            ----------------------------------------
     45            Main:
     46              - SW1: Set heating setpoint
     47              - SW2: Invoke EZMode
     48              - SW3: Set cooling setpoint
     49              - SW4: Enable/Disable Permit Join
     50              - SW5: Go to Help screen
     51          
     52            Heating Setpoint or Cooling Setpoint:
     53              - SW1: Increase temperature
     54              - SW3: Decrease temperature
     55              - SW5: Save temperature
     56            ----------------------------------------
     57          *********************************************************************/
     58          
     59          /*********************************************************************
     60           * INCLUDES
     61           */
     62          #include "ZComDef.h"
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "MT_APP.h"
     68          #include "MT_SYS.h"
     69          
     70          #include "zcl.h"
     71          #include "zcl_general.h"
     72          #include "zcl_ha.h"
     73          #include "zcl_ezmode.h"
     74          #include "zcl_hvac.h"
     75          #include "zcl_ms.h"
     76          
     77          #include "zcl_samplethermostat.h"
     78          
     79          #include "onboard.h"
     80          
     81          /* HAL */
     82          #include "hal_lcd.h"
     83          #include "hal_led.h"
     84          #include "hal_key.h"
     85          
     86          /* MY INCLUDES */
     87          #include "MS_UART.h"
     88          #include "MS_UART_CMD.h"
     89          #include "MS_GPIO.h"
     90          #include "uti.h"
     91          
     92          #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \
     93                || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
     94          #include "zgp_translationtable.h"
     95            #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
     96              #define ZGP_AUTO_TT
     97            #endif
     98          #endif
     99          
    100          
    101          /*********************************************************************
    102           * MACROS
    103           */
    104          
    105          /*********************************************************************
    106           * CONSTANTS
    107           */
    108          
    109          /*********************************************************************
    110           * TYPEDEFS
    111           */
    112          
    113          /*********************************************************************
    114           * GLOBAL VARIABLES
    115           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          byte zclSampleThermostat_TaskID;
   \                     zclSampleThermostat_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint8 zclSampleThermostatSeqNum;
   \                     zclSampleThermostatSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          static byte gPermitDuration = 0x00;
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    120          
    121          /*********************************************************************
    122           * GLOBAL FUNCTIONS
    123           */
    124          
    125          /*********************************************************************
    126           * LOCAL VARIABLES
    127           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          afAddrType_t zclSampleThermostat_DstAddr;
   \                     zclSampleThermostat_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    129          
    130          #ifdef ZCL_EZMODE
    131          static void zclSampleThermostat_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    132          static void zclSampleThermostat_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    133          

   \                                 In  segment XDATA_ROM_C, align 1
    134          static const zclEZMode_RegisterData_t zclSampleThermostat_RegisterEZModeData =
   \                     zclSampleThermostat_RegisterEZModeData:
   \   000000   ....         DW zclSampleThermostat_TaskID
   \   000002   0800         DW 8
   \   000004   0400         DW 4
   \   000006   ....         DW zclSampleThermostatSeqNum
   \   000008   ....         DW `??zclSampleThermostat_EZModeCB::?relay`
    135          {
    136            &zclSampleThermostat_TaskID,
    137            SAMPLETHERMOSTAT_EZMODE_NEXTSTATE_EVT,
    138            SAMPLETHERMOSTAT_EZMODE_TIMEOUT_EVT,
    139            &zclSampleThermostatSeqNum,
    140            zclSampleThermostat_EZModeCB
    141          };
    142          
    143          // NOT ZCL_EZMODE, Use EndDeviceBind
    144          #else
    145          
    146          static cId_t bindingOutClusters[] =
    147          {
    148            ZCL_CLUSTER_ID_HVAC_THERMOSTAT
    149          };
    150          #define ZCLSAMPLETHERMOSTAT_BINDINGLIST_OUT     1
    151          
    152          static cId_t bindingInClusters[] =
    153          {
    154            ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
    155            ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT
    156          };
    157          #define ZCLSAMPLETHERMOSTAT_BINDINGLIST_IN      2
    158          #endif
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 giThermostatScreenMode = THERMOSTAT_MAINMODE;   // display the main screen mode first
   \                     giThermostatScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          devStates_t zclSampleThermostat_NwkState = DEV_INIT;
   \                     zclSampleThermostat_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleThermostat_NwkState`
   \   000001                REQUIRE __INIT_XDATA_I
    163          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    164          static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
   \                     aProcessCmd:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for aProcessCmd>`
   \   000004                REQUIRE __INIT_XDATA_I
    165          
    166          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          static endPointDesc_t sampleThermostat_TestEp =
   \                     sampleThermostat_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleThermostat_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    168          {
    169            20,                                 // Test endpoint
    170            &zclSampleThermostat_TaskID,
    171            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    172            (afNetworkLatencyReq_t)0            // No Network Latency req
    173          };
    174          
    175          /*********************************************************************
    176           * LOCAL FUNCTIONS
    177           */
    178          #ifndef COORDINATOR
    179          static void zclSampleThermostat_RollCall(void);
    180          #endif
    181          
    182          static void zclSampleThermostat_HandleKeys( byte shift, byte keys );
    183          static void zclSampleThermostat_BasicResetCB( void );
    184          static void zclSampleThermostat_IdentifyCB( zclIdentify_t *pCmd );
    185          static void zclSampleThermostat_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    186          static void zclSampleThermostat_ProcessIdentifyTimeChange( void );
    187          static void zclSampleThermostat_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg );
    188          static void zclSampleThermostat_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
    189                                                                zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd );
    190          
    191          // app display functions
    192          void zclSampleThermostat_LcdDisplayUpdate(void);
    193          void zclSampleThermostat_LcdDisplayMainMode(void);
    194          void zclSampleThermostat_LcdDisplayHeatMode(void);
    195          void zclSampleThermostat_LcdDisplayCoolMode(void);
    196          void zclSampleThermostat_LcdDisplayHelpMode(void);
    197          
    198          // Functions to process ZCL Foundation incoming Command/Response messages
    199          static void zclSampleThermostat_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    200          #ifdef ZCL_READ
    201          static uint8 zclSampleThermostat_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    202          #endif
    203          #ifdef ZCL_WRITE
    204          static uint8 zclSampleThermostat_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    205          #endif
    206          #ifdef ZCL_REPORT
    207          static void zclSampleThermostat_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    208          #endif
    209          static uint8 zclSampleThermostat_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    210          
    211          /*********************************************************************
    212           * STATUS STRINGS
    213           */
    214          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    215          const char sClearLine[]     = " ";
   \                     sClearLine:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
    216          const char sDeviceName[]    = "   Thermostat";
   \                     sDeviceName:
   \   000000   20202054     DB "   Thermostat"
   \            6865726D
   \            6F737461
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
    217          const char sSwHeatSet[]     = "SW1: Set Heating";
   \                     sSwHeatSet:
   \   000000   5357313A     DB "SW1: Set Heating"
   \            20536574
   \            20486561
   \            74696E67
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    218          const char sSwEZMode[]      = "SW2: EZ-Mode";
   \                     sSwEZMode:
   \   000000   5357323A     DB "SW2: EZ-Mode"
   \            20455A2D
   \            4D6F6465
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    219          const char sSwCoolSet[]     = "SW3: Set Cooling";
   \                     sSwCoolSet:
   \   000000   5357333A     DB "SW3: Set Cooling"
   \            20536574
   \            20436F6F
   \            6C696E67
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    220          const char sTempLine2[]     = "SW1:+";
   \                     sTempLine2:
   \   000000   5357313A     DB "SW1:+"
   \            2B00    

   \                                 In  segment XDATA_ROM_C, align 1
    221          const char sTempLine3[]     = "SW3:-  SW5:Enter";
   \                     sTempLine3:
   \   000000   5357333A     DB "SW3:-  SW5:Enter"
   \            2D202053
   \            57353A45
   \            6E746572
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    222          const char sSwHelp[]        = "SW5: Help";
   \                     sSwHelp:
   \   000000   5357353A     DB "SW5: Help"
   \            2048656C
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
    223          const char sStoreHeatTemp[] = "HEAT TEMP SAVED";
   \                     sStoreHeatTemp:
   \   000000   48454154     DB "HEAT TEMP SAVED"
   \            2054454D
   \            50205341
   \            56454400

   \                                 In  segment XDATA_ROM_C, align 1
    224          const char sStoreCoolTemp[] = "COOL TEMP SAVED";
   \                     sStoreCoolTemp:
   \   000000   434F4F4C     DB "COOL TEMP SAVED"
   \            2054454D
   \            50205341
   \            56454400
    225          #endif
    226          
    227          /*********************************************************************
    228           * ZCL General Profile Callback table
    229           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    230          static zclGeneral_AppCallbacks_t zclSampleThermostat_CmdCallbacks =
   \                     zclSampleThermostat_CmdCallbacks:
   \   000000                DS 24
   \   000018                REQUIRE `?<Initializer for zclSampleThermostat_CmdCallb`
   \   000018                REQUIRE __INIT_XDATA_I
    231          {
    232            zclSampleThermostat_BasicResetCB,            // Basic Cluster Reset command
    233            zclSampleThermostat_IdentifyCB,              // Identify command
    234          #ifdef ZCL_EZMODE
    235            NULL,                                        // Identify EZ-Mode Invoke command
    236            NULL,                                        // Identify Update Commission State command
    237          #endif
    238            NULL,                                        // Identify Trigger Effect command
    239            zclSampleThermostat_IdentifyQueryRspCB,      // Identify Query Response command
    240            NULL,             				                   // On/Off cluster command
    241            NULL,                                        // On/Off cluster enhanced command Off with Effect
    242            NULL,                                        // On/Off cluster enhanced command On with Recall Global Scene
    243            NULL,                                        // On/Off cluster enhanced command On with Timed Off
    244          #ifdef ZCL_LEVEL_CTRL
    245            NULL,                                        // Level Control Move to Level command
    246            NULL,                                        // Level Control Move command
    247            NULL,                                        // Level Control Step command
    248            NULL,                                        // Level Control Stop command
    249          #endif
    250          #ifdef ZCL_GROUPS
    251            NULL,                                        // Group Response commands
    252          #endif
    253          #ifdef ZCL_SCENES
    254            NULL,                                        // Scene Store Request command
    255            NULL,                                        // Scene Recall Request command
    256            NULL,                                        // Scene Response command
    257          #endif
    258          #ifdef ZCL_ALARMS
    259            NULL,                                        // Alarm (Response) commands
    260          #endif
    261          #ifdef SE_UK_EXT
    262            NULL,                                        // Get Event Log command
    263            NULL,                                        // Publish Event Log command
    264          #endif
    265            NULL,                                        // RSSI Location command
    266            NULL                                         // RSSI Location Response command
    267          };
    268          
    269          /*********************************************************************
    270           * @fn          zclSampleThermostat_Init
    271           *
    272           * @brief       Initialization function for the zclGeneral layer.
    273           *
    274           * @param       none
    275           *
    276           * @return      none
    277           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    278          void zclSampleThermostat_Init( byte task_id )
   \                     zclSampleThermostat_Init:
    279          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    280            zclSampleThermostat_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    281          
    282            // Set destination address to indirect
    283            zclSampleThermostat_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV     DPTR,#zclSampleThermostat_DstAddr + 8
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    284            zclSampleThermostat_DstAddr.endPoint = 0;
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
    285            zclSampleThermostat_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zclSampleThermostat_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    286          
    287            // This app is part of the Home Automation Profile
    288            zclHA_Init( &zclSampleThermostat_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#zclSampleThermostat_SimpleDesc & 0xff
   \   00001A   7B..         MOV     R3,#(zclSampleThermostat_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    289          
    290            // Register the ZCL General Cluster Library callback functions
    291            zclGeneral_RegisterCmdCallbacks( SAMPLETHERMOSTAT_ENDPOINT, &zclSampleThermostat_CmdCallbacks );
   \   00001F                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001F   7A..         MOV     R2,#zclSampleThermostat_CmdCallbacks & 0xff
   \   000021   7B..         MOV     R3,#(zclSampleThermostat_CmdCallbacks >> 8) & 0xff
   \   000023   7908         MOV     R1,#0x8
   \   000025   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    292          
    293            // Register the application's attribute list
    294            zcl_registerAttrList( SAMPLETHERMOSTAT_ENDPOINT, SAMPLETHERMOSTAT_MAX_ATTRIBUTES, zclSampleThermostat_Attrs );
   \   000028                ; Setup parameters for call to function zcl_registerAttrList
   \   000028   7C..         MOV     R4,#zclSampleThermostat_Attrs & 0xff
   \   00002A   7D..         MOV     R5,#(zclSampleThermostat_Attrs >> 8) & 0xff
   \   00002C   7A16         MOV     R2,#0x16
   \   00002E   7908         MOV     R1,#0x8
   \   000030   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    295          
    296            // Register the Application to receive the unprocessed Foundation command/response messages
    297            zcl_registerForMsg( zclSampleThermostat_TaskID );
   \   000033                ; Setup parameters for call to function zcl_registerForMsg
   \   000033   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    298          
    299          	#ifdef ZCL_EZMODE
    300            // Register EZ-Mode
    301            zcl_RegisterEZMode( &zclSampleThermostat_RegisterEZModeData );
   \   00003B                ; Setup parameters for call to function zcl_RegisterEZMode
   \   00003B   7A..         MOV     R2,#zclSampleThermostat_RegisterEZModeData & 0xff
   \   00003D   7B..         MOV     R3,#(zclSampleThermostat_RegisterEZModeData >> 8) & 0xff
   \   00003F   12....       LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
    302          
    303            // Register with the ZDO to receive Match Descriptor Responses
    304            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
   \   000042                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000042   7A06         MOV     R2,#0x6
   \   000044   7B80         MOV     R3,#-0x80
   \   000046   EE           MOV     A,R6
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    305          	#endif
    306          
    307            // Register for all key events - This app will handle all key events
    308            RegisterForKeys( zclSampleThermostat_TaskID );
   \   00004B                ; Setup parameters for call to function RegisterForKeys
   \   00004B   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    309          
    310            // Register for a test endpoint
    311            afRegister( &sampleThermostat_TestEp );
   \   000053                ; Setup parameters for call to function afRegister
   \   000053   7A..         MOV     R2,#sampleThermostat_TestEp & 0xff
   \   000055   7B..         MOV     R3,#(sampleThermostat_TestEp >> 8) & 0xff
   \   000057   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    312          
    313            ZDO_RegisterForZDOMsg( zclSampleThermostat_TaskID, End_Device_Bind_rsp );
   \   00005A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00005A   7A20         MOV     R2,#0x20
   \   00005C   7B80         MOV     R3,#-0x80
   \   00005E   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    314            ZDO_RegisterForZDOMsg( zclSampleThermostat_TaskID, Match_Desc_rsp );
   \   000066                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000066   7A06         MOV     R2,#0x6
   \   000068   7B80         MOV     R3,#-0x80
   \   00006A   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    315          
    316          	#ifdef LCD_SUPPORTED
    317            // display the device name
    318            HalLcdWriteString( (char *)sDeviceName, HAL_LCD_LINE_3 );
   \   000072                ; Setup parameters for call to function HalLcdWriteString
   \   000072   7903         MOV     R1,#0x3
   \   000074   7A..         MOV     R2,#sDeviceName & 0xff
   \   000076   7B..         MOV     R3,#(sDeviceName >> 8) & 0xff
   \   000078   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    319          	#endif
    320          
    321          	#ifdef ZGP_AUTO_TT
    322            zgpTranslationTable_RegisterEP( &zclSampleThermostat_SimpleDesc );
    323          	#endif
    324          
    325          	UART_Init(HAL_UART_PORT_0);
   \   00007B                ; Setup parameters for call to function UART_Init
   \   00007B   7900         MOV     R1,#0x0
   \   00007D   12....       LCALL   `??UART_Init::?relay`; Banked call to: UART_Init
    326          	// cho nay khai bao gpio
    327          	GPIO_init();
   \   000080                ; Setup parameters for call to function GPIO_init
   \   000080   12....       LCALL   `??GPIO_init::?relay`; Banked call to: GPIO_init
    328          	
    329          	// Set timer for first UART Reply CMD event
    330          	osal_start_timerEx( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_UART_REPLY_CMD_EVT, UART_PARSE_RX_PACKAGE_EVT_PERIOD );
   \   000083                ; Setup parameters for call to function osal_start_timerEx
   \   000083   90....       MOV     DPTR,#__Constant_a
   \   000086   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000089   7A40         MOV     R2,#0x40
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000095   7404         MOV     A,#0x4
   \   000097   12....       LCALL   ?DEALLOC_XSTACK8
    331          
    332          	// Set timer for first Check System event
    333          	osal_start_timerEx( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_CHECK_SYSTEM_EVT, CHECK_SYSTEM_EVT_PERIOD );
   \   00009A                ; Setup parameters for call to function osal_start_timerEx
   \   00009A   90....       MOV     DPTR,#__Constant_2710
   \   00009D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000A0   7A80         MOV     R2,#-0x80
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000AC   7404         MOV     A,#0x4
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    334          
    335          	// Set timer for first Join Setup event
    336          	if (NLME_GetShortAddr() != 0xFFFE)
   \   0000B1                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000B1   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000B4   8A..         MOV     ?V0,R2
   \   0000B6   8B..         MOV     ?V1,R3
   \   0000B8   74FE         MOV     A,#-0x2
   \   0000BA   65..         XRL     A,?V0
   \   0000BC   7004         JNZ     ??zclSampleThermostat_Init_0
   \   0000BE   74FF         MOV     A,#-0x1
   \   0000C0   65..         XRL     A,?V1
   \                     ??zclSampleThermostat_Init_0:
   \   0000C2   600C         JZ      ??zclSampleThermostat_Init_1
    337          	{
    338          		osal_set_event( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_JOIN_SETUP_EVT );
   \   0000C4                ; Setup parameters for call to function osal_set_event
   \   0000C4   7A20         MOV     R2,#0x20
   \   0000C6   7B00         MOV     R3,#0x0
   \   0000C8   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F9           MOV     R1,A
   \   0000CD   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    339          	}
    340          	
    341          }
   \                     ??zclSampleThermostat_Init_1:
   \   0000D0   7F02         MOV     R7,#0x2
   \   0000D2   02....       LJMP    ?BANKED_LEAVE_XDATA
    342          
    343          /*********************************************************************
    344           * @fn          zclSample_event_loop
    345           *
    346           * @brief       Event Loop Processor for zclGeneral.
    347           *
    348           * @param       none
    349           *
    350           * @return      none
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          uint16 zclSampleThermostat_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleThermostat_event_loop:
    353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    354            afIncomingMSGPacket_t *MSGpkt;
    355          
    356            (void)task_id;  // Intentionally unreferenced parameter
    357          
    358          	/*--------------------------------------------------------------------------*/
    359            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7060         JNZ     ??zclSampleThermostat_event_loop_0
    360            {
    361              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleThermostat_TaskID )) )
    362              {
    363              	msg_RSSI = MSGpkt->rssi;
    364          				
    365                switch ( MSGpkt->hdr.event )
    366                {
    367          				#ifdef ZCL_EZMODE
    368                  case ZDO_CB_MSG:
    369                    zclSampleThermostat_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    370          					UART_DebugPrint(HAL_UART_PORT_0, "[EVENT] ZDO_CB_MSG");
    371                    break;
    372          				#endif
    373          
    374                  case MT_SYS_APP_MSG:
    375                    // Message received from MT
    376                    zclSampleThermostat_ProcessAppMsg( ((mtSysAppMsg_t *)MSGpkt)->endpoint,
    377                                                    ((mtSysAppMsg_t *)MSGpkt)->appDataLen,
    378                                                    ((mtSysAppMsg_t *)MSGpkt)->appData );
    379          					UART_DebugPrint(HAL_UART_PORT_0, "[EVENT] MT_SYS_APP_MSG");
    380                    break;
    381          
    382                  case ZCL_INCOMING_MSG:
    383                    // Incoming ZCL Foundation command/response messages
    384                    zclSampleThermostat_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    385          					UART_DebugPrint(HAL_UART_PORT_0, "[EVENT] ZCL_INCOMING_MSG");
    386                    break;
    387          
    388                  case KEY_CHANGE:
    389                    zclSampleThermostat_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    390          					UART_DebugPrint(HAL_UART_PORT_0, "[EVENT] KEY_CHANGE");
    391                    break;
    392          
    393                  case ZDO_STATE_CHANGE:
    394                    zclSampleThermostat_NwkState = (devStates_t)(MSGpkt->hdr.status);
    395          
    396          
    397                    // now on the network
    398                    if ( ( zclSampleThermostat_NwkState == DEV_ZB_COORD ) ||
    399                         ( zclSampleThermostat_NwkState == DEV_ROUTER )   ||
    400                         ( zclSampleThermostat_NwkState == DEV_END_DEVICE ) )
    401                    {
    402          						#ifndef HOLD_AUTO_START
    403                      // display main mode
    404                      giThermostatScreenMode = THERMOSTAT_MAINMODE;
    405                      zclSampleThermostat_LcdDisplayUpdate();
    406          						#endif
    407          						#ifdef ZCL_EZMODE
    408                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    409          						#endif  // ZCL_EZMODE
    410          						
    411          						UART_DebugPrint(HAL_UART_PORT_0, "[EVENT] ZDO_STATE_CHANGE");
    412                    }
    413                    break;
    414          
    415                  default:
    416                    break;
    417                }
    418          
    419                // Release the memory
    420                osal_msg_deallocate( (uint8 *)MSGpkt );
    421              }
    422          
    423              // return unprocessed events
    424              return (events ^ SYS_EVENT_MSG);
    425            }
    426          
    427          	/*--------------------------------------------------------------------------*/
    428            if ( events & SAMPLETHERMOSTAT_IDENTIFY_TIMEOUT_EVT )
   \   000012   EE           MOV     A,R6
   \   000013   A2E0         MOV     C,0xE0 /* A   */.0
   \   000015   4003         JC      $+5
   \   000017   02....       LJMP    ??zclSampleThermostat_event_loop_1 & 0xFFFF
    429            {
    430              if ( zclSampleThermostat_IdentifyTime > 0 )
   \   00001A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00001D   600C         JZ      ??zclSampleThermostat_event_loop_2
    431              {
    432                zclSampleThermostat_IdentifyTime--;
   \   00001F   90....       MOV     DPTR,#zclSampleThermostat_IdentifyTime
   \   000022   E0           MOVX    A,@DPTR
   \   000023   24FF         ADD     A,#-0x1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   34FF         ADDC    A,#-0x1
   \   00002A   F0           MOVX    @DPTR,A
    433              }
    434              zclSampleThermostat_ProcessIdentifyTimeChange();
   \                     ??zclSampleThermostat_event_loop_2:
   \   00002B                ; Setup parameters for call to function zclSampleThermostat_ProcessIdentifyTimeChange
   \   00002B   12....       LCALL   ??zclSampleThermostat_ProcessIdentifyTimeChange; Banked call to: zclSampleThermostat_ProcessIdentifyTimeChange
    435          		
    436          		UART_DebugPrint(HAL_UART_PORT_0, "[EVENT] SAMPLETHERMOSTAT_IDENTIFY_TIMEOUT_EVT");
   \   00002E                ; Setup parameters for call to function UART_DebugPrint
   \   00002E   7A..         MOV     R2,#`?<Constant "[EVENT] SAMPLETHERMOS...">` & 0xff
   \   000030   7B..         MOV     R3,#(`?<Constant "[EVENT] SAMPLETHERMOS...">` >> 8) & 0xff
   \   000032   7900         MOV     R1,#0x0
   \   000034   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    437          
    438              return ( events ^ SAMPLETHERMOSTAT_IDENTIFY_TIMEOUT_EVT );
   \   000037   EE           MOV     A,R6
   \   000038   6401         XRL     A,#0x1
   \   00003A   02....       LJMP    ??zclSampleThermostat_event_loop_3 & 0xFFFF
    439            }
   \                     ??zclSampleThermostat_event_loop_4:
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   90....       MOV     DPTR,#zclSampleThermostat_NwkState
   \   000042   F0           MOVX    @DPTR,A
   \   000043   6409         XRL     A,#0x9
   \   000045   600A         JZ      ??zclSampleThermostat_event_loop_5
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6407         XRL     A,#0x7
   \   00004A   6005         JZ      ??zclSampleThermostat_event_loop_5
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6406         XRL     A,#0x6
   \   00004F   701A         JNZ     ??zclSampleThermostat_event_loop_6
   \                     ??zclSampleThermostat_event_loop_5:
   \   000051   90....       MOV     DPTR,#giThermostatScreenMode
   \   000054   E4           CLR     A
   \   000055   F0           MOVX    @DPTR,A
   \   000056                ; Setup parameters for call to function zclSampleThermostat_LcdDisplayUpdate
   \   000056   12....       LCALL   `??zclSampleThermostat_LcdDisplayUpdate::?relay`; Banked call to: zclSampleThermostat_LcdDisplayUpdate
   \   000059                ; Setup parameters for call to function zcl_EZModeAction
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   7902         MOV     R1,#0x2
   \   00005F   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \   000062                ; Setup parameters for call to function UART_DebugPrint
   \   000062   7A..         MOV     R2,#`?<Constant "[EVENT] ZDO_STATE_CHANGE">` & 0xff
   \   000064   7B..         MOV     R3,#(`?<Constant "[EVENT] ZDO_STATE_CHANGE">` >> 8) & 0xff
   \                     ??zclSampleThermostat_event_loop_7:
   \   000066   7900         MOV     R1,#0x0
   \   000068   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
   \                     ??zclSampleThermostat_event_loop_6:
   \   00006B                ; Setup parameters for call to function osal_msg_deallocate
   \   00006B   AA..         MOV     R2,?V0
   \   00006D   AB..         MOV     R3,?V1
   \   00006F   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleThermostat_event_loop_0:
   \   000072                ; Setup parameters for call to function osal_msg_receive
   \   000072   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00007A   8A..         MOV     ?V0,R2
   \   00007C   8B..         MOV     ?V1,R3
   \   00007E   EA           MOV     A,R2
   \   00007F   45..         ORL     A,?V1
   \   000081   7003         JNZ     $+5
   \   000083   02....       LJMP    ??zclSampleThermostat_event_loop_8 & 0xFFFF
   \   000086   EA           MOV     A,R2
   \   000087   2418         ADD     A,#0x18
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   35..         ADDC    A,?V1
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   90....       MOV     DPTR,#msg_RSSI
   \   000094   F0           MOVX    @DPTR,A
   \   000095   8A82         MOV     DPL,R2
   \   000097   8B83         MOV     DPH,R3
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   24DD         ADD     A,#-0x23
   \   00009C   6044         JZ      ??zclSampleThermostat_event_loop_9
   \   00009E   24EF         ADD     A,#-0x11
   \   0000A0   605A         JZ      ??zclSampleThermostat_event_loop_10
   \   0000A2   2474         ADD     A,#0x74
   \   0000A4   7003         JNZ     $+5
   \   0000A6   02....       LJMP    ??zclSampleThermostat_event_loop_11 & 0xFFFF
   \   0000A9   24EF         ADD     A,#-0x11
   \   0000AB   6090         JZ      ??zclSampleThermostat_event_loop_4
   \   0000AD   24FE         ADD     A,#-0x2
   \   0000AF   70BA         JNZ     ??zclSampleThermostat_event_loop_6
   \   0000B1   EA           MOV     A,R2
   \   0000B2   240C         ADD     A,#0xc
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   E4           CLR     A
   \   0000B7   35..         ADDC    A,?V1
   \   0000B9   F583         MOV     DPH,A
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   6406         XRL     A,#0x6
   \   0000BE   7004         JNZ     ??zclSampleThermostat_event_loop_12
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   6480         XRL     A,#0x80
   \                     ??zclSampleThermostat_event_loop_12:
   \   0000C4   7016         JNZ     ??zclSampleThermostat_event_loop_13
   \   0000C6                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   0000C6   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   0000C9   8A..         MOV     ?V2,R2
   \   0000CB   8B..         MOV     ?V3,R3
   \   0000CD   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000D0   7905         MOV     R1,#0x5
   \   0000D2   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \   0000D5                ; Setup parameters for call to function osal_mem_free
   \   0000D5   AA..         MOV     R2,?V2
   \   0000D7   AB..         MOV     R3,?V3
   \   0000D9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??zclSampleThermostat_event_loop_13:
   \   0000DC                ; Setup parameters for call to function UART_DebugPrint
   \   0000DC   7A..         MOV     R2,#`?<Constant "[EVENT] ZDO_CB_MSG">` & 0xff
   \   0000DE   7B..         MOV     R3,#(`?<Constant "[EVENT] ZDO_CB_MSG">` >> 8) & 0xff
   \   0000E0   8084         SJMP    ??zclSampleThermostat_event_loop_7
   \                     ??zclSampleThermostat_event_loop_9:
   \   0000E2                ; Setup parameters for call to function zclSampleThermostat_ProcessAppMsg
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   FC           MOV     R4,A
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FD           MOV     R5,A
   \   0000EB   8A82         MOV     DPL,R2
   \   0000ED   8B83         MOV     DPH,R3
   \   0000EF   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000F2   12....       LCALL   `??zclSampleThermostat_ProcessAppMsg::?relay`; Banked call to: zclSampleThermostat_ProcessAppMsg
   \   0000F5                ; Setup parameters for call to function UART_DebugPrint
   \   0000F5   7A..         MOV     R2,#`?<Constant "[EVENT] MT_SYS_APP_MSG">` & 0xff
   \   0000F7   7B..         MOV     R3,#(`?<Constant "[EVENT] MT_SYS_APP_MSG">` >> 8) & 0xff
   \   0000F9   02....       LJMP    ??zclSampleThermostat_event_loop_7 & 0xFFFF
   \                     ??zclSampleThermostat_event_loop_10:
   \   0000FC   EA           MOV     A,R2
   \   0000FD   2417         ADD     A,#0x17
   \   0000FF   F5..         MOV     ?V2,A
   \   000101   E4           CLR     A
   \   000102   35..         ADDC    A,?V1
   \   000104   F5..         MOV     ?V3,A
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   14           DEC     A
   \   00010F   601A         JZ      ??zclSampleThermostat_event_loop_14
   \   000111   24FD         ADD     A,#-0x3
   \   000113   6009         JZ      ??zclSampleThermostat_event_loop_15
   \   000115   24FA         ADD     A,#-0x6
   \   000117   701F         JNZ     ??zclSampleThermostat_event_loop_16
   \   000119                ; Setup parameters for call to function zclSampleThermostat_ProcessInReportCmd
   \   000119   12....       LCALL   `??zclSampleThermostat_ProcessInReportCmd::?rela`; Banked call to: zclSampleThermostat_ProcessInReportCmd
   \   00011C   801A         SJMP    ??zclSampleThermostat_event_loop_16
   \                     ??zclSampleThermostat_event_loop_15:
   \   00011E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F9           MOV     R1,A
   \   000123   E8           MOV     A,R0
   \   000124   C3           CLR     C
   \   000125   99           SUBB    A,R1
   \   000126   5010         JNC     ??zclSampleThermostat_event_loop_16
   \   000128   08           INC     R0
   \   000129   80F6         SJMP    ??CrossCallReturnLabel_36
   \                     ??zclSampleThermostat_event_loop_14:
   \   00012B   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00012E   8001         SJMP    ??zclSampleThermostat_event_loop_17
   \                     ??zclSampleThermostat_event_loop_18:
   \   000130   08           INC     R0
   \                     ??zclSampleThermostat_event_loop_17:
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F9           MOV     R1,A
   \   000133   E8           MOV     A,R0
   \   000134   C3           CLR     C
   \   000135   99           SUBB    A,R1
   \   000136   40F8         JC      ??zclSampleThermostat_event_loop_18
   \                     ??zclSampleThermostat_event_loop_16:
   \   000138   85..82       MOV     DPL,?V2
   \   00013B   85..83       MOV     DPH,?V3
   \   00013E   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000141   EA           MOV     A,R2
   \   000142   4B           ORL     A,R3
   \   000143   6003         JZ      ??zclSampleThermostat_event_loop_19
   \   000145                ; Setup parameters for call to function osal_mem_free
   \   000145   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??zclSampleThermostat_event_loop_19:
   \   000148                ; Setup parameters for call to function UART_DebugPrint
   \   000148   7A..         MOV     R2,#`?<Constant "[EVENT] ZCL_INCOMING_MSG">` & 0xff
   \   00014A   7B..         MOV     R3,#(`?<Constant "[EVENT] ZCL_INCOMING_MSG">` >> 8) & 0xff
   \   00014C   02....       LJMP    ??zclSampleThermostat_event_loop_7 & 0xFFFF
   \                     ??zclSampleThermostat_event_loop_11:
   \   00014F                ; Setup parameters for call to function zclSampleThermostat_HandleKeys
   \   00014F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000152   12....       LCALL   `??zclSampleThermostat_HandleKeys::?relay`; Banked call to: zclSampleThermostat_HandleKeys
   \   000155                ; Setup parameters for call to function UART_DebugPrint
   \   000155   7A..         MOV     R2,#`?<Constant "[EVENT] KEY_CHANGE">` & 0xff
   \   000157   7B..         MOV     R3,#(`?<Constant "[EVENT] KEY_CHANGE">` >> 8) & 0xff
   \   000159   02....       LJMP    ??zclSampleThermostat_event_loop_7 & 0xFFFF
   \                     ??zclSampleThermostat_event_loop_8:
   \   00015C   EE           MOV     A,R6
   \   00015D   FA           MOV     R2,A
   \   00015E   EF           MOV     A,R7
   \   00015F   6480         XRL     A,#0x80
   \   000161   02....       LJMP    ??zclSampleThermostat_event_loop_20 & 0xFFFF
    440          
    441          	/*--------------------------------------------------------------------------*/
    442            if ( events & SAMPLETHERMOSTAT_MAIN_SCREEN_EVT )
   \                     ??zclSampleThermostat_event_loop_1:
   \   000164   5410         ANL     A,#0x10
   \   000166   6027         JZ      ??zclSampleThermostat_event_loop_21
    443            {
    444              giThermostatScreenMode = THERMOSTAT_MAINMODE;
   \   000168   90....       MOV     DPTR,#giThermostatScreenMode
   \   00016B   E4           CLR     A
   \   00016C   F0           MOVX    @DPTR,A
    445              zclSampleThermostat_LcdDisplayUpdate();
   \   00016D                ; Setup parameters for call to function zclSampleThermostat_LcdDisplayUpdate
   \   00016D   12....       LCALL   `??zclSampleThermostat_LcdDisplayUpdate::?relay`; Banked call to: zclSampleThermostat_LcdDisplayUpdate
    446          
    447          		if (FLAG_BINDING)
   \   000170   90....       MOV     DPTR,#FLAG_BINDING
   \   000173   E0           MOVX    A,@DPTR
   \   000174   600A         JZ      ??zclSampleThermostat_event_loop_22
    448          		{
    449          			FLAG_BINDING = FALSE;		
   \   000176   E4           CLR     A
   \   000177   F0           MOVX    @DPTR,A
    450          			if (FLAG_HARD_BINDING)
   \   000178   90....       MOV     DPTR,#FLAG_HARD_BINDING
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   6002         JZ      ??zclSampleThermostat_event_loop_22
    451          			{
    452          				FLAG_HARD_BINDING = FALSE;
   \   00017E   E4           CLR     A
   \   00017F   F0           MOVX    @DPTR,A
    453          			}
    454          		}
    455          		UART_DebugPrint(HAL_UART_PORT_0, "[EVENT] SAMPLETHERMOSTAT_MAIN_SCREEN_EVT");
   \                     ??zclSampleThermostat_event_loop_22:
   \   000180                ; Setup parameters for call to function UART_DebugPrint
   \   000180   7A..         MOV     R2,#`?<Constant "[EVENT] SAMPLETHERMOS...">_1` & 0xff
   \   000182   7B..         MOV     R3,#(`?<Constant "[EVENT] SAMPLETHERMOS...">_1` >> 8) & 0xff
   \   000184   7900         MOV     R1,#0x0
   \   000186   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    456          
    457              return ( events ^ SAMPLETHERMOSTAT_MAIN_SCREEN_EVT );
   \   000189   EE           MOV     A,R6
   \   00018A   6410         XRL     A,#0x10
   \   00018C   02....       LJMP    ??zclSampleThermostat_event_loop_3 & 0xFFFF
    458            }
    459          
    460          	/*--------------------------------------------------------------------------*/
    461          	#ifdef ZCL_EZMODE
    462            // going on to next state
    463            if ( events & SAMPLETHERMOSTAT_EZMODE_NEXTSTATE_EVT )
   \                     ??zclSampleThermostat_event_loop_21:
   \   00018F   EE           MOV     A,R6
   \   000190   5408         ANL     A,#0x8
   \   000192   6018         JZ      ??zclSampleThermostat_event_loop_23
    464            {
    465              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
   \   000194                ; Setup parameters for call to function zcl_EZModeAction
   \   000194   7A00         MOV     R2,#0x0
   \   000196   7B00         MOV     R3,#0x0
   \   000198   7901         MOV     R1,#0x1
   \   00019A   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    466          
    467          		UART_DebugPrint(HAL_UART_PORT_0, "[EVENT] SAMPLETHERMOSTAT_EZMODE_NEXTSTATE_EVT");
   \   00019D                ; Setup parameters for call to function UART_DebugPrint
   \   00019D   7A..         MOV     R2,#`?<Constant "[EVENT] SAMPLETHERMOS...">_2` & 0xff
   \   00019F   7B..         MOV     R3,#(`?<Constant "[EVENT] SAMPLETHERMOS...">_2` >> 8) & 0xff
   \   0001A1   7900         MOV     R1,#0x0
   \   0001A3   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    468          		
    469              return ( events ^ SAMPLETHERMOSTAT_EZMODE_NEXTSTATE_EVT );
   \   0001A6   EE           MOV     A,R6
   \   0001A7   6408         XRL     A,#0x8
   \   0001A9   02....       LJMP    ??zclSampleThermostat_event_loop_3 & 0xFFFF
    470            }
    471          
    472          	/*--------------------------------------------------------------------------*/
    473            // the overall EZMode timer expired, so we timed out
    474            if ( events & SAMPLETHERMOSTAT_EZMODE_TIMEOUT_EVT )
   \                     ??zclSampleThermostat_event_loop_23:
   \   0001AC   EE           MOV     A,R6
   \   0001AD   5404         ANL     A,#0x4
   \   0001AF   6018         JZ      ??zclSampleThermostat_event_loop_24
    475            {
    476              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
   \   0001B1                ; Setup parameters for call to function zcl_EZModeAction
   \   0001B1   7A00         MOV     R2,#0x0
   \   0001B3   7B00         MOV     R3,#0x0
   \   0001B5   7963         MOV     R1,#0x63
   \   0001B7   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    477          
    478          		UART_DebugPrint(HAL_UART_PORT_0, "[EVENT] SAMPLETHERMOSTAT_EZMODE_TIMEOUT_EVT");
   \   0001BA                ; Setup parameters for call to function UART_DebugPrint
   \   0001BA   7A..         MOV     R2,#`?<Constant "[EVENT] SAMPLETHERMOS...">_3` & 0xff
   \   0001BC   7B..         MOV     R3,#(`?<Constant "[EVENT] SAMPLETHERMOS...">_3` >> 8) & 0xff
   \   0001BE   7900         MOV     R1,#0x0
   \   0001C0   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    479          		
    480              return ( events ^ SAMPLETHERMOSTAT_EZMODE_TIMEOUT_EVT );
   \   0001C3   EE           MOV     A,R6
   \   0001C4   6404         XRL     A,#0x4
   \   0001C6   02....       LJMP    ??zclSampleThermostat_event_loop_3 & 0xFFFF
    481            }
    482          	#endif // ZLC_EZMODE
    483          
    484          	/*--------------------------------------------------------------------------*/
    485          	if ( events & SAMPLETHERMOSTAT_JOIN_SETUP_EVT )
   \                     ??zclSampleThermostat_event_loop_24:
   \   0001C9   EE           MOV     A,R6
   \   0001CA   5420         ANL     A,#0x20
   \   0001CC   6045         JZ      ??zclSampleThermostat_event_loop_25
    486            {
    487          		if (FLAG_JOIN_CONFIRM == FALSE && FLAG_BINDING == FALSE)
   \   0001CE   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   7022         JNZ     ??zclSampleThermostat_event_loop_26
   \   0001D4   90....       MOV     DPTR,#FLAG_BINDING
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   702B         JNZ     ??zclSampleThermostat_event_loop_27
    488          		{
    489          			zclSampleThermostat_BindingProcess();
   \   0001DA                ; Setup parameters for call to function zclSampleThermostat_BindingProcess
   \   0001DA   12....       LCALL   `??zclSampleThermostat_BindingProcess::?relay`; Banked call to: zclSampleThermostat_BindingProcess
    490          			// Stop binding after 100ms (time for process...)
    491          			osal_start_timerEx( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_JOIN_SETUP_EVT, 5000 );
   \   0001DD                ; Setup parameters for call to function osal_start_timerEx
   \   0001DD   90....       MOV     DPTR,#__Constant_1388
   \   0001E0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001E3   7A20         MOV     R2,#0x20
   \   0001E5   7B00         MOV     R3,#0x0
   \   0001E7   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   F9           MOV     R1,A
   \   0001EC   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001EF   7404         MOV     A,#0x4
   \   0001F1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F4   800F         SJMP    ??zclSampleThermostat_event_loop_27
    492          		}
    493          		else if (FLAG_JOIN_CONFIRM == TRUE && FLAG_BINDING == TRUE)
   \                     ??zclSampleThermostat_event_loop_26:
   \   0001F6   6401         XRL     A,#0x1
   \   0001F8   700B         JNZ     ??zclSampleThermostat_event_loop_27
   \   0001FA   90....       MOV     DPTR,#FLAG_BINDING
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   6401         XRL     A,#0x1
   \   000200   7003         JNZ     ??zclSampleThermostat_event_loop_27
    494          		{
    495          			zclSampleThermostat_BindingProcess();
   \   000202                ; Setup parameters for call to function zclSampleThermostat_BindingProcess
   \   000202   12....       LCALL   `??zclSampleThermostat_BindingProcess::?relay`; Banked call to: zclSampleThermostat_BindingProcess
    496          		}
    497          		
    498          		UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETHERMOSTAT_JOIN_SETUP_EVT");
   \                     ??zclSampleThermostat_event_loop_27:
   \   000205                ; Setup parameters for call to function UART_DebugPrint
   \   000205   7A..         MOV     R2,#`?<Constant "SAMPLETHERMOSTAT_JOIN...">` & 0xff
   \   000207   7B..         MOV     R3,#(`?<Constant "SAMPLETHERMOSTAT_JOIN...">` >> 8) & 0xff
   \   000209   7900         MOV     R1,#0x0
   \   00020B   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    499          
    500              return ( events ^ SAMPLETHERMOSTAT_JOIN_SETUP_EVT );
   \   00020E   EE           MOV     A,R6
   \   00020F   6420         XRL     A,#0x20
   \   000211   806F         SJMP    ??zclSampleThermostat_event_loop_3
    501            }
    502          
    503          	/*--------------------------------------------------------------------------*/
    504          	if ( events & SAMPLETHERMOSTAT_UART_REPLY_CMD_EVT )
   \                     ??zclSampleThermostat_event_loop_25:
   \   000213   EE           MOV     A,R6
   \   000214   5440         ANL     A,#0x40
   \   000216   6027         JZ      ??zclSampleThermostat_event_loop_28
    505            {
    506          		// My apps
    507          		if (UART_ParseRxPackage(HAL_UART_PORT_0))
   \   000218                ; Setup parameters for call to function UART_ParseRxPackage
   \   000218   7900         MOV     R1,#0x0
   \   00021A   12....       LCALL   `??UART_ParseRxPackage::?relay`; Banked call to: UART_ParseRxPackage
   \   00021D   E9           MOV     A,R1
   \   00021E   6003         JZ      ??zclSampleThermostat_event_loop_29
    508          		{
    509          			ZCMD_ReplyCMD();
   \   000220                ; Setup parameters for call to function ZCMD_ReplyCMD
   \   000220   12....       LCALL   `??ZCMD_ReplyCMD::?relay`; Banked call to: ZCMD_ReplyCMD
    510          		}
    511          		
    512          		// Restart timer
    513              if ( UART_PARSE_RX_PACKAGE_EVT_PERIOD )
    514              {
    515                osal_start_timerEx( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_UART_REPLY_CMD_EVT, UART_PARSE_RX_PACKAGE_EVT_PERIOD );
   \                     ??zclSampleThermostat_event_loop_29:
   \   000223                ; Setup parameters for call to function osal_start_timerEx
   \   000223   90....       MOV     DPTR,#__Constant_a
   \   000226   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000229   7A40         MOV     R2,#0x40
   \   00022B   7B00         MOV     R3,#0x0
   \   00022D   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   000230   E0           MOVX    A,@DPTR
   \   000231   F9           MOV     R1,A
   \   000232   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000235   7404         MOV     A,#0x4
   \   000237   12....       LCALL   ?DEALLOC_XSTACK8
    516              }
    517          		
    518              return (events ^ SAMPLETHERMOSTAT_UART_REPLY_CMD_EVT);
   \   00023A   EE           MOV     A,R6
   \   00023B   6440         XRL     A,#0x40
   \   00023D   8043         SJMP    ??zclSampleThermostat_event_loop_3
    519            }
    520          
    521          	/*--------------------------------------------------------------------------*/
    522          	if ( events & SAMPLETHERMOSTAT_CHECK_SYSTEM_EVT )
   \                     ??zclSampleThermostat_event_loop_28:
   \   00023F   EE           MOV     A,R6
   \   000240   5480         ANL     A,#0x80
   \   000242   6043         JZ      ??zclSampleThermostat_event_loop_30
    523            {
    524          		// My apps
    525          		#ifndef COORDINATOR
    526          		zclSampleThermostat_RollCall();
    527          		#endif
    528          		
    529          		if ( (FLAG_JOIN_CONFIRM == FALSE) || (FLAG_JOIN_CONFIRM == TRUE && FLAG_BINDING == TRUE && FLAG_HARD_BINDING == FALSE) )
   \   000244   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   000247   E0           MOVX    A,@DPTR
   \   000248   6012         JZ      ??zclSampleThermostat_event_loop_31
   \   00024A   6401         XRL     A,#0x1
   \   00024C   701A         JNZ     ??zclSampleThermostat_event_loop_32
   \   00024E   90....       MOV     DPTR,#FLAG_BINDING
   \   000251   E0           MOVX    A,@DPTR
   \   000252   6401         XRL     A,#0x1
   \   000254   7012         JNZ     ??zclSampleThermostat_event_loop_32
   \   000256   90....       MOV     DPTR,#FLAG_HARD_BINDING
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   700C         JNZ     ??zclSampleThermostat_event_loop_32
    530          		{
    531          			osal_set_event( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_JOIN_SETUP_EVT );
   \                     ??zclSampleThermostat_event_loop_31:
   \   00025C                ; Setup parameters for call to function osal_set_event
   \   00025C   7A20         MOV     R2,#0x20
   \   00025E   7B00         MOV     R3,#0x0
   \   000260   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   000263   E0           MOVX    A,@DPTR
   \   000264   F9           MOV     R1,A
   \   000265   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    532          		}
    533          
    534              // Restart timer
    535              if ( CHECK_SYSTEM_EVT_PERIOD )
    536              {
    537                osal_start_timerEx( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_CHECK_SYSTEM_EVT, CHECK_SYSTEM_EVT_PERIOD );
   \                     ??zclSampleThermostat_event_loop_32:
   \   000268                ; Setup parameters for call to function osal_start_timerEx
   \   000268   90....       MOV     DPTR,#__Constant_2710
   \   00026B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00026E   7A80         MOV     R2,#-0x80
   \   000270   7B00         MOV     R3,#0x0
   \   000272   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   000275   E0           MOVX    A,@DPTR
   \   000276   F9           MOV     R1,A
   \   000277   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00027A   7404         MOV     A,#0x4
   \   00027C   12....       LCALL   ?DEALLOC_XSTACK8
    538              }
    539          			 
    540              return (events ^ SAMPLETHERMOSTAT_CHECK_SYSTEM_EVT);
   \   00027F   EE           MOV     A,R6
   \   000280   6480         XRL     A,#0x80
   \                     ??zclSampleThermostat_event_loop_3:
   \   000282   FA           MOV     R2,A
   \   000283   EF           MOV     A,R7
   \                     ??zclSampleThermostat_event_loop_20:
   \   000284   FB           MOV     R3,A
   \   000285   8004         SJMP    ??zclSampleThermostat_event_loop_33
    541            }
    542          	
    543          	/*--------------------------------------------------------------------------*/
    544          
    545            // Discard unknown events
    546            return 0;
   \                     ??zclSampleThermostat_event_loop_30:
   \   000287   7A00         MOV     R2,#0x0
   \   000289   7B00         MOV     R3,#0x0
   \                     ??zclSampleThermostat_event_loop_33:
   \   00028B   7402         MOV     A,#0x2
   \   00028D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000290   7F06         MOV     R7,#0x6
   \   000292   02....       LJMP    ?BANKED_LEAVE_XDATA
    547          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   85..82       MOV     DPL,?V0
   \   000008   8B83         MOV     DPH,R3
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#zclSampleThermostat_IdentifyTime
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    548          
    549          /*********************************************************************
    550           * @fn      zclSampleThermostat_HandleKeys
    551           *
    552           * @brief   Handles all key events for this device.
    553           *
    554           * @param   shift - true if in shift/alt.
    555           * @param   keys - bit field for key events. Valid entries:
    556           *                 HAL_KEY_SW_5
    557           *                 HAL_KEY_SW_4
    558           *                 HAL_KEY_SW_3
    559           *                 HAL_KEY_SW_2
    560           *                 HAL_KEY_SW_1
    561           *
    562           * @return  none
    563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_EZModeAction
   \   000001                ; Setup parameters for call to function zcl_EZModeAction
   \   000001                ; Setup parameters for call to function zcl_InvokeEZMode
   \   000001                ; Setup parameters for call to function zcl_InvokeEZMode
   \   000001   AA..         MOV     R2,?XSP + 0
   \   000003   AB..         MOV     R3,?XSP + 1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          static void zclSampleThermostat_HandleKeys( byte shift, byte keys )
   \                     zclSampleThermostat_HandleKeys:
    565          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V3,R1
   \   00000C   8A..         MOV     ?V2,R2
    566          	if ( keys & HAL_KEY_SW_6 ) //~ SW1 on board
   \   00000E   EA           MOV     A,R2
   \   00000F   A2E5         MOV     C,0xE0 /* A   */.5
   \   000011   4003         JC      $+5
   \   000013   02....       LJMP    ??zclSampleThermostat_HandleKeys_0 & 0xFFFF
    567          	{
    568          		UART_DebugPrint(HAL_UART_PORT_0, "SW6");
   \   000016                ; Setup parameters for call to function UART_DebugPrint
   \   000016   7A..         MOV     R2,#`?<Constant "SW6">` & 0xff
   \   000018   7B..         MOV     R3,#(`?<Constant "SW6">` >> 8) & 0xff
   \   00001A   7900         MOV     R1,#0x0
   \   00001C   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    569          
    570          		uint16 maxEntries;
    571          		uint16 usedEntries;
    572          		BindingEntry_t* current_BindingTableEntry;
    573          
    574          		bindCapacity(&maxEntries, &usedEntries);
   \   00001F                ; Setup parameters for call to function bindCapacity
   \   00001F   7409         MOV     A,#0x9
   \   000021   12....       LCALL   ?XSTACK_DISP102_8
   \   000024   740B         MOV     A,#0xb
   \   000026   12....       LCALL   ?XSTACK_DISP101_8
   \   000029   12....       LCALL   `??bindCapacity::?relay`; Banked call to: bindCapacity
    575          		UART_ZCmdPrintString(HAL_UART_PORT_0, "usedEntries: ");
   \   00002C                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00002C   7A..         MOV     R2,#`?<Constant "usedEntries: ">` & 0xff
   \   00002E   7B..         MOV     R3,#(`?<Constant "usedEntries: ">` >> 8) & 0xff
   \   000030   7900         MOV     R1,#0x0
   \   000032   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    576          		UART_ZCmdPrintNum		(HAL_UART_PORT_0, usedEntries);
   \   000035                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000035   7409         MOV     A,#0x9
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00003D   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    577          		UART_ZCmdPrint			(HAL_UART_PORT_0, "");
   \   000040   75....       MOV     ?V0,#`?<Constant "">` & 0xff
   \   000043   75....       MOV     ?V1,#(`?<Constant "">` >> 8) & 0xff
   \   000046                ; Setup parameters for call to function UART_ZCmdPrint
   \   000046   AA..         MOV     R2,?V0
   \   000048   AB..         MOV     R3,?V1
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
    578          
    579          		current_BindingTableEntry = GetBindingTableEntry( 0 );
   \   00004F                ; Setup parameters for call to function GetBindingTableEntry
   \   00004F   7A00         MOV     R2,#0x0
   \   000051   7B00         MOV     R3,#0x0
   \   000053   12....       LCALL   `??GetBindingTableEntry::?relay`; Banked call to: GetBindingTableEntry
   \   000056   8A..         MOV     ?V4,R2
   \   000058   8B..         MOV     ?V5,R3
   \   00005A   AE..         MOV     R6,?V4
   \   00005C   AF..         MOV     R7,?V5
    580          		UART_ZCmdPrintString(HAL_UART_PORT_0, "Entry 0: ");
   \   00005E                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00005E   7A..         MOV     R2,#`?<Constant "Entry 0: ">` & 0xff
   \   000060   7B..         MOV     R3,#(`?<Constant "Entry 0: ">` >> 8) & 0xff
   \   000062   7900         MOV     R1,#0x0
   \   000064   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    581          		UART_ZCmdPrintNum		(HAL_UART_PORT_0, current_BindingTableEntry[0].srcEP);
   \   000067                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00006E   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    582          		UART_ZCmdPrintString(HAL_UART_PORT_0, " | ");
   \   000071   75....       MOV     ?V4,#`?<Constant " | ">` & 0xff
   \   000074   75....       MOV     ?V5,#(`?<Constant " | ">` >> 8) & 0xff
   \   000077                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000077   AA..         MOV     R2,?V4
   \   000079   AB..         MOV     R3,?V5
   \   00007B   7900         MOV     R1,#0x0
   \   00007D   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    583          		UART_ZCmdPrintNum		(HAL_UART_PORT_0, current_BindingTableEntry[0].dstEP);
   \   000080                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00008A   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    584          		UART_ZCmdPrint			(HAL_UART_PORT_0, "");
   \   00008D                ; Setup parameters for call to function UART_ZCmdPrint
   \   00008D   AA..         MOV     R2,?V0
   \   00008F   AB..         MOV     R3,?V1
   \   000091   7900         MOV     R1,#0x0
   \   000093   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
    585          
    586          		current_BindingTableEntry = GetBindingTableEntry( 1 );
   \   000096                ; Setup parameters for call to function GetBindingTableEntry
   \   000096   7A01         MOV     R2,#0x1
   \   000098   7B00         MOV     R3,#0x0
   \   00009A   12....       LCALL   `??GetBindingTableEntry::?relay`; Banked call to: GetBindingTableEntry
   \   00009D   8A..         MOV     ?V6,R2
   \   00009F   8B..         MOV     ?V7,R3
   \   0000A1   AE..         MOV     R6,?V6
   \   0000A3   AF..         MOV     R7,?V7
    587          		UART_ZCmdPrintString(HAL_UART_PORT_0, "Entry 1: ");
   \   0000A5                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000A5   7A..         MOV     R2,#`?<Constant "Entry 1: ">` & 0xff
   \   0000A7   7B..         MOV     R3,#(`?<Constant "Entry 1: ">` >> 8) & 0xff
   \   0000A9   7900         MOV     R1,#0x0
   \   0000AB   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    588          		UART_ZCmdPrintNum		(HAL_UART_PORT_0, current_BindingTableEntry[1].srcEP);
   \   0000AE                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000AE   EE           MOV     A,R6
   \   0000AF   240E         ADD     A,#0xe
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   E4           CLR     A
   \   0000B4   3F           ADDC    A,R7
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000BA   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    589          		UART_ZCmdPrintString(HAL_UART_PORT_0, " | ");
   \   0000BD                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000BD   AA..         MOV     R2,?V4
   \   0000BF   AB..         MOV     R3,?V5
   \   0000C1   7900         MOV     R1,#0x0
   \   0000C3   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    590          		UART_ZCmdPrintNum		(HAL_UART_PORT_0, current_BindingTableEntry[1].dstEP);
   \   0000C6                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000C6   EE           MOV     A,R6
   \   0000C7   2412         ADD     A,#0x12
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   E4           CLR     A
   \   0000CC   3F           ADDC    A,R7
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000D2   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    591          		UART_ZCmdPrint			(HAL_UART_PORT_0, "");
   \   0000D5                ; Setup parameters for call to function UART_ZCmdPrint
   \   0000D5   AA..         MOV     R2,?V0
   \   0000D7   AB..         MOV     R3,?V1
   \   0000D9   7900         MOV     R1,#0x0
   \   0000DB   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
    592          
    593          		current_BindingTableEntry = GetBindingTableEntry( 2 );
   \   0000DE                ; Setup parameters for call to function GetBindingTableEntry
   \   0000DE   7A02         MOV     R2,#0x2
   \   0000E0   7B00         MOV     R3,#0x0
   \   0000E2   12....       LCALL   `??GetBindingTableEntry::?relay`; Banked call to: GetBindingTableEntry
   \   0000E5   8A..         MOV     ?V6,R2
   \   0000E7   8B..         MOV     ?V7,R3
   \   0000E9   AE..         MOV     R6,?V6
   \   0000EB   AF..         MOV     R7,?V7
    594          		UART_ZCmdPrintString(HAL_UART_PORT_0, "Entry 2: ");
   \   0000ED                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000ED   7A..         MOV     R2,#`?<Constant "Entry 2: ">` & 0xff
   \   0000EF   7B..         MOV     R3,#(`?<Constant "Entry 2: ">` >> 8) & 0xff
   \   0000F1   7900         MOV     R1,#0x0
   \   0000F3   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    595          		UART_ZCmdPrintNum		(HAL_UART_PORT_0, current_BindingTableEntry[2].srcEP);
   \   0000F6                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000F6   EE           MOV     A,R6
   \   0000F7   241C         ADD     A,#0x1c
   \   0000F9   F582         MOV     DPL,A
   \   0000FB   E4           CLR     A
   \   0000FC   3F           ADDC    A,R7
   \   0000FD   F583         MOV     DPH,A
   \   0000FF   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000102   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    596          		UART_ZCmdPrintString(HAL_UART_PORT_0, " | ");
   \   000105                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000105   AA..         MOV     R2,?V4
   \   000107   AB..         MOV     R3,?V5
   \   000109   7900         MOV     R1,#0x0
   \   00010B   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    597          		UART_ZCmdPrintNum		(HAL_UART_PORT_0, current_BindingTableEntry[2].dstEP);
   \   00010E                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   00010E   EE           MOV     A,R6
   \   00010F   2420         ADD     A,#0x20
   \   000111   F582         MOV     DPL,A
   \   000113   E4           CLR     A
   \   000114   3F           ADDC    A,R7
   \   000115   F583         MOV     DPH,A
   \   000117   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00011A   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    598          		UART_ZCmdPrint			(HAL_UART_PORT_0, "");
   \   00011D                ; Setup parameters for call to function UART_ZCmdPrint
   \   00011D   AA..         MOV     R2,?V0
   \   00011F   AB..         MOV     R3,?V1
   \   000121   7900         MOV     R1,#0x0
   \   000123   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
    599          
    600          		current_BindingTableEntry = GetBindingTableEntry( 3 );
   \   000126                ; Setup parameters for call to function GetBindingTableEntry
   \   000126   7A03         MOV     R2,#0x3
   \   000128   7B00         MOV     R3,#0x0
   \   00012A   12....       LCALL   `??GetBindingTableEntry::?relay`; Banked call to: GetBindingTableEntry
   \   00012D   8A..         MOV     ?V6,R2
   \   00012F   8B..         MOV     ?V7,R3
   \   000131   AE..         MOV     R6,?V6
   \   000133   AF..         MOV     R7,?V7
    601          		UART_ZCmdPrintString(HAL_UART_PORT_0, "Entry 3: ");
   \   000135                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000135   7A..         MOV     R2,#`?<Constant "Entry 3: ">` & 0xff
   \   000137   7B..         MOV     R3,#(`?<Constant "Entry 3: ">` >> 8) & 0xff
   \   000139   7900         MOV     R1,#0x0
   \   00013B   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    602          		UART_ZCmdPrintNum		(HAL_UART_PORT_0, current_BindingTableEntry[3].srcEP);
   \   00013E                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   00013E   EE           MOV     A,R6
   \   00013F   242A         ADD     A,#0x2a
   \   000141   F582         MOV     DPL,A
   \   000143   E4           CLR     A
   \   000144   3F           ADDC    A,R7
   \   000145   F583         MOV     DPH,A
   \   000147   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00014A   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    603          		UART_ZCmdPrintString(HAL_UART_PORT_0, " | ");
   \   00014D                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00014D   AA..         MOV     R2,?V4
   \   00014F   AB..         MOV     R3,?V5
   \   000151   7900         MOV     R1,#0x0
   \   000153   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
    604          		UART_ZCmdPrintNum		(HAL_UART_PORT_0, current_BindingTableEntry[3].dstEP);
   \   000156                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000156   EE           MOV     A,R6
   \   000157   242E         ADD     A,#0x2e
   \   000159   F582         MOV     DPL,A
   \   00015B   E4           CLR     A
   \   00015C   3F           ADDC    A,R7
   \   00015D   F583         MOV     DPH,A
   \   00015F   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000162   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
    605          		UART_ZCmdPrint			(HAL_UART_PORT_0, "");
   \   000165                ; Setup parameters for call to function UART_ZCmdPrint
   \   000165   AA..         MOV     R2,?V0
   \   000167   AB..         MOV     R3,?V1
   \   000169   7900         MOV     R1,#0x0
   \   00016B   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
    606          		
    607          	}
    608          	
    609            if ( keys & HAL_KEY_SW_8 ) //~ SW3 on board
   \                     ??zclSampleThermostat_HandleKeys_0:
   \   00016E   E5..         MOV     A,?V2
   \   000170   A2E7         MOV     C,0xE0 /* A   */.7
   \   000172   4003         JC      $+5
   \   000174   02....       LJMP    ??zclSampleThermostat_HandleKeys_1 & 0xFFFF
    610            {
    611            	UART_DebugPrint(HAL_UART_PORT_0, "SW8");
   \   000177                ; Setup parameters for call to function UART_DebugPrint
   \   000177   7A..         MOV     R2,#`?<Constant "SW8">` & 0xff
   \   000179   7B..         MOV     R3,#(`?<Constant "SW8">` >> 8) & 0xff
   \   00017B   7900         MOV     R1,#0x0
   \   00017D   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    612              if ( ( giThermostatScreenMode == THERMOSTAT_MAINMODE ) ||
    613                   ( giThermostatScreenMode == THERMOSTAT_HELPMODE ) )
   \   000180   90....       MOV     DPTR,#giThermostatScreenMode
   \   000183   E0           MOVX    A,@DPTR
   \   000184   6004         JZ      ??zclSampleThermostat_HandleKeys_2
   \   000186   6401         XRL     A,#0x1
   \   000188   7072         JNZ     ??zclSampleThermostat_HandleKeys_1
    614              {
    615                giThermostatScreenMode = THERMOSTAT_MAINMODE;
   \                     ??zclSampleThermostat_HandleKeys_2:
   \   00018A   E4           CLR     A
   \   00018B   F0           MOVX    @DPTR,A
    616          
    617          			FLAG_BINDING = !FLAG_BINDING;
   \   00018C   90....       MOV     DPTR,#FLAG_BINDING
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   7004         JNZ     ??zclSampleThermostat_HandleKeys_3
   \   000192   7401         MOV     A,#0x1
   \   000194   8001         SJMP    ??zclSampleThermostat_HandleKeys_4
   \                     ??zclSampleThermostat_HandleKeys_3:
   \   000196   E4           CLR     A
   \                     ??zclSampleThermostat_HandleKeys_4:
   \   000197   F0           MOVX    @DPTR,A
    618          			FLAG_HARD_BINDING = !FLAG_HARD_BINDING;
   \   000198   90....       MOV     DPTR,#FLAG_HARD_BINDING
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   7004         JNZ     ??zclSampleThermostat_HandleKeys_5
   \   00019E   7401         MOV     A,#0x1
   \   0001A0   8001         SJMP    ??zclSampleThermostat_HandleKeys_6
   \                     ??zclSampleThermostat_HandleKeys_5:
   \   0001A2   E4           CLR     A
   \                     ??zclSampleThermostat_HandleKeys_6:
   \   0001A3   12....       LCALL   ?Subroutine6 & 0xFFFF
    619          
    620          			#ifdef ZCL_EZMODE
    621                zclEZMode_InvokeData_t ezModeData;
    622                static uint16 clusterIDs[] = { ZCL_CLUSTER_ID_HVAC_THERMOSTAT };   // only bind on the Thermostat cluster
    623          
    624                // Invoke EZ-Mode
    625                ezModeData.endpoint = SAMPLETHERMOSTAT_ENDPOINT; // endpoint on which to invoke EZ-Mode
    626                if ( ( zclSampleThermostat_NwkState == DEV_ZB_COORD ) ||
    627                     ( zclSampleThermostat_NwkState == DEV_ROUTER )   ||
    628                     ( zclSampleThermostat_NwkState == DEV_END_DEVICE ) )
   \                     ??CrossCallReturnLabel_4:
   \   0001A6   600A         JZ      ??zclSampleThermostat_HandleKeys_7
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   6407         XRL     A,#0x7
   \   0001AB   6005         JZ      ??zclSampleThermostat_HandleKeys_7
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   6406         XRL     A,#0x6
   \   0001B0   7009         JNZ     ??zclSampleThermostat_HandleKeys_8
    629                {
    630                  ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zclSampleThermostat_HandleKeys_7:
   \   0001B2   7401         MOV     A,#0x1
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   7401         MOV     A,#0x1
   \   0001B9   8006         SJMP    ??zclSampleThermostat_HandleKeys_9
    631                }
    632                else
    633                {
    634                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zclSampleThermostat_HandleKeys_8:
   \   0001BB   7401         MOV     A,#0x1
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   E4           CLR     A
   \                     ??zclSampleThermostat_HandleKeys_9:
   \   0001C1   F0           MOVX    @DPTR,A
    635                }
    636                ezModeData.initiator = TRUE;        // Thermostat is an initiator
   \   0001C2   7402         MOV     A,#0x2
   \   0001C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C7   7401         MOV     A,#0x1
   \   0001C9   F0           MOVX    @DPTR,A
    637                ezModeData.numActiveInClusters = 0;
   \   0001CA   7403         MOV     A,#0x3
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   E4           CLR     A
   \   0001D0   F0           MOVX    @DPTR,A
    638                ezModeData.pActiveInClusterIDs = NULL;
   \   0001D1   7404         MOV     A,#0x4
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   E4           CLR     A
   \   0001D7   F0           MOVX    @DPTR,A
   \   0001D8   A3           INC     DPTR
   \   0001D9   F0           MOVX    @DPTR,A
    639                ezModeData.numActiveOutClusters = 1;   // active output cluster
   \   0001DA   7406         MOV     A,#0x6
   \   0001DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DF   7401         MOV     A,#0x1
   \   0001E1   F0           MOVX    @DPTR,A
    640                ezModeData.pActiveOutClusterIDs = clusterIDs;
   \   0001E2   7407         MOV     A,#0x7
   \   0001E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E7   74..         MOV     A,#??clusterIDs & 0xff
   \   0001E9   F0           MOVX    @DPTR,A
   \   0001EA   A3           INC     DPTR
   \   0001EB   74..         MOV     A,#(??clusterIDs >> 8) & 0xff
   \   0001ED   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    641                zcl_InvokeEZMode( &ezModeData );
   \                     ??CrossCallReturnLabel_64:
   \   0001F0   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
    642          
    643          			#ifdef LCD_SUPPORTED
    644                HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   \   0001F3                ; Setup parameters for call to function HalLcdWriteString
   \   0001F3   7902         MOV     R1,#0x2
   \   0001F5   7A..         MOV     R2,#`?<Constant "EZMode">` & 0xff
   \   0001F7   7B..         MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
   \   0001F9   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    645          			#endif
    646          
    647                // NOT ZCL_EZMODE, use EndDeviceBind
    648          			#else
    649                zAddrType_t dstAddr;
    650                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    651          
    652                // Initiate an End Device Bind Request, this bind request will
    653                // only use a cluster list that is important to binding.
    654                dstAddr.addrMode = afAddr16Bit;
    655                dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    656                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    657                                      SAMPLETHERMOSTAT_ENDPOINT,
    658                                      ZCL_HA_PROFILE_ID,
    659                                      ZCLSAMPLETHERMOSTAT_BINDINGLIST_IN, bindingInClusters,
    660                                      ZCLSAMPLETHERMOSTAT_BINDINGLIST_OUT, bindingOutClusters,
    661                                      TRUE );
    662          			#endif // ZCL_EZMODE
    663              }
    664            }
    665          
    666            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclSampleThermostat_HandleKeys_1:
   \   0001FC   E5..         MOV     A,?V2
   \   0001FE   A2E3         MOV     C,0xE0 /* A   */.3
   \   000200   5041         JNC     ??zclSampleThermostat_HandleKeys_10
    667            {
    668              giThermostatScreenMode = THERMOSTAT_MAINMODE;
   \   000202   90....       MOV     DPTR,#giThermostatScreenMode
   \   000205   E4           CLR     A
   \   000206   F0           MOVX    @DPTR,A
    669          
    670              if ( ( zclSampleThermostat_NwkState == DEV_ZB_COORD ) ||
    671                   ( zclSampleThermostat_NwkState == DEV_ROUTER ) )
   \   000207   90....       MOV     DPTR,#zclSampleThermostat_NwkState
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   6409         XRL     A,#0x9
   \   00020D   6005         JZ      ??zclSampleThermostat_HandleKeys_11
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   6407         XRL     A,#0x7
   \   000212   702F         JNZ     ??zclSampleThermostat_HandleKeys_10
    672              {
    673                zAddrType_t tmpAddr;
    674          
    675                tmpAddr.addrMode = Addr16Bit;
   \                     ??zclSampleThermostat_HandleKeys_11:
   \   000214   7408         MOV     A,#0x8
   \   000216   12....       LCALL   ?XSTACK_DISP0_8
   \   000219   7402         MOV     A,#0x2
   \   00021B   F0           MOVX    @DPTR,A
    676                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   00021C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00021C   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00021F   85..82       MOV     DPL,?XSP + 0
   \   000222   85..83       MOV     DPH,?XSP + 1
   \   000225   EA           MOV     A,R2
   \   000226   F0           MOVX    @DPTR,A
   \   000227   A3           INC     DPTR
   \   000228   EB           MOV     A,R3
   \   000229   F0           MOVX    @DPTR,A
    677          
    678                // toggle permit join
    679                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \   00022A   90....       MOV     DPTR,#gPermitDuration
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   6003         JZ      ??zclSampleThermostat_HandleKeys_12
   \   000230   E4           CLR     A
   \   000231   8002         SJMP    ??zclSampleThermostat_HandleKeys_13
   \                     ??zclSampleThermostat_HandleKeys_12:
   \   000233   74FF         MOV     A,#-0x1
   \                     ??zclSampleThermostat_HandleKeys_13:
   \   000235   F0           MOVX    @DPTR,A
    680          
    681                // Trust Center significance is always true
    682                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
   \   000236                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   000236   7D00         MOV     R5,#0x0
   \   000238   7C01         MOV     R4,#0x1
   \   00023A   E0           MOVX    A,@DPTR
   \   00023B   F9           MOV     R1,A
   \   00023C   AA..         MOV     R2,?XSP + 0
   \   00023E   AB..         MOV     R3,?XSP + 1
   \   000240   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
    683              }
    684            }
    685          
    686            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zclSampleThermostat_HandleKeys_10:
   \   000243   E5..         MOV     A,?V3
   \   000245   600B         JZ      ??zclSampleThermostat_HandleKeys_14
   \   000247   E5..         MOV     A,?V2
   \   000249   A2E2         MOV     C,0xE0 /* A   */.2
   \   00024B   5005         JNC     ??zclSampleThermostat_HandleKeys_14
    687            {
    688              zclSampleThermostat_BasicResetCB();
   \   00024D                ; Setup parameters for call to function zclSampleThermostat_BasicResetCB
   \   00024D   12....       LCALL   `??zclSampleThermostat_BasicResetCB::?relay`; Banked call to: zclSampleThermostat_BasicResetCB
   \   000250   803C         SJMP    ??zclSampleThermostat_HandleKeys_15
    689            }
    690            else if ( keys & HAL_KEY_SW_5 )
    691            {
    692              if ( keys & HAL_KEY_SW_5 )
   \                     ??zclSampleThermostat_HandleKeys_14:
   \   000252   E5..         MOV     A,?V2
   \   000254   A2E2         MOV     C,0xE0 /* A   */.2
   \   000256   5036         JNC     ??zclSampleThermostat_HandleKeys_15
    693              {
    694                // in heating or cooling setpoint mode
    695                if ( giThermostatScreenMode == THERMOSTAT_HEATMODE )
   \   000258   90....       MOV     DPTR,#giThermostatScreenMode
   \   00025B   E0           MOVX    A,@DPTR
   \   00025C   6402         XRL     A,#0x2
   \   00025E   7008         JNZ     ??zclSampleThermostat_HandleKeys_16
    696                {
    697          				#ifdef LCD_SUPPORTED
    698                  // save current heat setpoint temperature
    699                  HalLcdWriteString( (char *)sStoreHeatTemp, HAL_LCD_LINE_2 );
   \   000260                ; Setup parameters for call to function HalLcdWriteString
   \   000260   7902         MOV     R1,#0x2
   \   000262   7A..         MOV     R2,#sStoreHeatTemp & 0xff
   \   000264   7B..         MOV     R3,#(sStoreHeatTemp >> 8) & 0xff
   \   000266   801E         SJMP    ??zclSampleThermostat_HandleKeys_17
    700          				#endif
    701                  giThermostatScreenMode = THERMOSTAT_MAINMODE;
    702                }
    703                else if ( giThermostatScreenMode == THERMOSTAT_COOLMODE )
   \                     ??zclSampleThermostat_HandleKeys_16:
   \   000268   E0           MOVX    A,@DPTR
   \   000269   6403         XRL     A,#0x3
   \   00026B   7008         JNZ     ??zclSampleThermostat_HandleKeys_18
    704                {
    705          				#ifdef LCD_SUPPORTED
    706                  // save current cool setpoint temperature
    707                  HalLcdWriteString( (char *)sStoreCoolTemp, HAL_LCD_LINE_2 );
   \   00026D                ; Setup parameters for call to function HalLcdWriteString
   \   00026D   7902         MOV     R1,#0x2
   \   00026F   7A..         MOV     R2,#sStoreCoolTemp & 0xff
   \   000271   7B..         MOV     R3,#(sStoreCoolTemp >> 8) & 0xff
   \   000273   8011         SJMP    ??zclSampleThermostat_HandleKeys_17
    708          				#endif
    709                  giThermostatScreenMode = THERMOSTAT_MAINMODE;
    710                }
    711                else if ( giThermostatScreenMode == THERMOSTAT_MAINMODE )
   \                     ??zclSampleThermostat_HandleKeys_18:
   \   000275   E0           MOVX    A,@DPTR
   \   000276   7004         JNZ     ??zclSampleThermostat_HandleKeys_19
    712                {
    713                  giThermostatScreenMode = THERMOSTAT_HELPMODE;
   \   000278   7401         MOV     A,#0x1
   \   00027A   8011         SJMP    ??zclSampleThermostat_HandleKeys_20
    714                }
    715                else if ( giThermostatScreenMode == THERMOSTAT_HELPMODE )
   \                     ??zclSampleThermostat_HandleKeys_19:
   \   00027C   6401         XRL     A,#0x1
   \   00027E   700E         JNZ     ??zclSampleThermostat_HandleKeys_15
    716                {
    717          				#ifdef LCD_SUPPORTED
    718                  HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
   \   000280                ; Setup parameters for call to function HalLcdWriteString
   \   000280   7902         MOV     R1,#0x2
   \   000282   7A..         MOV     R2,#sClearLine & 0xff
   \   000284   7B..         MOV     R3,#(sClearLine >> 8) & 0xff
   \                     ??zclSampleThermostat_HandleKeys_17:
   \   000286   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    719          				#endif
    720                  giThermostatScreenMode = THERMOSTAT_MAINMODE;
   \   000289   90....       MOV     DPTR,#giThermostatScreenMode
   \   00028C   E4           CLR     A
   \                     ??zclSampleThermostat_HandleKeys_20:
   \   00028D   F0           MOVX    @DPTR,A
    721                }
    722              }
    723            }
    724          
    725            // update display
    726            zclSampleThermostat_LcdDisplayUpdate();
   \                     ??zclSampleThermostat_HandleKeys_15:
   \   00028E                ; Setup parameters for call to function zclSampleThermostat_LcdDisplayUpdate
   \   00028E   12....       LCALL   `??zclSampleThermostat_LcdDisplayUpdate::?relay`; Banked call to: zclSampleThermostat_LcdDisplayUpdate
    727          }
   \   000291   740D         MOV     A,#0xd
   \   000293   12....       LCALL   ?DEALLOC_XSTACK8
   \   000296   7F08         MOV     R7,#0x8
   \   000298   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   AA..         MOV     R2,?V0
   \   000007   FB           MOV     R3,A
   \   000008   E4           CLR     A
   \   000009   FC           MOV     R4,A
   \   00000A   FD           MOV     R5,A
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine36_0
   \   000001                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   E4           CLR     A
   \   000003   FB           MOV     R3,A
   \   000004   FC           MOV     R4,A
   \   000005   FD           MOV     R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   7408         MOV     A,#0x8
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#zclSampleThermostat_NwkState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6409         XRL     A,#0x9
   \   000010   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??clusterIDs:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for clusterIDs>`
   \   000002                REQUIRE __INIT_XDATA_I
    728          
    729          /*********************************************************************
    730           * @fn      zclSampleThermostat_LcdDisplayUpdate
    731           *
    732           * @brief   Called to update the LCD display.
    733           *
    734           * @param   none
    735           *
    736           * @return  none
    737           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          void zclSampleThermostat_LcdDisplayUpdate( void )
   \                     zclSampleThermostat_LcdDisplayUpdate:
    739          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    740            // use LEDs to show heating or cooling cycles based off local temperature
    741            if ( zclSampleThermostat_LocalTemperature != NULL )
   \   000004   90....       MOV     DPTR,#zclSampleThermostat_LocalTemperature
   \   000007   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00000A   602C         JZ      ??zclSampleThermostat_LcdDisplayUpdate_0
    742            {
    743              if ( zclSampleThermostat_LocalTemperature <= zclSampleThermostat_OccupiedHeatingSetpoint )
   \   00000C   7583..       MOV     DPH,#(zclSampleThermostat_OccupiedHeatingSetpoint >> 8) & 0xff
   \   00000F   7582..       MOV     DPL,#zclSampleThermostat_OccupiedHeatingSetpoint & 0xff
   \   000012   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000015   4007         JC      ??zclSampleThermostat_LcdDisplayUpdate_1
    744              {
    745                // turn on heating
    746                zclSampleThermostat_SystemMode = HVAC_THERMOSTAT_SYSTEM_MODE_HEAT;
   \   000017   90....       MOV     DPTR,#zclSampleThermostat_SystemMode
   \   00001A   7404         MOV     A,#0x4
   \   00001C   8019         SJMP    ??zclSampleThermostat_LcdDisplayUpdate_2
    747          //      HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    748          //      HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    749              }
    750              else if ( zclSampleThermostat_LocalTemperature >= zclSampleThermostat_OccupiedCoolingSetpoint )
   \                     ??zclSampleThermostat_LcdDisplayUpdate_1:
   \   00001E   90....       MOV     DPTR,#zclSampleThermostat_OccupiedCoolingSetpoint
   \   000021   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000024   7583..       MOV     DPH,#(zclSampleThermostat_LocalTemperature >> 8) & 0xff
   \   000027   7582..       MOV     DPL,#zclSampleThermostat_LocalTemperature & 0xff
   \   00002A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00002D   90....       MOV     DPTR,#zclSampleThermostat_SystemMode
   \   000030   4004         JC      ??zclSampleThermostat_LcdDisplayUpdate_3
    751              {
    752                // turn on cooling
    753                zclSampleThermostat_SystemMode = HVAC_THERMOSTAT_SYSTEM_MODE_COOL;
   \   000032   7403         MOV     A,#0x3
   \   000034   8001         SJMP    ??zclSampleThermostat_LcdDisplayUpdate_2
    754          //      HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    755          //      HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
    756              }
    757              else
    758              {
    759                // turn off heating/cooling
    760                zclSampleThermostat_SystemMode = HVAC_THERMOSTAT_SYSTEM_MODE_OFF;
   \                     ??zclSampleThermostat_LcdDisplayUpdate_3:
   \   000036   E4           CLR     A
   \                     ??zclSampleThermostat_LcdDisplayUpdate_2:
   \   000037   F0           MOVX    @DPTR,A
    761          //      HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    762          //      HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
    763              }
    764            }
    765          
    766            if ( giThermostatScreenMode == THERMOSTAT_HEATMODE )
   \                     ??zclSampleThermostat_LcdDisplayUpdate_0:
   \   000038   90....       MOV     DPTR,#giThermostatScreenMode
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6402         XRL     A,#0x2
   \   00003E   7005         JNZ     ??zclSampleThermostat_LcdDisplayUpdate_4
    767            {
    768              zclSampleThermostat_LcdDisplayHeatMode();
   \   000040                ; Setup parameters for call to function zclSampleThermostat_LcdDisplayHeatMode
   \   000040   12....       LCALL   `??zclSampleThermostat_LcdDisplayHeatMode::?rela`; Banked call to: zclSampleThermostat_LcdDisplayHeatMode
   \   000043   8017         SJMP    ??zclSampleThermostat_LcdDisplayUpdate_5
    769            }
    770            else if ( giThermostatScreenMode == THERMOSTAT_COOLMODE )
   \                     ??zclSampleThermostat_LcdDisplayUpdate_4:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6403         XRL     A,#0x3
   \   000048   7005         JNZ     ??zclSampleThermostat_LcdDisplayUpdate_6
    771            {
    772              zclSampleThermostat_LcdDisplayCoolMode();
   \   00004A                ; Setup parameters for call to function zclSampleThermostat_LcdDisplayCoolMode
   \   00004A   12....       LCALL   `??zclSampleThermostat_LcdDisplayCoolMode::?rela`; Banked call to: zclSampleThermostat_LcdDisplayCoolMode
   \   00004D   800D         SJMP    ??zclSampleThermostat_LcdDisplayUpdate_5
    773            }
    774            else if ( giThermostatScreenMode == THERMOSTAT_HELPMODE )
   \                     ??zclSampleThermostat_LcdDisplayUpdate_6:
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6401         XRL     A,#0x1
   \   000052   7005         JNZ     ??zclSampleThermostat_LcdDisplayUpdate_7
    775            {
    776              zclSampleThermostat_LcdDisplayHelpMode();
   \   000054                ; Setup parameters for call to function zclSampleThermostat_LcdDisplayHelpMode
   \   000054   12....       LCALL   `??zclSampleThermostat_LcdDisplayHelpMode::?rela`; Banked call to: zclSampleThermostat_LcdDisplayHelpMode
   \   000057   8003         SJMP    ??zclSampleThermostat_LcdDisplayUpdate_5
    777            }
    778            else
    779            {
    780              zclSampleThermostat_LcdDisplayMainMode();
   \                     ??zclSampleThermostat_LcdDisplayUpdate_7:
   \   000059                ; Setup parameters for call to function zclSampleThermostat_LcdDisplayMainMode
   \   000059   12....       LCALL   `??zclSampleThermostat_LcdDisplayMainMode::?rela`; Banked call to: zclSampleThermostat_LcdDisplayMainMode
    781            }
    782          }
   \                     ??zclSampleThermostat_LcdDisplayUpdate_5:
   \   00005C   02....       LJMP    ??Subroutine32_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   98           SUBB    A,R0
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   99           SUBB    A,R1
   \   000006   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000008   65D0         XRL     A,PSW
   \   00000A   33           RLC     A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   22           RET
    783          
    784          /*********************************************************************
    785           * @fn      zclSampleThermostat_LcdDisplayMainMode
    786           *
    787           * @brief   Called to display the main screen on the LCD.
    788           *
    789           * @param   none
    790           *
    791           * @return  none
    792           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    793          void zclSampleThermostat_LcdDisplayMainMode( void )
   \                     zclSampleThermostat_LcdDisplayMainMode:
    794          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    795            char sDisplayTemp[16];
    796          
    797            if ( zclSampleThermostat_NwkState == DEV_ZB_COORD )
   \   00000A   90....       MOV     DPTR,#zclSampleThermostat_NwkState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6409         XRL     A,#0x9
   \   000010   7004         JNZ     ??zclSampleThermostat_LcdDisplayMainMode_0
    798            {
    799              zclHA_LcdStatusLine1( 0 );
   \   000012                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000012   7900         MOV     R1,#0x0
   \   000014   8010         SJMP    ??zclSampleThermostat_LcdDisplayMainMode_1
    800            }
    801            else if ( zclSampleThermostat_NwkState == DEV_ROUTER )
   \                     ??zclSampleThermostat_LcdDisplayMainMode_0:
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6407         XRL     A,#0x7
   \   000019   7004         JNZ     ??zclSampleThermostat_LcdDisplayMainMode_2
    802            {
    803              zclHA_LcdStatusLine1( 1 );
   \   00001B                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   8007         SJMP    ??zclSampleThermostat_LcdDisplayMainMode_1
    804            }
    805            else if ( zclSampleThermostat_NwkState == DEV_END_DEVICE )
   \                     ??zclSampleThermostat_LcdDisplayMainMode_2:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6406         XRL     A,#0x6
   \   000022   7005         JNZ     ??zclSampleThermostat_LcdDisplayMainMode_3
    806            {
    807              zclHA_LcdStatusLine1( 2 );
   \   000024                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000024   7902         MOV     R1,#0x2
   \                     ??zclSampleThermostat_LcdDisplayMainMode_1:
   \   000026   12....       LCALL   `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
    808            }
    809          
    810            osal_memcpy( sDisplayTemp, "TEMP: ", 6 );
   \                     ??zclSampleThermostat_LcdDisplayMainMode_3:
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   75....       MOV     ?V0,#`?<Constant "TEMP: ">` & 0xff
   \   00002C   75....       MOV     ?V1,#(`?<Constant "TEMP: ">` >> 8) & 0xff
   \   00002F   75..00       MOV     ?V2,#0x0
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000037   7C06         MOV     R4,#0x6
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   7403         MOV     A,#0x3
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
    811          
    812            // if local temperature has not been set, make note on display
    813            if ( zclSampleThermostat_LocalTemperature == NULL )
   \   000048   90....       MOV     DPTR,#zclSampleThermostat_LocalTemperature
   \   00004B   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00004E   7013         JNZ     ??zclSampleThermostat_LcdDisplayMainMode_4
    814            {
    815              osal_memcpy( &sDisplayTemp[6], "N/A", 4 );
   \   000050                ; Setup parameters for call to function osal_memcpy
   \   000050   75....       MOV     ?V0,#`?<Constant "N/A">` & 0xff
   \   000053   75....       MOV     ?V1,#(`?<Constant "N/A">` >> 8) & 0xff
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B   7C04         MOV     R4,#0x4
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7409         MOV     A,#0x9
   \   000061   803D         SJMP    ??zclSampleThermostat_LcdDisplayMainMode_5
    816            }
    817            else
    818            {
    819              _ltoa( ( zclSampleThermostat_LocalTemperature / 100 ), (void *)(&sDisplayTemp[6]), 10 ); // only use whole number
   \                     ??zclSampleThermostat_LcdDisplayMainMode_4:
   \   000063                ; Setup parameters for call to function _ltoa
   \   000063   7406         MOV     A,#0x6
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   8582..       MOV     ?V0,DPL
   \   00006B   8583..       MOV     ?V1,DPH
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   90....       MOV     DPTR,#zclSampleThermostat_LocalTemperature
   \   000076   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000079   12....       LCALL   ?S_DIV_MOD
   \   00007C   E8           MOV     A,R0
   \   00007D   FA           MOV     R2,A
   \   00007E   E9           MOV     A,R1
   \   00007F   FB           MOV     R3,A
   \   000080   33           RLC     A
   \   000081   95E0         SUBB    A,0xE0 /* A   */
   \   000083   FC           MOV     R4,A
   \   000084   FD           MOV     R5,A
   \   000085   790A         MOV     R1,#0xa
   \   000087   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
    820              osal_memcpy( &sDisplayTemp[8], "C", 2 );
   \   00008F                ; Setup parameters for call to function osal_memcpy
   \   00008F   75....       MOV     ?V0,#`?<Constant "C">` & 0xff
   \   000092   75....       MOV     ?V1,#(`?<Constant "C">` >> 8) & 0xff
   \   000095   78..         MOV     R0,#?V0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009A   7C02         MOV     R4,#0x2
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   740B         MOV     A,#0xb
   \                     ??zclSampleThermostat_LcdDisplayMainMode_5:
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   AA82         MOV     R2,DPL
   \   0000A5   AB83         MOV     R3,DPH
   \   0000A7   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AA   7403         MOV     A,#0x3
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    821            }
    822          #ifdef LCD_SUPPORTED
    823            // display current temperature
    824            HalLcdWriteString( (char *)sDisplayTemp, HAL_LCD_LINE_2 );
   \   0000AF                ; Setup parameters for call to function HalLcdWriteString
   \   0000AF   7902         MOV     R1,#0x2
   \   0000B1   AA..         MOV     R2,?XSP + 0
   \   0000B3   AB..         MOV     R3,?XSP + 1
   \   0000B5   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    825          #endif
    826          
    827          #ifdef LCD_SUPPORTED
    828            if ( ( zclSampleThermostat_NwkState == DEV_ZB_COORD ) ||
    829                 ( zclSampleThermostat_NwkState == DEV_ROUTER ) )
   \   0000B8   90....       MOV     DPTR,#zclSampleThermostat_NwkState
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   6409         XRL     A,#0x9
   \   0000BE   6005         JZ      ??zclSampleThermostat_LcdDisplayMainMode_6
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   6407         XRL     A,#0x7
   \   0000C3   7014         JNZ     ??zclSampleThermostat_LcdDisplayMainMode_7
    830            {
    831              // display help key with permit join status
    832              if ( gPermitDuration )
   \                     ??zclSampleThermostat_LcdDisplayMainMode_6:
   \   0000C5   90....       MOV     DPTR,#gPermitDuration
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   7903         MOV     R1,#0x3
   \   0000CB   6006         JZ      ??zclSampleThermostat_LcdDisplayMainMode_8
    833              {
    834                HalLcdWriteString( "SW5: Help      *", HAL_LCD_LINE_3 );
   \   0000CD                ; Setup parameters for call to function HalLcdWriteString
   \   0000CD   7A..         MOV     R2,#`?<Constant "SW5: Help      *">` & 0xff
   \   0000CF   7B..         MOV     R3,#(`?<Constant "SW5: Help      *">` >> 8) & 0xff
   \   0000D1   800C         SJMP    ??zclSampleThermostat_LcdDisplayMainMode_9
    835              }
    836              else
    837              {
    838                HalLcdWriteString( "SW5: Help       ", HAL_LCD_LINE_3 );
   \                     ??zclSampleThermostat_LcdDisplayMainMode_8:
   \   0000D3                ; Setup parameters for call to function HalLcdWriteString
   \   0000D3   7A..         MOV     R2,#`?<Constant "SW5: Help       ">` & 0xff
   \   0000D5   7B..         MOV     R3,#(`?<Constant "SW5: Help       ">` >> 8) & 0xff
   \   0000D7   8006         SJMP    ??zclSampleThermostat_LcdDisplayMainMode_9
    839              }
    840            }
    841            else
    842            {
    843              // display help key
    844              HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3);
   \                     ??zclSampleThermostat_LcdDisplayMainMode_7:
   \   0000D9                ; Setup parameters for call to function HalLcdWriteString
   \   0000D9   7903         MOV     R1,#0x3
   \   0000DB   7A..         MOV     R2,#sSwHelp & 0xff
   \   0000DD   7B..         MOV     R3,#(sSwHelp >> 8) & 0xff
    845            }
   \                     ??zclSampleThermostat_LcdDisplayMainMode_9:
   \   0000DF   02....       LJMP    ??Subroutine33_0 & 0xFFFF
    846          #endif
    847          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000003   7410         MOV     A,#0x10
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7F03         MOV     R7,#0x3
   \   00000A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   7A64         MOV     R2,#0x64
   \   000005   7B00         MOV     R3,#0x0
   \   000007   22           RET
    848          
    849          /*********************************************************************
    850           * @fn      zclSampleThermostat_LcdDisplayHelpMode
    851           *
    852           * @brief   Called to display the SW options on the LCD.
    853           *
    854           * @param   none
    855           *
    856           * @return  none
    857           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    858          void zclSampleThermostat_LcdDisplayHelpMode( void )
   \                     zclSampleThermostat_LcdDisplayHelpMode:
    859          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    860          #ifdef LCD_SUPPORTED
    861            HalLcdWriteString( (char *)sSwHeatSet, HAL_LCD_LINE_1 );
   \   000004                ; Setup parameters for call to function HalLcdWriteString
   \   000004   7901         MOV     R1,#0x1
   \   000006   7A..         MOV     R2,#sSwHeatSet & 0xff
   \   000008   7B..         MOV     R3,#(sSwHeatSet >> 8) & 0xff
   \   00000A   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    862            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
   \   00000D                ; Setup parameters for call to function HalLcdWriteString
   \   00000D   7902         MOV     R1,#0x2
   \   00000F   7A..         MOV     R2,#sSwEZMode & 0xff
   \   000011   7B..         MOV     R3,#(sSwEZMode >> 8) & 0xff
   \   000013   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    863            HalLcdWriteString( (char *)sSwCoolSet, HAL_LCD_LINE_3 );
   \   000016                ; Setup parameters for call to function HalLcdWriteString
   \   000016   7903         MOV     R1,#0x3
   \   000018   7A..         MOV     R2,#sSwCoolSet & 0xff
   \   00001A   7B..         MOV     R3,#(sSwCoolSet >> 8) & 0xff
   \   00001C   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    864          #endif
    865          }
   \   00001F   80..         SJMP    ??Subroutine32_0
    866          
    867          /*********************************************************************
    868           * @fn      zclSampleThermostat_LcdDisplayHeatMode
    869           *
    870           * @brief   Called to display the heating setpoint temperature on the LCD.
    871           *
    872           * @param   none
    873           *
    874           * @return  none
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          void zclSampleThermostat_LcdDisplayHeatMode( void )
   \                     zclSampleThermostat_LcdDisplayHeatMode:
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    878          #ifdef LCD_SUPPORTED
    879            char sDisplayTemp[16];
    880          
    881            osal_memcpy( sDisplayTemp, "HEAT TEMP: ", 11 );
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A   75....       MOV     ?V0,#`?<Constant "HEAT TEMP: ">` & 0xff
   \   00000D   75....       MOV     ?V1,#(`?<Constant "HEAT TEMP: ">` >> 8) & 0xff
   \   000010   75..00       MOV     ?V2,#0x0
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000018   7C0B         MOV     R4,#0xb
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7403         MOV     A,#0x3
   \   00001E   12....       LCALL   ?XSTACK_DISP101_8
   \   000021   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000024   7403         MOV     A,#0x3
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
    882            _ltoa( ( zclSampleThermostat_OccupiedHeatingSetpoint / 100 ), (void *)(&sDisplayTemp[11]), 10 ); // only use whole number
   \   000029                ; Setup parameters for call to function _ltoa
   \   000029   740B         MOV     A,#0xb
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   8582..       MOV     ?V0,DPL
   \   000031   8583..       MOV     ?V1,DPH
   \   000034   78..         MOV     R0,#?V0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   90....       MOV     DPTR,#zclSampleThermostat_OccupiedHeatingSetpoint
   \   00003C                REQUIRE ?Subroutine1
   \   00003C                ; // Fall through to label ?Subroutine1
    883            osal_memcpy( &sDisplayTemp[13], "C", 2 );
    884          
    885            HalLcdWriteString( (char *)sDisplayTemp, HAL_LCD_LINE_1 );
    886            HalLcdWriteString( (char *)sTempLine2, HAL_LCD_LINE_2 );
    887            HalLcdWriteString( (char *)sTempLine3, HAL_LCD_LINE_3 );
    888          #endif
    889          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   12....       LCALL   ?S_DIV_MOD
   \   000006   E8           MOV     A,R0
   \   000007   FA           MOV     R2,A
   \   000008   E9           MOV     A,R1
   \   000009   FB           MOV     R3,A
   \   00000A   33           RLC     A
   \   00000B   95E0         SUBB    A,0xE0 /* A   */
   \   00000D   FC           MOV     R4,A
   \   00000E   FD           MOV     R5,A
   \   00000F   790A         MOV     R1,#0xa
   \   000011   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?DEALLOC_XSTACK8
   \   000019                ; Setup parameters for call to function osal_memcpy
   \   000019                ; Setup parameters for call to function osal_memcpy
   \   000019   75....       MOV     ?V0,#`?<Constant "C">` & 0xff
   \   00001C   75....       MOV     ?V1,#(`?<Constant "C">` >> 8) & 0xff
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000024   7C02         MOV     R4,#0x2
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7410         MOV     A,#0x10
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   AA82         MOV     R2,DPL
   \   00002F   AB83         MOV     R3,DPH
   \   000031   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039                ; Setup parameters for call to function HalLcdWriteString
   \   000039                ; Setup parameters for call to function HalLcdWriteString
   \   000039   7901         MOV     R1,#0x1
   \   00003B   AA..         MOV     R2,?XSP + 0
   \   00003D   AB..         MOV     R3,?XSP + 1
   \   00003F   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000042                ; Setup parameters for call to function HalLcdWriteString
   \   000042                ; Setup parameters for call to function HalLcdWriteString
   \   000042   7902         MOV     R1,#0x2
   \   000044   7A..         MOV     R2,#sTempLine2 & 0xff
   \   000046   7B..         MOV     R3,#(sTempLine2 >> 8) & 0xff
   \   000048   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00004B                ; Setup parameters for call to function HalLcdWriteString
   \   00004B                ; Setup parameters for call to function HalLcdWriteString
   \   00004B   7903         MOV     R1,#0x3
   \   00004D   7A..         MOV     R2,#sTempLine3 & 0xff
   \   00004F   7B..         MOV     R3,#(sTempLine3 >> 8) & 0xff
   \   000051                REQUIRE ??Subroutine33_0
   \   000051                ; // Fall through to label ??Subroutine33_0
    890          
    891          /*********************************************************************
    892           * @fn      zclSampleThermostat_LcdDisplayCoolMode
    893           *
    894           * @brief   Called to display the cooling setpoint temperature on the LCD.
    895           *
    896           * @param   none
    897           *
    898           * @return  none
    899           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    900          void zclSampleThermostat_LcdDisplayCoolMode( void )
   \                     zclSampleThermostat_LcdDisplayCoolMode:
    901          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    902          #ifdef LCD_SUPPORTED
    903            char sDisplayTemp[16];
    904          
    905            osal_memcpy(sDisplayTemp, "COOL TEMP: ", 11);
   \   00000A                ; Setup parameters for call to function osal_memcpy
   \   00000A   75....       MOV     ?V0,#`?<Constant "COOL TEMP: ">` & 0xff
   \   00000D   75....       MOV     ?V1,#(`?<Constant "COOL TEMP: ">` >> 8) & 0xff
   \   000010   75..00       MOV     ?V2,#0x0
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000018   7C0B         MOV     R4,#0xb
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7403         MOV     A,#0x3
   \   00001E   12....       LCALL   ?XSTACK_DISP101_8
   \   000021   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000024   7403         MOV     A,#0x3
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
    906            _ltoa( ( zclSampleThermostat_OccupiedCoolingSetpoint / 100 ), (void *)(&sDisplayTemp[11]), 10 ); // only use whole number
   \   000029                ; Setup parameters for call to function _ltoa
   \   000029   740B         MOV     A,#0xb
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   8582..       MOV     ?V0,DPL
   \   000031   8583..       MOV     ?V1,DPH
   \   000034   78..         MOV     R0,#?V0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   90....       MOV     DPTR,#zclSampleThermostat_OccupiedCoolingSetpoint
   \   00003C   02....       LJMP    ?Subroutine1 & 0xFFFF
    907            osal_memcpy( &sDisplayTemp[13], "C", 2 );
    908          
    909            HalLcdWriteString( (char *)sDisplayTemp, HAL_LCD_LINE_1 );
    910            HalLcdWriteString( (char *)sTempLine2, HAL_LCD_LINE_2 );
    911            HalLcdWriteString( (char *)sTempLine3, HAL_LCD_LINE_3 );
    912          #endif
    913          }
    914          
    915          /*********************************************************************
    916           * @fn      zclSampleThermostat_ProcessIdentifyTimeChange
    917           *
    918           * @brief   Called to process any change to the IdentifyTime attribute.
    919           *
    920           * @param   none
    921           *
    922           * @return  none
    923           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    924          static void zclSampleThermostat_ProcessIdentifyTimeChange( void )
   \                     zclSampleThermostat_ProcessIdentifyTimeChange:
    925          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    926            if ( zclSampleThermostat_IdentifyTime > 0 )
   \   000004   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000007   6026         JZ      ??zclSampleThermostat_ProcessIdentifyTimeChange_1
    927            {
    928              osal_start_timerEx( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   90....       MOV     DPTR,#__Constant_3e8
   \   00000C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7B00         MOV     R3,#0x0
   \   000013   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
    929              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000020                ; Setup parameters for call to function HalLedBlink
   \   000020   7CE8         MOV     R4,#-0x18
   \   000022   7D03         MOV     R5,#0x3
   \   000024   7B05         MOV     R3,#0x5
   \   000026   7AFF         MOV     R2,#-0x1
   \   000028   7908         MOV     R1,#0x8
   \   00002A   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00002D   801D         SJMP    ??zclSampleThermostat_ProcessIdentifyTimeChange_2
    930            }
    931            else
    932            {
    933              if ( zclSampleThermostat_OnOff )
   \                     ??zclSampleThermostat_ProcessIdentifyTimeChange_1:
   \   00002F   90....       MOV     DPTR,#zclSampleThermostat_OnOff
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6004         JZ      ??zclSampleThermostat_ProcessIdentifyTimeChange_3
    934              {
    935                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   000035                ; Setup parameters for call to function HalLedSet
   \   000035   7A01         MOV     R2,#0x1
   \   000037   8002         SJMP    ??zclSampleThermostat_ProcessIdentifyTimeChange_4
    936              }
    937              else
    938              {
    939                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zclSampleThermostat_ProcessIdentifyTimeChange_3:
   \   000039                ; Setup parameters for call to function HalLedSet
   \   000039   7A00         MOV     R2,#0x0
   \                     ??zclSampleThermostat_ProcessIdentifyTimeChange_4:
   \   00003B   7908         MOV     R1,#0x8
   \   00003D   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    940              }
    941          
    942              osal_stop_timerEx( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_IDENTIFY_TIMEOUT_EVT );
   \   000040                ; Setup parameters for call to function osal_stop_timerEx
   \   000040   7A01         MOV     R2,#0x1
   \   000042   7B00         MOV     R3,#0x0
   \   000044   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    943            }
    944          }
   \                     ??zclSampleThermostat_ProcessIdentifyTimeChange_2:
   \   00004C   02....       LJMP    ??Subroutine32_0 & 0xFFFF
    945          
    946          /*********************************************************************
    947           * @fn      zclSampleThermostat_ProcessAppMsg
    948           *
    949           * @brief   Process DoorLock messages
    950           *
    951           * @param   srcEP - Sending Apps endpoint
    952           * @param   len - number of bytes
    953           * @param   msg - pointer to message
    954           *          0 - lo byte destination address
    955           *          1 - hi byte destination address
    956           *          2 - destination endpoint
    957           *          3 - lo byte cluster ID
    958           *          4 - hi byte cluster ID
    959           *          5 - message length
    960           *          6 - destination address mode (first byte of data)
    961           *          7 - zcl command frame
    962           *
    963           * @return  none
    964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          static void zclSampleThermostat_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg )
   \                     zclSampleThermostat_ProcessAppMsg:
    966          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
    967            afAddrType_t dstAddr;
    968            uint16 clusterID;
    969            zclFrameHdr_t hdr;
    970            uint8 *pData;
    971            uint8 dataLen;
    972          
    973            dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FA           MOV     R2,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   EA           MOV     A,R2
   \   00001A   F8           MOV     R0,A
   \   00001B   740B         MOV     A,#0xb
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E8           MOV     A,R0
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   E9           MOV     A,R1
   \   000024   F0           MOVX    @DPTR,A
    974            msg += 2;
    975            dstAddr.endPoint = *msg++;
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C0E0         PUSH    A
   \   00002E   7414         MOV     A,#0x14
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   D0E0         POP     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   EE           MOV     A,R6
   \   000037   2403         ADD     A,#0x3
   \   000039   FE           MOV     R6,A
   \   00003A   5001         JNC     ??zclSampleThermostat_ProcessAppMsg_0
   \   00003C   0F           INC     R7
    976            clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??zclSampleThermostat_ProcessAppMsg_0:
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FA           MOV     R2,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   E4           CLR     A
   \   000047   C8           XCH     A,R0
   \   000048   F9           MOV     R1,A
   \   000049   EA           MOV     A,R2
   \   00004A   28           ADD     A,R0
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   E4           CLR     A
   \   00004E   39           ADDC    A,R1
   \   00004F   F5..         MOV     ?V1,A
    977            msg += 2;
    978            dataLen = *msg++; // Length of message (Z-Tool can support up to 255 octets)
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F5..         MOV     ?V4,A
    979            dstAddr.addrMode = (afAddrMode_t)(*msg++);
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C0E0         PUSH    A
   \   000064   7413         MOV     A,#0x13
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   D0E0         POP     A
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   EE           MOV     A,R6
   \   00006D   2404         ADD     A,#0x4
   \   00006F   FE           MOV     R6,A
   \   000070   5001         JNC     ??zclSampleThermostat_ProcessAppMsg_1
   \   000072   0F           INC     R7
    980            dataLen--; // Length of ZCL frame
    981          
    982            // Begining of ZCL frame
    983            pData = zclParseHdr( &hdr, msg );
   \                     ??zclSampleThermostat_ProcessAppMsg_1:
   \   000073                ; Setup parameters for call to function zclParseHdr
   \   000073   FC           MOV     R4,A
   \   000074   EF           MOV     A,R7
   \   000075   FD           MOV     R5,A
   \   000076   AA..         MOV     R2,?XSP + 0
   \   000078   AB..         MOV     R3,?XSP + 1
   \   00007A   12....       LCALL   `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   00007D   8A..         MOV     ?V6,R2
   \   00007F   8B..         MOV     ?V7,R3
    984            dataLen -= (uint8)( pData - msg );
   \   000081   A8..         MOV     R0,?V6
   \   000083   74FF         MOV     A,#-0x1
   \   000085   25..         ADD     A,?V4
   \   000087   C3           CLR     C
   \   000088   98           SUBB    A,R0
   \   000089   2E           ADD     A,R6
   \   00008A   F5..         MOV     ?V4,A
    985          
    986            // Is this a foundation type message?
    987            if ( zcl_ProfileCmd( hdr.fc.type ) )
   \   00008C   85..82       MOV     DPL,?XSP + 0
   \   00008F   85..83       MOV     DPH,?XSP + 1
   \   000092   E0           MOVX    A,@DPTR
   \   000093   C4           SWAP    A
   \   000094   540F         ANL     A,#0xf
   \   000096   5401         ANL     A,#0x1
   \   000098   F9           MOV     R1,A
   \   000099   75..00       MOV     ?V5,#0x0
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   5403         ANL     A,#0x3
   \   00009F   6003         JZ      $+5
   \   0000A1   02....       LJMP    ??zclSampleThermostat_ProcessAppMsg_2 & 0xFFFF
    988            {
    989              if ( hdr.fc.manuSpecific )
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   5404         ANL     A,#0x4
   \   0000A7   6032         JZ      ??zclSampleThermostat_ProcessAppMsg_3
    990              {
    991                // We don't support any manufacturer specific command -- just forward it.
    992                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
    993                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
   \   0000A9                ; Setup parameters for call to function zcl_SendCommand
   \   0000A9   78..         MOV     R0,#?V6
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   78..         MOV     R0,#?V4
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   7408         MOV     A,#0x8
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F5..         MOV     ?V3,A
   \   0000BB   78..         MOV     R0,#?V3
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C0   7407         MOV     A,#0x7
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C8   E9           MOV     A,R1
   \   0000C9   F5..         MOV     ?V3,A
   \   0000CB   78..         MOV     R0,#?V3
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   75..00       MOV     ?V3,#0x0
   \   0000D3   78..         MOV     R0,#?V3
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   02....       LJMP    ??zclSampleThermostat_ProcessAppMsg_4 & 0xFFFF
    994              }
    995              else
    996              {
    997                zclParseCmd_t cmd;
    998          
    999                cmd.endpoint = srcEP;
   \                     ??zclSampleThermostat_ProcessAppMsg_3:
   \   0000DB   7406         MOV     A,#0x6
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E5..         MOV     A,?V2
   \   0000E2   F0           MOVX    @DPTR,A
   1000                cmd.dataLen = dataLen;
   \   0000E3   7407         MOV     A,#0x7
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   E5..         MOV     A,?V4
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E4           CLR     A
   \   0000ED   F0           MOVX    @DPTR,A
   1001                cmd.pData = pData;
   \   0000EE   7409         MOV     A,#0x9
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   E8           MOV     A,R0
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   EB           MOV     A,R3
   \   0000F7   F0           MOVX    @DPTR,A
   1002          
   1003                zclSampleThermostat_ProcessFoundationMsg( &dstAddr, clusterID, &hdr, &cmd );
   \   0000F8                ; Setup parameters for call to function zclSampleThermostat_ProcessFoundationMsg
   \   0000F8   7406         MOV     A,#0x6
   \   0000FA   12....       LCALL   ?XSTACK_DISP100_8
   \   0000FD   88..         MOV     ?V4,R0
   \   0000FF   89..         MOV     ?V5,R1
   \   000101   78..         MOV     R0,#?V4
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   7402         MOV     A,#0x2
   \   000108   12....       LCALL   ?XSTACK_DISP100_8
   \   00010B   88..         MOV     ?V4,R0
   \   00010D   89..         MOV     ?V5,R1
   \   00010F   78..         MOV     R0,#?V4
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000114   AC..         MOV     R4,?V0
   \   000116   AD..         MOV     R5,?V1
   \   000118   740F         MOV     A,#0xf
   \   00011A   12....       LCALL   ?XSTACK_DISP101_8
   \   00011D   12....       LCALL   `??zclSampleThermostat_ProcessFoundationMsg::?re`; Banked call to: zclSampleThermostat_ProcessFoundationMsg
   \   000120   7404         MOV     A,#0x4
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
   \   000125   805C         SJMP    ??zclSampleThermostat_ProcessAppMsg_5
   1004              }
   1005            }
   1006            else
   1007            {
   1008              // Nope, must be specific to the cluster ID
   1009              if ( hdr.fc.manuSpecific )
   \                     ??zclSampleThermostat_ProcessAppMsg_2:
   \   000127   E0           MOVX    A,@DPTR
   \   000128   5404         ANL     A,#0x4
   \   00012A   6057         JZ      ??zclSampleThermostat_ProcessAppMsg_5
   1010              {
   1011                // We don't support any manufacturer specific command -- just forward it.
   1012                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1013                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
   \   00012C                ; Setup parameters for call to function zcl_SendCommand
   \   00012C   78..         MOV     R0,#?V6
   \   00012E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000131   78..         MOV     R0,#?V4
   \   000133   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000136   7408         MOV     A,#0x8
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F5..         MOV     ?V3,A
   \   00013E   78..         MOV     R0,#?V3
   \   000140   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000143   7407         MOV     A,#0x7
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00014B   E9           MOV     A,R1
   \   00014C   F5..         MOV     ?V3,A
   \   00014E   78..         MOV     R0,#?V3
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000153   75..00       MOV     ?V3,#0x0
   \   000156   78..         MOV     R0,#?V3
   \   000158   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015B   75..01       MOV     ?V3,#0x1
   \                     ??zclSampleThermostat_ProcessAppMsg_4:
   \   00015E   78..         MOV     R0,#?V3
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000163   740F         MOV     A,#0xf
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F5..         MOV     ?V3,A
   \   00016B   78..         MOV     R0,#?V3
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000170   AC..         MOV     R4,?V0
   \   000172   AD..         MOV     R5,?V1
   \   000174   7416         MOV     A,#0x16
   \   000176   12....       LCALL   ?XSTACK_DISP101_8
   \   000179   A9..         MOV     R1,?V2
   \   00017B   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00017E   740B         MOV     A,#0xb
   \   000180   12....       LCALL   ?DEALLOC_XSTACK8
   1014              }
   1015            }
   1016          }
   \                     ??zclSampleThermostat_ProcessAppMsg_5:
   \   000183   7417         MOV     A,#0x17
   \   000185   12....       LCALL   ?DEALLOC_XSTACK8
   \   000188                REQUIRE ?Subroutine2
   \   000188                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1017          
   1018          /*********************************************************************
   1019           * @fn      zclSampleThermostat_ProcessFoundationMsg
   1020           *
   1021           * @brief   Process Foundation message
   1022           *
   1023           * @param   srcEP - Sending Apps endpoint
   1024           * @param   dstAddr - where to send the request
   1025           * @param   clusterID - real cluster ID
   1026           * @param   hdr - pointer to the message header
   1027           * @param   len - length of the received message
   1028           * @param   data - received message
   1029           *
   1030           * @return  none
   1031           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1032          static void zclSampleThermostat_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
   \                     zclSampleThermostat_ProcessFoundationMsg:
   1033                                                          zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd )
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V3,A
   1035          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT) || defined(ZCL_DISCOVER)
   1036            void *cmd;
   1037          #endif
   1038          
   1039            switch ( hdr->commandID )
   \   000019   85..82       MOV     DPL,?V2
   \   00001C   F583         MOV     DPH,A
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   E5..         MOV     A,?V2
   \   000027   2404         ADD     A,#0x4
   \   000029   F5..         MOV     ?V4,A
   \   00002B   E4           CLR     A
   \   00002C   35..         ADDC    A,?V3
   \   00002E   F5..         MOV     ?V5,A
   \   000030   7414         MOV     A,#0x14
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V6,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V7,A
   \   00003C   E9           MOV     A,R1
   \   00003D   6028         JZ      ??zclSampleThermostat_ProcessFoundationMsg_0
   \   00003F   24FE         ADD     A,#-0x2
   \   000041   6060         JZ      ??zclSampleThermostat_ProcessFoundationMsg_1
   \   000043   14           DEC     A
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_2 & 0xFFFF
   \   000049   24FE         ADD     A,#-0x2
   \   00004B   7003         JNZ     $+5
   \   00004D   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_3 & 0xFFFF
   \   000050   14           DEC     A
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_4 & 0xFFFF
   \   000056   24FE         ADD     A,#-0x2
   \   000058   7003         JNZ     $+5
   \   00005A   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_5 & 0xFFFF
   \   00005D   24FE         ADD     A,#-0x2
   \   00005F   7003         JNZ     $+5
   \   000061   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_6 & 0xFFFF
   \   000064   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_7 & 0xFFFF
   1040            {
   1041          #ifdef ZCL_READ
   1042              case ZCL_CMD_READ:
   1043                cmd = zclParseInReadCmd( pParseCmd );
   \                     ??zclSampleThermostat_ProcessFoundationMsg_0:
   \   000067                ; Setup parameters for call to function zclParseInReadCmd
   \   000067   AA..         MOV     R2,?V6
   \   000069   AB..         MOV     R3,?V7
   \   00006B   12....       LCALL   `??zclParseInReadCmd::?relay`; Banked call to: zclParseInReadCmd
   \   00006E   8A..         MOV     ?V6,R2
   \   000070   8B..         MOV     ?V7,R3
   1044                if ( cmd )
   \   000072   EA           MOV     A,R2
   \   000073   45..         ORL     A,?V7
   \   000075   7003         JNZ     $+5
   \   000077   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_8 & 0xFFFF
   1045                {
   1046                  zcl_SendRead( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclReadCmd_t *)cmd,
   1047                                ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   00007A                ; Setup parameters for call to function zcl_SendRead
   \   00007A   12....       LCALL   ?Subroutine14 & 0xFFFF
   1048                  osal_mem_free( cmd );
   1049                }
   \                     ??CrossCallReturnLabel_24:
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   75..00       MOV     ?V2,#0x0
   \   000089   78..         MOV     R0,#?V2
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008E   78..         MOV     R0,#?V6
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   AC..         MOV     R4,?V0
   \   000095   AD..         MOV     R5,?V1
   \   000097   EE           MOV     A,R6
   \   000098   FA           MOV     R2,A
   \   000099   EF           MOV     A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   7908         MOV     R1,#0x8
   \   00009D   12....       LCALL   `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   0000A0   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_9 & 0xFFFF
   1050                break;
   1051          #endif // ZCL_READ
   1052          
   1053          #ifdef ZCL_WRITE
   1054              case ZCL_CMD_WRITE:
   1055                cmd = zclParseInWriteCmd( pParseCmd );
   \                     ??zclSampleThermostat_ProcessFoundationMsg_1:
   \   0000A3                ; Setup parameters for call to function zclParseInWriteCmd
   \   0000A3   AA..         MOV     R2,?V6
   \   0000A5   AB..         MOV     R3,?V7
   \   0000A7   12....       LCALL   `??zclParseInWriteCmd::?relay`; Banked call to: zclParseInWriteCmd
   \   0000AA   8A..         MOV     ?V6,R2
   \   0000AC   8B..         MOV     ?V7,R3
   1056                if ( cmd )
   \   0000AE   EA           MOV     A,R2
   \   0000AF   45..         ORL     A,?V7
   \   0000B1   7003         JNZ     $+5
   \   0000B3   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_8 & 0xFFFF
   1057                {
   1058                  zcl_SendWrite( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
   1059                                 ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   0000B6                ; Setup parameters for call to function zcl_SendWriteRequest
   \   0000B6   12....       LCALL   ?Subroutine14 & 0xFFFF
   1060                  osal_mem_free( cmd );
   1061                }
   \                     ??CrossCallReturnLabel_25:
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BC   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C2   75..00       MOV     ?V2,#0x0
   \   0000C5   78..         MOV     R0,#?V2
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   75..02       MOV     ?V2,#0x2
   \   0000CD   8056         SJMP    ??zclSampleThermostat_ProcessFoundationMsg_10
   1062                break;
   1063          
   1064              case ZCL_CMD_WRITE_UNDIVIDED:
   1065                cmd = zclParseInWriteCmd( pParseCmd );
   \                     ??zclSampleThermostat_ProcessFoundationMsg_2:
   \   0000CF                ; Setup parameters for call to function zclParseInWriteCmd
   \   0000CF   AA..         MOV     R2,?V6
   \   0000D1   AB..         MOV     R3,?V7
   \   0000D3   12....       LCALL   `??zclParseInWriteCmd::?relay`; Banked call to: zclParseInWriteCmd
   \   0000D6   8A..         MOV     ?V6,R2
   \   0000D8   8B..         MOV     ?V7,R3
   1066                if ( cmd )
   \   0000DA   EA           MOV     A,R2
   \   0000DB   45..         ORL     A,?V7
   \   0000DD   7003         JNZ     $+5
   \   0000DF   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_8 & 0xFFFF
   1067                {
   1068                  zcl_SendWriteUndivided( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
   1069                                          ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   0000E2                ; Setup parameters for call to function zcl_SendWriteRequest
   \   0000E2   12....       LCALL   ?Subroutine14 & 0xFFFF
   1070                  osal_mem_free( cmd );
   1071                }
   \                     ??CrossCallReturnLabel_26:
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E8   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EE   75..00       MOV     ?V2,#0x0
   \   0000F1   78..         MOV     R0,#?V2
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F6   75..03       MOV     ?V2,#0x3
   \   0000F9   802A         SJMP    ??zclSampleThermostat_ProcessFoundationMsg_10
   1072                break;
   1073          
   1074              case ZCL_CMD_WRITE_NO_RSP:
   1075                cmd = zclParseInWriteCmd( pParseCmd );
   \                     ??zclSampleThermostat_ProcessFoundationMsg_3:
   \   0000FB                ; Setup parameters for call to function zclParseInWriteCmd
   \   0000FB   AA..         MOV     R2,?V6
   \   0000FD   AB..         MOV     R3,?V7
   \   0000FF   12....       LCALL   `??zclParseInWriteCmd::?relay`; Banked call to: zclParseInWriteCmd
   \   000102   8A..         MOV     ?V6,R2
   \   000104   8B..         MOV     ?V7,R3
   1076                if ( cmd )
   \   000106   EA           MOV     A,R2
   \   000107   45..         ORL     A,?V7
   \   000109   7003         JNZ     $+5
   \   00010B   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_8 & 0xFFFF
   1077                {
   1078                  zcl_SendWriteNoRsp( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
   1079                                      ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   00010E                ; Setup parameters for call to function zcl_SendWriteRequest
   \   00010E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000114   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011A   75..00       MOV     ?V2,#0x0
   \   00011D   78..         MOV     R0,#?V2
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000122   75..05       MOV     ?V2,#0x5
   \                     ??zclSampleThermostat_ProcessFoundationMsg_10:
   \   000125   78..         MOV     R0,#?V2
   \   000127   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012A   78..         MOV     R0,#?V6
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012F   AC..         MOV     R4,?V0
   \   000131   AD..         MOV     R5,?V1
   \   000133   EE           MOV     A,R6
   \   000134   FA           MOV     R2,A
   \   000135   EF           MOV     A,R7
   \   000136   FB           MOV     R3,A
   \   000137   7908         MOV     R1,#0x8
   \   000139   12....       LCALL   `??zcl_SendWriteRequest::?relay`; Banked call to: zcl_SendWriteRequest
   \   00013C   7406         MOV     A,#0x6
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
   1080                  osal_mem_free( cmd );
   \   000141                ; Setup parameters for call to function osal_mem_free
   \   000141   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_11 & 0xFFFF
   1081                }
   1082                break;
   1083          #endif // ZCL_WRITE
   1084          
   1085          #ifdef ZCL_REPORT
   1086              case ZCL_CMD_CONFIG_REPORT:
   1087                cmd = zclParseInConfigReportCmd( pParseCmd );
   \                     ??zclSampleThermostat_ProcessFoundationMsg_4:
   \   000144                ; Setup parameters for call to function zclParseInConfigReportCmd
   \   000144   AA..         MOV     R2,?V6
   \   000146   AB..         MOV     R3,?V7
   \   000148   12....       LCALL   `??zclParseInConfigReportCmd::?relay`; Banked call to: zclParseInConfigReportCmd
   \   00014B   8A..         MOV     ?V6,R2
   \   00014D   8B..         MOV     ?V7,R3
   1088                if ( cmd )
   \   00014F   EA           MOV     A,R2
   \   000150   45..         ORL     A,?V7
   \   000152   7003         JNZ     $+5
   \   000154   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_8 & 0xFFFF
   1089                {
   1090                  zcl_SendConfigReportCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr,  clusterID, (zclCfgReportCmd_t *)cmd,
   1091                                           ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   000157                ; Setup parameters for call to function zcl_SendConfigReportCmd
   \   000157   12....       LCALL   ?Subroutine14 & 0xFFFF
   1092                  osal_mem_free( cmd );
   1093                }
   \                     ??CrossCallReturnLabel_28:
   \   00015A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000163   75..00       MOV     ?V2,#0x0
   \   000166   78..         MOV     R0,#?V2
   \   000168   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016B   78..         MOV     R0,#?V6
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000170   AC..         MOV     R4,?V0
   \   000172   AD..         MOV     R5,?V1
   \   000174   EE           MOV     A,R6
   \   000175   FA           MOV     R2,A
   \   000176   EF           MOV     A,R7
   \   000177   FB           MOV     R3,A
   \   000178   7908         MOV     R1,#0x8
   \   00017A   12....       LCALL   `??zcl_SendConfigReportCmd::?relay`; Banked call to: zcl_SendConfigReportCmd
   \   00017D   8074         SJMP    ??zclSampleThermostat_ProcessFoundationMsg_9
   1094                break;
   1095          
   1096              case ZCL_CMD_READ_REPORT_CFG:
   1097                cmd = zclParseInReadReportCfgCmd( pParseCmd );
   \                     ??zclSampleThermostat_ProcessFoundationMsg_5:
   \   00017F                ; Setup parameters for call to function zclParseInReadReportCfgCmd
   \   00017F   AA..         MOV     R2,?V6
   \   000181   AB..         MOV     R3,?V7
   \   000183   12....       LCALL   `??zclParseInReadReportCfgCmd::?relay`; Banked call to: zclParseInReadReportCfgCmd
   \   000186   8A..         MOV     ?V6,R2
   \   000188   8B..         MOV     ?V7,R3
   1098                if ( cmd )
   \   00018A   EA           MOV     A,R2
   \   00018B   45..         ORL     A,?V7
   \   00018D   7003         JNZ     $+5
   \   00018F   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_8 & 0xFFFF
   1099                {
   1100                  zcl_SendReadReportCfgCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclReadReportCfgCmd_t *)cmd,
   1101                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   000192                ; Setup parameters for call to function zcl_SendReadReportCfgCmd
   \   000192   12....       LCALL   ?Subroutine14 & 0xFFFF
   1102                  osal_mem_free( cmd );
   1103                }
   \                     ??CrossCallReturnLabel_29:
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000198   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00019B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019E   75..00       MOV     ?V2,#0x0
   \   0001A1   78..         MOV     R0,#?V2
   \   0001A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A6   78..         MOV     R0,#?V6
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AB   AC..         MOV     R4,?V0
   \   0001AD   AD..         MOV     R5,?V1
   \   0001AF   EE           MOV     A,R6
   \   0001B0   FA           MOV     R2,A
   \   0001B1   EF           MOV     A,R7
   \   0001B2   FB           MOV     R3,A
   \   0001B3   7908         MOV     R1,#0x8
   \   0001B5   12....       LCALL   `??zcl_SendReadReportCfgCmd::?relay`; Banked call to: zcl_SendReadReportCfgCmd
   \   0001B8   8039         SJMP    ??zclSampleThermostat_ProcessFoundationMsg_9
   1104                break;
   1105          
   1106              case ZCL_CMD_REPORT:
   1107                cmd = zclParseInReportCmd( pParseCmd );
   \                     ??zclSampleThermostat_ProcessFoundationMsg_6:
   \   0001BA                ; Setup parameters for call to function zclParseInReportCmd
   \   0001BA   AA..         MOV     R2,?V6
   \   0001BC   AB..         MOV     R3,?V7
   \   0001BE   12....       LCALL   `??zclParseInReportCmd::?relay`; Banked call to: zclParseInReportCmd
   \   0001C1   8A..         MOV     ?V6,R2
   \   0001C3   8B..         MOV     ?V7,R3
   1108                if ( cmd )
   \   0001C5   EA           MOV     A,R2
   \   0001C6   45..         ORL     A,?V7
   \   0001C8   7003         JNZ     $+5
   \   0001CA   02....       LJMP    ??zclSampleThermostat_ProcessFoundationMsg_8 & 0xFFFF
   1109                {
   1110                  zcl_SendReportCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclReportCmd_t *)cmd,
   1111                                     ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   0001CD                ; Setup parameters for call to function zcl_SendReportCmd
   \   0001CD   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0001D0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D3   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001D6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D9   75..00       MOV     ?V2,#0x0
   \   0001DC   78..         MOV     R0,#?V2
   \   0001DE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E1   78..         MOV     R0,#?V6
   \   0001E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E6   AC..         MOV     R4,?V0
   \   0001E8   AD..         MOV     R5,?V1
   \   0001EA   EE           MOV     A,R6
   \   0001EB   FA           MOV     R2,A
   \   0001EC   EF           MOV     A,R7
   \   0001ED   FB           MOV     R3,A
   \   0001EE   7908         MOV     R1,#0x8
   \   0001F0   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \                     ??zclSampleThermostat_ProcessFoundationMsg_9:
   \   0001F3   7405         MOV     A,#0x5
   \   0001F5   12....       LCALL   ?DEALLOC_XSTACK8
   1112                  osal_mem_free( cmd );
   \   0001F8                ; Setup parameters for call to function osal_mem_free
   \                     ??zclSampleThermostat_ProcessFoundationMsg_11:
   \   0001F8   AA..         MOV     R2,?V6
   \   0001FA   AB..         MOV     R3,?V7
   \   0001FC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001FF   8051         SJMP    ??zclSampleThermostat_ProcessFoundationMsg_8
   1113                }
   1114                break;
   1115          #endif // ZCL_REPORT
   1116          #ifdef ZCL_DISCOVER
   1117              case ZCL_CMD_DISCOVER_ATTRS:
   1118                cmd = zclParseInDiscAttrsCmd( pParseCmd );
   1119                if ( cmd )
   1120                {
   1121                  zcl_SendDiscoverAttrsCmd( SAMPLETHERMOSTAT_ENDPOINT, dstAddr, clusterID, (zclDiscoverAttrsCmd_t *)cmd,
   1122                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   1123                  osal_mem_free( cmd );
   1124                }
   1125                break;
   1126          #endif // ZCL_DISCOVER
   1127          
   1128              default:
   1129                // Unsupported command -- just forward it.
   1130                zcl_SendCommand( pParseCmd->endpoint, dstAddr, clusterID, hdr->commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1131                                 hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, pParseCmd->dataLen, pParseCmd->pData );
   \                     ??zclSampleThermostat_ProcessFoundationMsg_7:
   \   000201                ; Setup parameters for call to function zcl_SendCommand
   \   000201   85..82       MOV     DPL,?V6
   \   000204   85..83       MOV     DPH,?V7
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00020D   85..82       MOV     DPL,?V6
   \   000210   85..83       MOV     DPH,?V7
   \   000213   A3           INC     DPTR
   \   000214   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000217   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00021A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00021D   E4           CLR     A
   \   00021E   F5..         MOV     ?V4,A
   \   000220   F5..         MOV     ?V5,A
   \   000222   78..         MOV     R0,#?V4
   \   000224   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000227   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00022A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00022D   75..00       MOV     ?V2,#0x0
   \   000230   78..         MOV     R0,#?V2
   \   000232   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000235   78..         MOV     R0,#?V2
   \   000237   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00023A   E9           MOV     A,R1
   \   00023B   F5..         MOV     ?V2,A
   \   00023D   78..         MOV     R0,#?V2
   \   00023F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000242   85..82       MOV     DPL,?V6
   \   000245   85..83       MOV     DPH,?V7
   \   000248   E0           MOVX    A,@DPTR
   \   000249   F9           MOV     R1,A
   \   00024A   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00024D   740B         MOV     A,#0xb
   \   00024F   12....       LCALL   ?DEALLOC_XSTACK8
   1132                break;
   1133            }
   1134          }
   \                     ??zclSampleThermostat_ProcessFoundationMsg_8:
   \   000252   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?V4
   \   000003   85..83       MOV     DPH,?V5
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V4,A
   \   000009   78..         MOV     R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   C4           SWAP    A
   \   000008   540F         ANL     A,#0xf
   \   00000A   5401         ANL     A,#0x1
   \   00000C   F5..         MOV     ?V2,A
   \   00000E   78..         MOV     R0,#?V2
   \   000010   22           RET
   1135          
   1136          /*********************************************************************
   1137           * @fn      zclSampleThermostat_BasicResetCB
   1138           *
   1139           * @brief   Callback from the ZCL General Cluster Library
   1140           *          to set all the Basic Cluster attributes to default values.
   1141           *
   1142           * @param   none
   1143           *
   1144           * @return  none
   1145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1146          static void zclSampleThermostat_BasicResetCB( void )
   \                     zclSampleThermostat_BasicResetCB:
   1147          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1148            // Put device back to factory default settings
   1149            zgWriteStartupOptions( ZG_STARTUP_SET, 3 );   // bit set both default configuration and default network
   \   000004                ; Setup parameters for call to function zgWriteStartupOptions
   \   000004   7A03         MOV     R2,#0x3
   \   000006   79FF         MOV     R1,#-0x1
   \   000008   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1150          
   1151            // restart device
   1152            MT_SysCommandProcessing( aProcessCmd );
   \   00000B                ; Setup parameters for call to function MT_SysCommandProcessing
   \   00000B   7A..         MOV     R2,#aProcessCmd & 0xff
   \   00000D   7B..         MOV     R3,#(aProcessCmd >> 8) & 0xff
   \   00000F   12....       LCALL   `??MT_SysCommandProcessing::?relay`; Banked call to: MT_SysCommandProcessing
   1153          }
   \   000012   02....       LJMP    ??Subroutine32_0 & 0xFFFF
   1154          
   1155          /*********************************************************************
   1156           * @fn      zclSampleThermostat_IdentifyCB
   1157           *
   1158           * @brief   Callback from the ZCL General Cluster Library when
   1159           *          it received an Identity Command for this application.
   1160           *
   1161           * @param   srcAddr - source address and endpoint of the response message
   1162           * @param   identifyTime - the number of seconds to identify yourself
   1163           *
   1164           * @return  none
   1165           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1166          static void zclSampleThermostat_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleThermostat_IdentifyCB:
   1167          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1168            zclSampleThermostat_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00000D   90....       MOV     DPTR,#zclSampleThermostat_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   1169            zclSampleThermostat_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleThermostat_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   ??zclSampleThermostat_ProcessIdentifyTimeChange; Banked call to: zclSampleThermostat_ProcessIdentifyTimeChange
   1170          }
   \   000018   02....       LJMP    ??Subroutine32_0 & 0xFFFF
   1171          
   1172          /*********************************************************************
   1173           * @fn      zclSampleThermostat_IdentifyQueryRspCB
   1174           *
   1175           * @brief   Callback from the ZCL General Cluster Library when
   1176           *          it received an Identity Query Response Command for this application.
   1177           *
   1178           * @param   srcAddr - requestor's address
   1179           * @param   timeout - number of seconds to identify yourself (valid for query response)
   1180           *
   1181           * @return  none
   1182           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A                REQUIRE ??Subroutine31_0
   \   00000A                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine32_0
   \   000003                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1183          static void zclSampleThermostat_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleThermostat_IdentifyQueryRspCB:
   1184          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1185            (void)pRsp;
   1186          #ifdef ZCL_EZMODE
   1187            {
   1188              zclEZMode_ActionData_t data;
   1189              data.pIdentifyQueryRsp = pRsp;
   \   000009   12....       LCALL   ?Subroutine8 & 0xFFFF
   1190              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
   1191            }
   \                     ??CrossCallReturnLabel_63:
   \   00000C   7904         MOV     R1,#0x4
   \   00000E   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   1192          #endif
   1193          }
   \   000011   7402         MOV     A,#0x2
   \   000013   02....       LJMP    ?Subroutine0 & 0xFFFF
   1194          
   1195          /******************************************************************************
   1196           *
   1197           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1198           *
   1199           *****************************************************************************/
   1200          
   1201          /*********************************************************************
   1202           * @fn      zclSampleThermostat_ProcessIncomingMsg
   1203           *
   1204           * @brief   Process ZCL Foundation incoming message
   1205           *
   1206           * @param   pInMsg - pointer to the received message
   1207           *
   1208           * @return  none
   1209           */
   1210          static void zclSampleThermostat_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
   1211          {
   1212            switch ( pInMsg->zclHdr.commandID )
   1213            {
   1214          #ifdef ZCL_READ
   1215              case ZCL_CMD_READ_RSP:
   1216                zclSampleThermostat_ProcessInReadRspCmd( pInMsg );
   1217                break;
   1218          #endif
   1219          #ifdef ZCL_WRITE
   1220              case ZCL_CMD_WRITE_RSP:
   1221                zclSampleThermostat_ProcessInWriteRspCmd( pInMsg );
   1222                break;
   1223          #endif
   1224          #ifdef ZCL_REPORT
   1225              case ZCL_CMD_CONFIG_REPORT:
   1226                //zclSampleThermostat_ProcessInConfigReportCmd( pInMsg );
   1227                break;
   1228          
   1229              case ZCL_CMD_CONFIG_REPORT_RSP:
   1230                //zclSampleThermostat_ProcessInConfigReportRspCmd( pInMsg );
   1231                break;
   1232          
   1233              case ZCL_CMD_READ_REPORT_CFG:
   1234                //zclSampleThermostat_ProcessInReadReportCfgCmd( pInMsg );
   1235                break;
   1236          
   1237              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1238                //zclSampleThermostat_ProcessInReadReportCfgRspCmd( pInMsg );
   1239                break;
   1240          
   1241              case ZCL_CMD_REPORT:
   1242                zclSampleThermostat_ProcessInReportCmd( pInMsg );
   1243                break;
   1244          #endif
   1245              case ZCL_CMD_DEFAULT_RSP:
   1246                zclSampleThermostat_ProcessInDefaultRspCmd( pInMsg );
   1247                break;
   1248          
   1249              default:
   1250                break;
   1251            }
   1252          
   1253            if ( pInMsg->attrCmd )
   1254            {
   1255              osal_mem_free( pInMsg->attrCmd );
   1256            }
   1257          }
   1258          
   1259          #ifdef ZCL_READ
   1260          /*********************************************************************
   1261           * @fn      zclSampleThermostat_ProcessInReadRspCmd
   1262           *
   1263           * @brief   Process the "Profile" Read Response Command
   1264           *
   1265           * @param   pInMsg - incoming message to process
   1266           *
   1267           * @return  none
   1268           */
   1269          static uint8 zclSampleThermostat_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1270          {
   1271            zclReadRspCmd_t *readRspCmd;
   1272            uint8 i;
   1273          
   1274            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1275            for (i = 0; i < readRspCmd->numAttr; i++)
   1276            {
   1277              // Notify the originator of the results of the original read attributes
   1278              // attempt and, for each successfull request, the value of the requested
   1279              // attribute
   1280            }
   1281          
   1282            return ( TRUE );
   1283          }
   1284          #endif // ZCL_READ
   1285          
   1286          #ifdef ZCL_WRITE
   1287          /*********************************************************************
   1288           * @fn      zclSampleThermostat_ProcessInWriteRspCmd
   1289           *
   1290           * @brief   Process the "Profile" Write Response Command
   1291           *
   1292           * @param   pInMsg - incoming message to process
   1293           *
   1294           * @return  none
   1295           */
   1296          static uint8 zclSampleThermostat_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1297          {
   1298            zclWriteRspCmd_t *writeRspCmd;
   1299            uint8 i;
   1300          
   1301            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1302            for (i = 0; i < writeRspCmd->numAttr; i++)
   1303            {
   1304              // Notify the device of the results of the its original write attributes
   1305              // command.
   1306            }
   1307          
   1308            return ( TRUE );
   1309          }
   1310          #endif // ZCL_WRITE
   1311          
   1312          #ifdef ZCL_REPORT
   1313          /*********************************************************************
   1314           * @fn      zclSampleThermostat_ProcessInReportCmd
   1315           *
   1316           * @brief   Process the "Profile" Report Command
   1317           *
   1318           * @param   pInMsg - incoming message to process
   1319           *
   1320           * @return  none
   1321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1322          static void zclSampleThermostat_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleThermostat_ProcessInReportCmd:
   1323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV     A,#-0x26
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V8,R2
   \   00000C   8B..         MOV     ?V9,R3
   1324          	uint8 src_EndPoint;
   1325          	
   1326            zclReportCmd_t *pInReportCmd;
   1327          	
   1328            zclReportCmd_t *pOutDemandReport;
   1329            uint8 outDemandBuffer[sizeof( zclReportCmd_t ) + ( 3 * sizeof( zclReport_t ) )];
   1330            bool send = TRUE;
   1331          
   1332            pInReportCmd = (zclReportCmd_t *)pInMsg->attrCmd;
   \   00000E   EA           MOV     A,R2
   \   00000F   2417         ADD     A,#0x17
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V9
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V1,A
   1333          
   1334          	/*- Router: Data report ----------------------------------------------------*/
   1335          	#ifdef COORDINATOR
   1336          	if ( pInReportCmd->attrList[0].attrID == ATTRID_REPORT_DATA_COORD)
   \   00001F   85..82       MOV     DPL,?V0
   \   000022   F583         MOV     DPH,A
   \   000024   A3           INC     DPTR
   \   000025   8582..       MOV     ?V14,DPL
   \   000028   8583..       MOV     ?V15,DPH
   \   00002B   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   74..         MOV     A,#`?<Constant "!">` & 0xff
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   74..         MOV     A,#(`?<Constant "!">` >> 8) & 0xff
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   E5..         MOV     A,?V0
   \   00003D   2409         ADD     A,#0x9
   \   00003F   F5..         MOV     ?V2,A
   \   000041   E4           CLR     A
   \   000042   35..         ADDC    A,?V1
   \   000044   F5..         MOV     ?V3,A
   \   000046   E5..         MOV     A,?V0
   \   000048   2404         ADD     A,#0x4
   \   00004A   F5..         MOV     ?V4,A
   \   00004C   E4           CLR     A
   \   00004D   35..         ADDC    A,?V1
   \   00004F   F5..         MOV     ?V5,A
   \   000051   75....       MOV     ?V6,#`?<Constant "@ZBR:">` & 0xff
   \   000054   75....       MOV     ?V7,#(`?<Constant "@ZBR:">` >> 8) & 0xff
   \   000057   7404         MOV     A,#0x4
   \   000059   68           XRL     A,R0
   \   00005A   7003         JNZ     ??zclSampleThermostat_ProcessInReportCmd_0
   \   00005C   74A0         MOV     A,#-0x60
   \   00005E   69           XRL     A,R1
   \                     ??zclSampleThermostat_ProcessInReportCmd_0:
   \   00005F   6003         JZ      $+5
   \   000061   02....       LJMP    ??zclSampleThermostat_ProcessInReportCmd_1 & 0xFFFF
   1337          	{
   1338          		HalLedBlink ( HAL_LED_2, 1, 50, 500 );
   \   000064                ; Setup parameters for call to function HalLedBlink
   \   000064   7CF4         MOV     R4,#-0xc
   \   000066   7D01         MOV     R5,#0x1
   \   000068   7B32         MOV     R3,#0x32
   \   00006A   7A01         MOV     R2,#0x1
   \   00006C   7902         MOV     R1,#0x2
   \   00006E   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   1339          		
   1340          		UART_ZCmdPrintString(HAL_UART_PORT_0, "@ZBR:");
   \   000071                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000071   AA..         MOV     R2,?V6
   \   000073   AB..         MOV     R3,?V7
   \   000075   7900         MOV     R1,#0x0
   \   000077   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1341          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, msg_RSSI);																			// RSSI
   \   00007A                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   00007A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00007D   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1342          		UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   000080                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000080   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   000082   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   000084   7900         MOV     R1,#0x0
   \   000086   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1343          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[2].attrID);							// shortAddr
   \   000089                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000089   E5..         MOV     A,?V0
   \   00008B   240B         ADD     A,#0xb
   \   00008D   F582         MOV     DPL,A
   \   00008F   E4           CLR     A
   \   000090   35..         ADDC    A,?V1
   \   000092   F583         MOV     DPH,A
   \   000094   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000097   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1344          		UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   00009A                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00009A   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   00009C   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   00009E   7900         MOV     R1,#0x0
   \   0000A0   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1345          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[2].attrData[0]);						// endPoint
   \   0000A3                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000A3   E5..         MOV     A,?V0
   \   0000A5   240E         ADD     A,#0xe
   \   0000A7   F582         MOV     DPL,A
   \   0000A9   E4           CLR     A
   \   0000AA   35..         ADDC    A,?V1
   \   0000AC   F583         MOV     DPH,A
   \   0000AE   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000B1   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1346          		UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0000B4                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000B4   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0000B6   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0000B8   7900         MOV     R1,#0x0
   \   0000BA   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1347          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[0].attrData[0]);					// temperature
   \   0000BD                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000BD   85..82       MOV     DPL,?V4
   \   0000C0   85..83       MOV     DPH,?V5
   \   0000C3   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000C6   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1348          		UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0000C9                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000C9   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0000CB   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0000CD   7900         MOV     R1,#0x0
   \   0000CF   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1349          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[0].attrData[1]);					// humidity
   \   0000D2                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000D2   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000D5   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1350          		UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0000D8                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000D8   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0000DA   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0000DC   7900         MOV     R1,#0x0
   \   0000DE   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1351          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrData[0]);					// heating
   \   0000E1                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000E1   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000E4   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1352          		UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0000E7                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000E7   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0000E9   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0000EB   7900         MOV     R1,#0x0
   \   0000ED   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1353          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrData[1]);					// cooling
   \   0000F0                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000F0   02....       LJMP    ??zclSampleThermostat_ProcessInReportCmd_2 & 0xFFFF
   1354          		UART_ZCmdPrint		(HAL_UART_PORT_0, "!");
   1355          		return;
   1356          	}
   \                     ??zclSampleThermostat_ProcessInReportCmd_1:
   \   0000F3   EA           MOV     A,R2
   \   0000F4   240A         ADD     A,#0xa
   \   0000F6   F5..         MOV     ?V10,A
   \   0000F8   E4           CLR     A
   \   0000F9   35..         ADDC    A,?V9
   \   0000FB   F5..         MOV     ?V11,A
   \   0000FD   7429         MOV     A,#0x29
   \   0000FF   68           XRL     A,R0
   \   000100   49           ORL     A,R1
   \   000101   7073         JNZ     ??zclSampleThermostat_ProcessInReportCmd_3
   1357          	#endif
   1358          	
   1359          	/*- endDev Engine: Feedback ------------------------------------------------*/
   1360          	if ( pInReportCmd->attrList[0].attrID == ATTRID_HVAC_THERMOSTAT_RUNNING_STATE )
   1361          	{
   1362          		HalLedBlink ( HAL_LED_2, 1, 50, 500 );
   \   000103                ; Setup parameters for call to function HalLedBlink
   \   000103   7CF4         MOV     R4,#-0xc
   \   000105   7D01         MOV     R5,#0x1
   \   000107   7B32         MOV     R3,#0x32
   \   000109   7A01         MOV     R2,#0x1
   \   00010B   7902         MOV     R1,#0x2
   \   00010D   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   1363          
   1364          		if (FLAG_ECHO_RDATA)
   \   000110   90....       MOV     DPTR,#FLAG_ECHO_RDATA
   \   000113   E0           MOVX    A,@DPTR
   \   000114   7003         JNZ     $+5
   \   000116   02....       LJMP    ??zclSampleThermostat_ProcessInReportCmd_4 & 0xFFFF
   1365          		{
   1366          			UART_ZCmdPrintString(HAL_UART_PORT_0, "@ZBF:");
   \   000119                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000119   7A..         MOV     R2,#`?<Constant "@ZBF:">` & 0xff
   \   00011B   7B..         MOV     R3,#(`?<Constant "@ZBF:">` >> 8) & 0xff
   \   00011D   7900         MOV     R1,#0x0
   \   00011F   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1367          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, msg_RSSI);																		// RSSI
   \   000122                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000122   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000125   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1368          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   000128                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000128   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   00012A   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   00012C   7900         MOV     R1,#0x0
   \   00012E   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1369          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInMsg->srcAddr.addr.shortAddr);							// shortAddr
   \   000131                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000131   85..82       MOV     DPL,?V10
   \   000134   85..83       MOV     DPH,?V11
   \   000137   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00013A   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1370          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   00013D                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00013D   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   00013F   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   000141   7900         MOV     R1,#0x0
   \   000143   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1371          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInMsg->srcAddr.endPoint);										// endPoint
   \   000146                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000146   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000149   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00014C   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1372          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   00014F                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00014F   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   000151   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   000153   7900         MOV     R1,#0x0
   \   000155   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1373          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[0].attrData[0]); 			// Feedback Heating
   \   000158                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000158   85..82       MOV     DPL,?V4
   \   00015B   85..83       MOV     DPH,?V5
   \   00015E   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000161   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1374          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   000164                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000164   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   000166   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   000168   7900         MOV     R1,#0x0
   \   00016A   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1375          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[0].attrData[1]); 			// Feedback Cooling
   \   00016D                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   00016D   85..82       MOV     DPL,?V4
   \   000170   85..83       MOV     DPH,?V5
   \   000173   02....       LJMP    ??zclSampleThermostat_ProcessInReportCmd_5 & 0xFFFF
   1376          			UART_ZCmdPrint			(HAL_UART_PORT_0, "!");
   1377          		}
   1378          		
   1379          		return;
   1380          	}
   1381          
   1382          	/*- endDev Sensor: Value Process -------------------------------------------*/
   1383            if ( pInReportCmd->attrList[0].attrID == ATTRID_MS_TEMPERATURE_MEASURED_VALUE )
   \                     ??zclSampleThermostat_ProcessInReportCmd_3:
   \   000176   E8           MOV     A,R0
   \   000177   49           ORL     A,R1
   \   000178   707D         JNZ     ??zclSampleThermostat_ProcessInReportCmd_6
   1384            {		
   1385          	
   1386          			UART_ZCmdPrintString(HAL_UART_PORT_0, "@ZBS:");
   \   00017A                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00017A   7A..         MOV     R2,#`?<Constant "@ZBS:">` & 0xff
   \   00017C   7B..         MOV     R3,#(`?<Constant "@ZBS:">` >> 8) & 0xff
   \   00017E   7900         MOV     R1,#0x0
   \   000180   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1387          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, msg_RSSI);																	
   \   000183                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000183   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000186   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1388          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   000189                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000189   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   00018B   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   00018D   7900         MOV     R1,#0x0
   \   00018F   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1389          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInMsg->srcAddr.addr.shortAddr);
   \   000192                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000192   85..82       MOV     DPL,?V10
   \   000195   85..83       MOV     DPH,?V11
   \   000198   E0           MOVX    A,@DPTR
   \   000199   F5..         MOV     ?V12,A
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   AA..         MOV     R2,?V12
   \   00019F   FB           MOV     R3,A
   \   0001A0   E4           CLR     A
   \   0001A1   FC           MOV     R4,A
   \   0001A2   FD           MOV     R5,A
   \   0001A3   F9           MOV     R1,A
   \   0001A4   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1390          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0001A7                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0001A7   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0001A9   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0001AB   7900         MOV     R1,#0x0
   \   0001AD   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1391          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[0].attrData[1]);
   \   0001B0                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0001B0   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0001B3   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1392          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0001B6                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0001B6   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0001B8   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0001BA   7900         MOV     R1,#0x0
   \   0001BC   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1393          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[0].attrData[0]);	
   \   0001BF                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0001BF   85..82       MOV     DPL,?V4
   \   0001C2   85..83       MOV     DPH,?V5
   \   0001C5   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0001C8   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1394          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0001CB                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0001CB   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0001CD   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0001CF   7900         MOV     R1,#0x0
   \   0001D1   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1395          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrData[1]);
   \   0001D4                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0001D4   85..82       MOV     DPL,?V2
   \   0001D7   85..83       MOV     DPH,?V3
   \   0001DA   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0001DD   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1396          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0001E0                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0001E0   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0001E2   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0001E4   7900         MOV     R1,#0x0
   \   0001E6   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1397          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrData[0]);
   \   0001E9                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0001E9   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0001EC   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1398          			UART_ZCmdPrint		(HAL_UART_PORT_0, "!");
   \   0001EF                ; Setup parameters for call to function UART_ZCmdPrint
   \   0001EF   12....       LCALL   ?Subroutine20 & 0xFFFF
   1399            }
   \                     ??CrossCallReturnLabel_96:
   \   0001F2   7900         MOV     R1,#0x0
   \   0001F4   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
   1400          	
   1401          	if (pInReportCmd->attrList[0].attrID == ATTRID_SENDSTATE)
   \                     ??zclSampleThermostat_ProcessInReportCmd_6:
   \   0001F7   85..82       MOV     DPL,?V14
   \   0001FA   85..83       MOV     DPH,?V15
   \   0001FD   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000200   7406         MOV     A,#0x6
   \   000202   68           XRL     A,R0
   \   000203   7003         JNZ     ??zclSampleThermostat_ProcessInReportCmd_7
   \   000205   74A0         MOV     A,#-0x60
   \   000207   69           XRL     A,R1
   \                     ??zclSampleThermostat_ProcessInReportCmd_7:
   \   000208   707F         JNZ     ??zclSampleThermostat_ProcessInReportCmd_8
   1402          	{	
   1403          		int i;
   1404          		uint8 add[16];
   1405          		UART_ZCmdPrintString(HAL_UART_PORT_0, "@ZBR:");
   \   00020A                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00020A   AA..         MOV     R2,?V6
   \   00020C   AB..         MOV     R3,?V7
   \   00020E   7900         MOV     R1,#0x0
   \   000210   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1406          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, msg_RSSI);																	
   \   000213                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000213   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000216   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1407          		UART_ZCmdPrintString(HAL_UART_PORT_0, ";"); 
   \   000219                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000219   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   00021B   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   00021D   7900         MOV     R1,#0x0
   \   00021F   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1408          		for(i = 0;i<16;i++)
   \   000222   7800         MOV     R0,#0x0
   \   000224   7900         MOV     R1,#0x0
   1409          		{
   1410          			add[i] = pInReportCmd->attrList[0].attrData[i];
   \                     ??zclSampleThermostat_ProcessInReportCmd_9:
   \   000226   85..82       MOV     DPL,?V4
   \   000229   85..83       MOV     DPH,?V5
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   28           ADD     A,R0
   \   00022E   FA           MOV     R2,A
   \   00022F   A3           INC     DPTR
   \   000230   E0           MOVX    A,@DPTR
   \   000231   39           ADDC    A,R1
   \   000232   8A82         MOV     DPL,R2
   \   000234   F583         MOV     DPH,A
   \   000236   E0           MOVX    A,@DPTR
   \   000237   C0E0         PUSH    A
   \   000239   7416         MOV     A,#0x16
   \   00023B   12....       LCALL   ?XSTACK_DISP0_8
   \   00023E   E582         MOV     A,DPL
   \   000240   28           ADD     A,R0
   \   000241   F582         MOV     DPL,A
   \   000243   E583         MOV     A,DPH
   \   000245   39           ADDC    A,R1
   \   000246   F583         MOV     DPH,A
   \   000248   D0E0         POP     A
   \   00024A   F0           MOVX    @DPTR,A
   1411          		}
   \   00024B   08           INC     R0
   \   00024C   E8           MOV     A,R0
   \   00024D   7001         JNZ     ??zclSampleThermostat_ProcessInReportCmd_10
   \   00024F   09           INC     R1
   \                     ??zclSampleThermostat_ProcessInReportCmd_10:
   \   000250   C3           CLR     C
   \   000251   9410         SUBB    A,#0x10
   \   000253   E9           MOV     A,R1
   \   000254   9400         SUBB    A,#0x0
   \   000256   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000258   65D0         XRL     A,PSW
   \   00025A   33           RLC     A
   \   00025B   40C9         JC      ??zclSampleThermostat_ProcessInReportCmd_9
   1412          		add[16] == '\0';
                 		^
Warning[Pe175]: subscript out of range

  		add[16] == '\0';
  		^
"D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c",1412  Warning[Pe174]: 
          expression has no effect

  	uint8 src_EndPoint;
  	      ^
"D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c",1324  Warning[Pe177]: 
          variable "src_EndPoint" was declared but never referenced

    zclReportCmd_t *pOutDemandReport;
                    ^
"D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c",1328  Warning[Pe177]: 
          variable "pOutDemandReport" was declared but never referenced

    uint8 outDemandBuffer[sizeof( zclReportCmd_t ) + ( 3 * sizeof( zclReport_t ) )];
          ^
"D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c",1329  Warning[Pe177]: 
          variable "outDemandBuffer" was declared but never referenced

    bool send = TRUE;
         ^
"D:\GitHub\TripleS_Zigbee\Projects\zstack\HomeAutomation\SampleThermostat\Source\zcl_samplethermostat.c",1330  Warning[Pe177]: 
          variable "send" was declared but never referenced
   1413          		HalUARTWrite(HAL_UART_PORT_0, add,16); 
   \   00025D                ; Setup parameters for call to function HalUARTWrite
   \   00025D   7C10         MOV     R4,#0x10
   \   00025F   7D00         MOV     R5,#0x0
   \   000261   7416         MOV     A,#0x16
   \   000263   12....       LCALL   ?XSTACK_DISP101_8
   \   000266   7900         MOV     R1,#0x0
   \   000268   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   1414          		UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   00026B                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00026B   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   00026D   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   00026F   7900         MOV     R1,#0x0
   \   000271   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1415          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrData[0]);
   \   000274                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000274   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000277   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1416          		UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrData[1]);
   \   00027A                ; Setup parameters for call to function UART_ZCmdPrintNum
   \                     ??zclSampleThermostat_ProcessInReportCmd_2:
   \   00027A   85..82       MOV     DPL,?V2
   \   00027D   85..83       MOV     DPH,?V3
   \                     ??zclSampleThermostat_ProcessInReportCmd_5:
   \   000280   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000283   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1417          		UART_ZCmdPrint		(HAL_UART_PORT_0, "!");
   \   000286                ; Setup parameters for call to function UART_ZCmdPrint
   \   000286   02....       LJMP    ??zclSampleThermostat_ProcessInReportCmd_11 & 0xFFFF
   1418          		return;
   1419          	}
   1420          
   1421          	// freedata
   1422          	if ( pInReportCmd->attrList[0].attrID == ATTRID_FREE_DATA )
   \                     ??zclSampleThermostat_ProcessInReportCmd_8:
   \   000289   7403         MOV     A,#0x3
   \   00028B   68           XRL     A,R0
   \   00028C   7003         JNZ     ??zclSampleThermostat_ProcessInReportCmd_12
   \   00028E   74A0         MOV     A,#-0x60
   \   000290   69           XRL     A,R1
   \                     ??zclSampleThermostat_ProcessInReportCmd_12:
   \   000291   6003         JZ      $+5
   \   000293   02....       LJMP    ??zclSampleThermostat_ProcessInReportCmd_4 & 0xFFFF
   1423          	{
   1424          		uint8 i;
   1425          		uint8 tmp_Data[20];
   1426          		
   1427          		HalLedBlink ( HAL_LED_2, 1, 50, 500 );
   \   000296                ; Setup parameters for call to function HalLedBlink
   \   000296   7CF4         MOV     R4,#-0xc
   \   000298   7D01         MOV     R5,#0x1
   \   00029A   7B32         MOV     R3,#0x32
   \   00029C   7A01         MOV     R2,#0x1
   \   00029E   7902         MOV     R1,#0x2
   \   0002A0   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   1428          		
   1429          		if (FLAG_ECHO_RDATA)
   \   0002A3   90....       MOV     DPTR,#FLAG_ECHO_RDATA
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   7003         JNZ     $+5
   \   0002A9   02....       LJMP    ??zclSampleThermostat_ProcessInReportCmd_4 & 0xFFFF
   1430          		{
   1431          			UART_ZCmdPrintString(HAL_UART_PORT_0, "@ZBR:");
   \   0002AC                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0002AC   AA..         MOV     R2,?V6
   \   0002AE   AB..         MOV     R3,?V7
   \   0002B0   7900         MOV     R1,#0x0
   \   0002B2   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1432          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, msg_RSSI);																// RSSI
   \   0002B5                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0002B5   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0002B8   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1433          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0002BB                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0002BB   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0002BD   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0002BF   7900         MOV     R1,#0x0
   \   0002C1   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1434          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInMsg->srcAddr.addr.shortAddr);					// shortAddr
   \   0002C4                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0002C4   85..82       MOV     DPL,?V10
   \   0002C7   85..83       MOV     DPH,?V11
   \   0002CA   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0002CD   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1435          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0002D0                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0002D0   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0002D2   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0002D4   7900         MOV     R1,#0x0
   \   0002D6   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1436          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInMsg->srcAddr.endPoint);								// endPoint
   \   0002D9                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0002D9   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0002DC   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0002DF   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1437          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0002E2                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0002E2   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0002E4   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   0002E6   7900         MOV     R1,#0x0
   \   0002E8   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1438          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrID); 				// coordShortAddr
   \   0002EB                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0002EB   85..82       MOV     DPL,?V0
   \   0002EE   85..83       MOV     DPH,?V1
   \   0002F1   A3           INC     DPTR
   \   0002F2   A3           INC     DPTR
   \   0002F3   A3           INC     DPTR
   \   0002F4   A3           INC     DPTR
   \   0002F5   A3           INC     DPTR
   \   0002F6   A3           INC     DPTR
   \   0002F7   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0002FA   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1439          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";"); 
   \   0002FD                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0002FD   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   0002FF   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   000301   7900         MOV     R1,#0x0
   \   000303   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1440          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrData[0]); 	// data size
   \   000306                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   000306   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000309   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1441          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   00030C                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00030C   7A..         MOV     R2,#`?<Constant ";">` & 0xff
   \   00030E   7B..         MOV     R3,#(`?<Constant ";">` >> 8) & 0xff
   \   000310   7900         MOV     R1,#0x0
   \   000312   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1442          			
   1443          			// eliminate DUMMY byte index[0]
   1444          			for (i = 1; i <= pInReportCmd->attrList[1].attrData[0]; i++)
   \   000315   7A01         MOV     R2,#0x1
   \   000317   8022         SJMP    ??zclSampleThermostat_ProcessInReportCmd_13
   1445          			{
   1446          				tmp_Data[i-1] = pInReportCmd->attrList[0].attrData[i];
   \                     ??zclSampleThermostat_ProcessInReportCmd_14:
   \   000319   EA           MOV     A,R2
   \   00031A   F8           MOV     R0,A
   \   00031B   85..82       MOV     DPL,?V4
   \   00031E   85..83       MOV     DPH,?V5
   \   000321   E0           MOVX    A,@DPTR
   \   000322   28           ADD     A,R0
   \   000323   FB           MOV     R3,A
   \   000324   A3           INC     DPTR
   \   000325   E0           MOVX    A,@DPTR
   \   000326   3400         ADDC    A,#0x0
   \   000328   8B82         MOV     DPL,R3
   \   00032A   F583         MOV     DPH,A
   \   00032C   E0           MOVX    A,@DPTR
   \   00032D   C0E0         PUSH    A
   \   00032F   7402         MOV     A,#0x2
   \   000331   12....       LCALL   ?XSTACK_DISP0_8
   \   000334   12....       LCALL   ?Subroutine23 & 0xFFFF
   1447          			}
   \                     ??CrossCallReturnLabel_46:
   \   000337   D0E0         POP     A
   \   000339   F0           MOVX    @DPTR,A
   \   00033A   0A           INC     R2
   \                     ??zclSampleThermostat_ProcessInReportCmd_13:
   \   00033B   85..82       MOV     DPL,?V2
   \   00033E   85..83       MOV     DPH,?V3
   \   000341   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000344   E0           MOVX    A,@DPTR
   \   000345   FC           MOV     R4,A
   \   000346   C3           CLR     C
   \   000347   9A           SUBB    A,R2
   \   000348   50CF         JNC     ??zclSampleThermostat_ProcessInReportCmd_14
   1448          			UART_ZCmdPrintBuffer(HAL_UART_PORT_0, tmp_Data, pInReportCmd->attrList[1].attrData[0]); 	// Free Data
   \   00034A                ; Setup parameters for call to function UART_ZCmdPrintBuffer
   \   00034A   7402         MOV     A,#0x2
   \   00034C   12....       LCALL   ?XSTACK_DISP101_8
   \   00034F   7900         MOV     R1,#0x0
   \   000351   12....       LCALL   `??UART_ZCmdPrintBuffer::?relay`; Banked call to: UART_ZCmdPrintBuffer
   1449          			UART_ZCmdPrint			(HAL_UART_PORT_0, "!");
   \   000354                ; Setup parameters for call to function UART_ZCmdPrint
   1450          		}
   \                     ??zclSampleThermostat_ProcessInReportCmd_11:
   \   000354   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000357   7900         MOV     R1,#0x0
   \   000359   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
   1451          		return;
   1452          	}
   1453          
   1454          
   1455          }
   \                     ??zclSampleThermostat_ProcessInReportCmd_4:
   \   00035C   7426         MOV     A,#0x26
   \   00035E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000361   7F10         MOV     R7,#0x10
   \   000363   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E5..         MOV     A,?V8
   \   000002   2413         ADD     A,#0x13
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V9
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   AA..         MOV     R2,?V6
   \   000007   FB           MOV     R3,A
   \   000008   E4           CLR     A
   \   000009   FC           MOV     R4,A
   \   00000A   FD           MOV     R5,A
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#msg_RSSI
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   33           RLC     A
   \   000006   95E0         SUBB    A,0xE0 /* A   */
   \   000008   FB           MOV     R3,A
   \   000009   FC           MOV     R4,A
   \   00000A   FD           MOV     R5,A
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?V4
   \   000003   85..83       MOV     DPH,?V5
   \   000006                REQUIRE ??Subroutine34_0
   \   000006                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine37_0
   \   000006                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine38_0
   \   000006                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3583         ADDC    A,DPH
   \   000007   F9           MOV     R1,A
   \   000008   E8           MOV     A,R0
   \   000009   24FF         ADD     A,#-0x1
   \   00000B   F582         MOV     DPL,A
   \   00000D   E9           MOV     A,R1
   \   00000E   34FF         ADDC    A,#-0x1
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET
   1456          #endif  // ZCL_REPORT
   1457          
   1458          /*********************************************************************
   1459           * @fn      zclSampleThermostat_ProcessInDefaultRspCmd
   1460           *
   1461           * @brief   Process the "Profile" Default Response Command
   1462           *
   1463           * @param   pInMsg - incoming message to process
   1464           *
   1465           * @return  none
   1466           */
   1467          static uint8 zclSampleThermostat_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1468          {
   1469            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1470          
   1471            // Device is notified of the Default Response command.
   1472            (void)pInMsg;
   1473          
   1474            return ( TRUE );
   1475          }
   1476          
   1477          #ifdef ZCL_EZMODE
   1478          /*********************************************************************
   1479           * @fn      zclSampleThermostat_ProcessZDOMsgs
   1480           *
   1481           * @brief   Called when this node receives a ZDO/ZDP response.
   1482           *
   1483           * @param   none
   1484           *
   1485           * @return  status
   1486           */
   1487          static void zclSampleThermostat_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   1488          {
   1489            zclEZMode_ActionData_t data;
   1490            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1491          
   1492            // Let EZ-Mode know of the Match Descriptor Response
   1493            if ( pMsg->clusterID == Match_Desc_rsp )
   1494            {
   1495              pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
   1496              data.pMatchDescRsp = pMatchDescRsp;
   1497              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   1498              osal_mem_free( pMatchDescRsp );
   1499            }
   1500          }
   1501          
   1502          /*********************************************************************
   1503           * @fn      zclSampleThermostat_EZModeCB
   1504           *
   1505           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1506          *           going on during EZ-Mode steering/finding/binding.
   1507           *
   1508           * @param   state - EZ-Mode state
   1509           *          pData - data appropriate to state
   1510           *
   1511           * @return  none
   1512           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1513          static void zclSampleThermostat_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   \                     zclSampleThermostat_EZModeCB:
   1514          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   1515          #ifdef LCD_SUPPORTED
   1516            char szLine[20];
   1517            char *pStr;
   1518            uint8 err;
   1519          #endif
   1520          
   1521            // time to go into identify mode
   1522            if ( state == EZMODE_STATE_IDENTIFYING )
   \   000010   7404         MOV     A,#0x4
   \   000012   65..         XRL     A,?V2
   \   000014   700F         JNZ     ??zclSampleThermostat_EZModeCB_0
   1523            {
   1524              zclSampleThermostat_IdentifyTime = (EZMODE_TIME / 1000);  // convert to seconds
   \   000016   90....       MOV     DPTR,#zclSampleThermostat_IdentifyTime
   \   000019   74B4         MOV     A,#-0x4c
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   1525              zclSampleThermostat_ProcessIdentifyTimeChange();
   \   00001F                ; Setup parameters for call to function zclSampleThermostat_ProcessIdentifyTimeChange
   \   00001F   12....       LCALL   ??zclSampleThermostat_ProcessIdentifyTimeChange; Banked call to: zclSampleThermostat_ProcessIdentifyTimeChange
   \   000022   02....       LJMP    ??zclSampleThermostat_EZModeCB_1 & 0xFFFF
   1526            }
   1527          
   1528            // autoclosing, show what happened (success, cancelled, etc...)
   1529            if( state == EZMODE_STATE_AUTOCLOSE )
   \                     ??zclSampleThermostat_EZModeCB_0:
   \   000025   7407         MOV     A,#0x7
   \   000027   65..         XRL     A,?V2
   \   000029   701F         JNZ     ??zclSampleThermostat_EZModeCB_2
   1530            {
   1531          #ifdef LCD_SUPPORTED
   1532              pStr = NULL;
   1533              err = pData->sAutoClose.err;
   1534              if ( err == EZMODE_ERR_SUCCESS )
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6003         JZ      $+5
   \   000032   02....       LJMP    ??zclSampleThermostat_EZModeCB_1 & 0xFFFF
   1535              {
   1536                pStr = "EZMode: Success";
   1537              }
   1538              if ( pStr )
   1539              {
   1540                if ( giThermostatScreenMode == THERMOSTAT_MAINMODE )
   \   000035   90....       MOV     DPTR,#giThermostatScreenMode
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6003         JZ      $+5
   \   00003B   02....       LJMP    ??zclSampleThermostat_EZModeCB_1 & 0xFFFF
   1541                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   00003E                ; Setup parameters for call to function HalLcdWriteString
   \   00003E   7902         MOV     R1,#0x2
   \   000040   7A..         MOV     R2,#`?<Constant "EZMode: Success">` & 0xff
   \   000042   7B..         MOV     R3,#(`?<Constant "EZMode: Success">` >> 8) & 0xff
   \   000044   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000047   02....       LJMP    ??zclSampleThermostat_EZModeCB_1 & 0xFFFF
   1542              }
   1543          #endif
   1544            }
   1545          
   1546            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1547            if ( state == EZMODE_STATE_FINISH )
   \                     ??zclSampleThermostat_EZModeCB_2:
   \   00004A   7463         MOV     A,#0x63
   \   00004C   65..         XRL     A,?V2
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??zclSampleThermostat_EZModeCB_1 & 0xFFFF
   1548            {
   1549              // turn off identify mode
   1550              zclSampleThermostat_IdentifyTime = 0;
   \   000053   90....       MOV     DPTR,#zclSampleThermostat_IdentifyTime
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   F0           MOVX    @DPTR,A
   1551              zclSampleThermostat_ProcessIdentifyTimeChange();
   \   00005A                ; Setup parameters for call to function zclSampleThermostat_ProcessIdentifyTimeChange
   \   00005A   12....       LCALL   ??zclSampleThermostat_ProcessIdentifyTimeChange; Banked call to: zclSampleThermostat_ProcessIdentifyTimeChange
   1552          
   1553          #ifdef LCD_SUPPORTED
   1554              // if successful, inform user which nwkaddr/ep we bound to
   1555              pStr = NULL;
   1556              err = pData->sFinish.err;
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   1557              if ( err == EZMODE_ERR_SUCCESS )
   \   000063   6003         JZ      $+5
   \   000065   02....       LJMP    ??zclSampleThermostat_EZModeCB_3 & 0xFFFF
   1558              {
   1559                // "EZDst:1234 EP:34"
   1560                osal_memcpy(szLine, "EZDst:", 6);
   \   000068                ; Setup parameters for call to function osal_memcpy
   \   000068   75....       MOV     ?V4,#`?<Constant "EZDst:">` & 0xff
   \   00006B   75....       MOV     ?V5,#(`?<Constant "EZDst:">` >> 8) & 0xff
   \   00006E   75..00       MOV     ?V6,#0x0
   \   000071   78..         MOV     R0,#?V4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000076   7C06         MOV     R4,#0x6
   \   000078   7D00         MOV     R5,#0x0
   \   00007A   7403         MOV     A,#0x3
   \   00007C   12....       LCALL   ?XSTACK_DISP101_8
   \   00007F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   1561                zclHA_uint16toa( pData->sFinish.nwkaddr, &szLine[6]);
   \   000087                ; Setup parameters for call to function zclHA_uint16toa
   \   000087   7406         MOV     A,#0x6
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   AC82         MOV     R4,DPL
   \   00008E   AD83         MOV     R5,DPH
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000099   12....       LCALL   `??zclHA_uint16toa::?relay`; Banked call to: zclHA_uint16toa
   1562                osal_memcpy(&szLine[10], " EP:", 4);
   \   00009C                ; Setup parameters for call to function osal_memcpy
   \   00009C   75....       MOV     ?V4,#`?<Constant " EP:">` & 0xff
   \   00009F   75....       MOV     ?V5,#(`?<Constant " EP:">` >> 8) & 0xff
   \   0000A2   78..         MOV     R0,#?V4
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A7   7C04         MOV     R4,#0x4
   \   0000A9   7D00         MOV     R5,#0x0
   \   0000AB   740D         MOV     A,#0xd
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   AA82         MOV     R2,DPL
   \   0000B2   AB83         MOV     R3,DPH
   \   0000B4   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B7   7403         MOV     A,#0x3
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   1563                _ltoa( pData->sFinish.ep, (void *)(&szLine[14]), 16 );  // _ltoa NULL terminates
   \   0000BC                ; Setup parameters for call to function _ltoa
   \   0000BC   740E         MOV     A,#0xe
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   8582..       MOV     ?V0,DPL
   \   0000C4   8583..       MOV     ?V1,DPH
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   7910         MOV     R1,#0x10
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   A3           INC     DPTR
   \   0000D3   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000D6   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   1564                pStr = szLine;
   \   0000DE   A8..         MOV     R0,?XSP + 0
   \   0000E0   A9..         MOV     R1,?XSP + 1
   \   0000E2   88..         MOV     ?V0,R0
   \   0000E4   89..         MOV     ?V1,R1
   \   0000E6   AA..         MOV     R2,?V0
   \   0000E8   AB..         MOV     R3,?V1
   \   0000EA   8025         SJMP    ??zclSampleThermostat_EZModeCB_4
   1565              }
   1566              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   \                     ??zclSampleThermostat_EZModeCB_3:
   \   0000EC   7401         MOV     A,#0x1
   \   0000EE   68           XRL     A,R0
   \   0000EF   7006         JNZ     ??zclSampleThermostat_EZModeCB_5
   1567              {
   1568                pStr = "EZMode: BadParm";
   \   0000F1   7A..         MOV     R2,#`?<Constant "EZMode: BadParm">` & 0xff
   \   0000F3   7B..         MOV     R3,#(`?<Constant "EZMode: BadParm">` >> 8) & 0xff
   \   0000F5   801A         SJMP    ??zclSampleThermostat_EZModeCB_4
   1569              }
   1570              else if ( err == EZMODE_ERR_CANCELLED )
   \                     ??zclSampleThermostat_EZModeCB_5:
   \   0000F7   7402         MOV     A,#0x2
   \   0000F9   68           XRL     A,R0
   \   0000FA   7006         JNZ     ??zclSampleThermostat_EZModeCB_6
   1571              {
   1572                pStr = "EZMode: Cancel";
   \   0000FC   7A..         MOV     R2,#`?<Constant "EZMode: Cancel">` & 0xff
   \   0000FE   7B..         MOV     R3,#(`?<Constant "EZMode: Cancel">` >> 8) & 0xff
   \   000100   800F         SJMP    ??zclSampleThermostat_EZModeCB_4
   1573              }
   1574              else if ( err == EZMODE_ERR_NOMATCH )
   \                     ??zclSampleThermostat_EZModeCB_6:
   \   000102   7404         MOV     A,#0x4
   \   000104   68           XRL     A,R0
   \   000105   7006         JNZ     ??zclSampleThermostat_EZModeCB_7
   1575              {
   1576                pStr = "EZMode: NoMatch"; // not a match made in heaven
   \   000107   7A..         MOV     R2,#`?<Constant "EZMode: NoMatch">` & 0xff
   \   000109   7B..         MOV     R3,#(`?<Constant "EZMode: NoMatch">` >> 8) & 0xff
   \   00010B   8004         SJMP    ??zclSampleThermostat_EZModeCB_4
   1577              }
   1578              else
   1579              {
   1580                pStr = "EZMode: TimeOut";
   \                     ??zclSampleThermostat_EZModeCB_7:
   \   00010D   7A..         MOV     R2,#`?<Constant "EZMode: TimeOut">` & 0xff
   \   00010F   7B..         MOV     R3,#(`?<Constant "EZMode: TimeOut">` >> 8) & 0xff
   1581              }
   1582              if ( pStr )
   \                     ??zclSampleThermostat_EZModeCB_4:
   \   000111   EA           MOV     A,R2
   \   000112   4B           ORL     A,R3
   \   000113   600B         JZ      ??zclSampleThermostat_EZModeCB_8
   1583              {
   1584                if ( giThermostatScreenMode == THERMOSTAT_MAINMODE )
   \   000115   90....       MOV     DPTR,#giThermostatScreenMode
   \   000118   E0           MOVX    A,@DPTR
   \   000119   7005         JNZ     ??zclSampleThermostat_EZModeCB_8
   1585                {
   1586                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   00011B                ; Setup parameters for call to function HalLcdWriteString
   \   00011B   7902         MOV     R1,#0x2
   \   00011D   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1587                }
   1588              }
   1589          #endif  // LCD_SUPPORTED
   1590          
   1591              // show main UI screen 3 seconds after completing EZ-Mode
   1592              osal_start_timerEx( zclSampleThermostat_TaskID, SAMPLETHERMOSTAT_MAIN_SCREEN_EVT, 3000 );
   \                     ??zclSampleThermostat_EZModeCB_8:
   \   000120                ; Setup parameters for call to function osal_start_timerEx
   \   000120   90....       MOV     DPTR,#__Constant_bb8
   \   000123   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000126   7A10         MOV     R2,#0x10
   \   000128   7B00         MOV     R3,#0x0
   \   00012A   90....       MOV     DPTR,#zclSampleThermostat_TaskID
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   F9           MOV     R1,A
   \   00012F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000132   7404         MOV     A,#0x4
   \   000134   12....       LCALL   ?DEALLOC_XSTACK8
   1593            }
   1594          }
   \                     ??zclSampleThermostat_EZModeCB_1:
   \   000137   7414         MOV     A,#0x14
   \   000139   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013C   7F07         MOV     R7,#0x7
   \   00013E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1595          #endif // ZCL_EZMODE
   1596          
   1597          /*******************************************************************************
   1598          ********************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1599          void zclSampleThermostat_BindingProcess(void)
   \                     zclSampleThermostat_BindingProcess:
   1600          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 9
   \   000004   74F7         MOV     A,#-0x9
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1601          	if ( ( giThermostatScreenMode == THERMOSTAT_MAINMODE ) ||
   1602          			 ( giThermostatScreenMode == THERMOSTAT_HELPMODE ) )
   \   000009   90....       MOV     DPTR,#giThermostatScreenMode
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6004         JZ      ??zclSampleThermostat_BindingProcess_0
   \   00000F   6401         XRL     A,#0x1
   \   000011   7066         JNZ     ??zclSampleThermostat_BindingProcess_1
   1603          	{
   1604          		giThermostatScreenMode = THERMOSTAT_MAINMODE;
   \                     ??zclSampleThermostat_BindingProcess_0:
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1605          
   1606          		FLAG_BINDING = !FLAG_BINDING;
   \   000015   90....       MOV     DPTR,#FLAG_BINDING
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7004         JNZ     ??zclSampleThermostat_BindingProcess_2
   \   00001B   7401         MOV     A,#0x1
   \   00001D   8001         SJMP    ??zclSampleThermostat_BindingProcess_3
   \                     ??zclSampleThermostat_BindingProcess_2:
   \   00001F   E4           CLR     A
   \                     ??zclSampleThermostat_BindingProcess_3:
   \   000020   12....       LCALL   ?Subroutine6 & 0xFFFF
   1607          	
   1608          	#ifdef ZCL_EZMODE
   1609          		zclEZMode_InvokeData_t ezModeData;
   1610          		static uint16 clusterIDs[] = { ZCL_CLUSTER_ID_HVAC_THERMOSTAT };	 // only bind on the Thermostat cluster
   1611          	
   1612          		// Invoke EZ-Mode
   1613          		ezModeData.endpoint = SAMPLETHERMOSTAT_ENDPOINT; // endpoint on which to invoke EZ-Mode
   1614          		if ( ( zclSampleThermostat_NwkState == DEV_ZB_COORD ) ||
   1615          				 ( zclSampleThermostat_NwkState == DEV_ROUTER ) 	||
   1616          				 ( zclSampleThermostat_NwkState == DEV_END_DEVICE ) )
   \                     ??CrossCallReturnLabel_5:
   \   000023   600A         JZ      ??zclSampleThermostat_BindingProcess_4
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6407         XRL     A,#0x7
   \   000028   6005         JZ      ??zclSampleThermostat_BindingProcess_4
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6406         XRL     A,#0x6
   \   00002D   7009         JNZ     ??zclSampleThermostat_BindingProcess_5
   1617          		{
   1618          			ezModeData.onNetwork = TRUE;			// node is already on the network
   \                     ??zclSampleThermostat_BindingProcess_4:
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   7401         MOV     A,#0x1
   \   000036   8006         SJMP    ??zclSampleThermostat_BindingProcess_6
   1619          		}
   1620          		else
   1621          		{
   1622          			ezModeData.onNetwork = FALSE; 		// node is not yet on the network
   \                     ??zclSampleThermostat_BindingProcess_5:
   \   000038   7401         MOV     A,#0x1
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E4           CLR     A
   \                     ??zclSampleThermostat_BindingProcess_6:
   \   00003E   F0           MOVX    @DPTR,A
   1623          		}
   1624          		ezModeData.initiator = TRUE;				// Thermostat is an initiator
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7401         MOV     A,#0x1
   \   000046   F0           MOVX    @DPTR,A
   1625          		ezModeData.numActiveInClusters = 0;
   \   000047   7403         MOV     A,#0x3
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   1626          		ezModeData.pActiveInClusterIDs = NULL;
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   F0           MOVX    @DPTR,A
   1627          		ezModeData.numActiveOutClusters = 1;	 // active output cluster
   \   000057   7406         MOV     A,#0x6
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
   1628          		ezModeData.pActiveOutClusterIDs = clusterIDs;
   \   00005F   7407         MOV     A,#0x7
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   74..         MOV     A,#??clusterIDs_1 & 0xff
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   74..         MOV     A,#(??clusterIDs_1 >> 8) & 0xff
   \   00006A   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   1629          		zcl_InvokeEZMode( &ezModeData );
   \                     ??CrossCallReturnLabel_65:
   \   00006D   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
   1630          	
   1631          		#ifdef LCD_SUPPORTED
   1632          			HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   \   000070                ; Setup parameters for call to function HalLcdWriteString
   \   000070   7902         MOV     R1,#0x2
   \   000072   7A..         MOV     R2,#`?<Constant "EZMode">` & 0xff
   \   000074   7B..         MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
   \   000076   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1633          		#endif
   1634          	
   1635          		// NOT ZCL_EZMODE, use EndDeviceBind
   1636          	#else
   1637          		zAddrType_t dstAddr;
   1638          		HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   1639          	
   1640          		// Initiate an End Device Bind Request, this bind request will
   1641          		// only use a cluster list that is important to binding.
   1642          		dstAddr.addrMode = afAddr16Bit;
   1643          		dstAddr.addr.shortAddr = 0; 	// Coordinator makes the match
   1644          		ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
   1645          													SAMPLETHERMOSTAT_ENDPOINT,
   1646          													ZCL_HA_PROFILE_ID,
   1647          													ZCLSAMPLETHERMOSTAT_BINDINGLIST_IN, bindingInClusters,
   1648          													ZCLSAMPLETHERMOSTAT_BINDINGLIST_OUT, bindingOutClusters,
   1649          													TRUE );
   1650          	#endif // ZCL_EZMODE
   1651          	}
   1652          	
   1653          }
   \                     ??zclSampleThermostat_BindingProcess_1:
   \   000079   7409         MOV     A,#0x9
   \   00007B   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??clusterIDs_1:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for clusterIDs>_1`
   \   000002                REQUIRE __INIT_XDATA_I
   1654          
   1655          #ifndef COORDINATOR
   1656          static void zclSampleThermostat_RollCall(void)
   1657          {
   1658          
   1659          	afAddrType_t RollCall_DstAddr;
   1660          	// Set destination address to ZB Coordinator
   1661            RollCall_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   1662            RollCall_DstAddr.endPoint = 8;
   1663            RollCall_DstAddr.addr.shortAddr = 0;
   1664          	
   1665          	zclReportCmd_t *pReportCmd;
   1666          	uint16 src_coordShortAddr = NLME_GetCoordShortAddr();
   1667          	uint8 device_type = 0;
   1668          
   1669          	switch (zclSampleThermostat_NwkState)
   1670          	{
   1671          		case DEV_ZB_COORD:
   1672          			device_type = 1;
   1673          			break;
   1674          
   1675          		case DEV_ROUTER:
   1676          			device_type = 2;
   1677          			break;
   1678          
   1679          		case DEV_END_DEVICE:
   1680          			device_type = 3;
   1681          			break;
   1682          
   1683          		default:
   1684          			device_type = 0;
   1685          			break;
   1686          	}
   1687          	
   1688          	pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + 2 * sizeof(zclReport_t) );
   1689          	if ( pReportCmd != NULL )
   1690          	{
   1691          	  pReportCmd->numAttr = 2;
   1692          		// Data
   1693          	  pReportCmd->attrList[0].attrID 		= ATTRID_ROLL_CALL;
   1694          	  pReportCmd->attrList[0].dataType 	= ZCL_DATATYPE_UINT16;
   1695          	  pReportCmd->attrList[0].attrData 	= (void *)(&src_coordShortAddr);
   1696          	  pReportCmd->attrList[1].attrID 		= ATTRID_ROLL_CALL;
   1697          	  pReportCmd->attrList[1].dataType 	= ZCL_DATATYPE_UINT8;
   1698          	  pReportCmd->attrList[1].attrData 	= (void *)(&device_type);
   1699          
   1700          	  zcl_SendReportCmd( SAMPLETHERMOSTAT_ENDPOINT, &RollCall_DstAddr,
   1701          	                     ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
   1702          	                     pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, zclSampleThermostatSeqNum++ );
   1703          	}
   1704          
   1705          	osal_mem_free( pReportCmd );
   1706          }
   1707          #endif
   1708          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1709          void zclSampleThermostat_SendFreeData(void)
   \                     zclSampleThermostat_SendFreeData:
   1710          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1711          	#ifdef ZCL_REPORT
   1712          	// Can't send via indirect ??? (system reset)
   1713          	afAddrType_t DstAddr;
   1714            DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   740F         MOV     A,#0xf
   \   000011   F0           MOVX    @DPTR,A
   1715            DstAddr.endPoint = 0xFF;
   \   000012   7409         MOV     A,#0x9
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine7 & 0xFFFF
   1716            DstAddr.addr.shortAddr = 0xFFFF;
   1717          	
   1718            zclReportCmd_t *pReportCmd;
   1719            pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + 2 * sizeof(zclReport_t) );
   \                     ??CrossCallReturnLabel_6:
   \   00001A                ; Setup parameters for call to function osal_mem_alloc
   \   00001A   7A0B         MOV     R2,#0xb
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV     ?V0,R2
   \   000023   8B..         MOV     ?V1,R3
   1720            if ( pReportCmd != NULL )
   \   000025   EA           MOV     A,R2
   \   000026   45..         ORL     A,?V1
   \   000028   603A         JZ      ??zclSampleThermostat_SendFreeData_0
   1721            {
   1722              pReportCmd->numAttr = 2;
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   7402         MOV     A,#0x2
   \   000030   F0           MOVX    @DPTR,A
   1723          		
   1724          		// Data
   1725              pReportCmd->attrList[0].attrID 		= ATTRID_FREE_DATA;
   \   000031   A3           INC     DPTR
   \   000032   04           INC     A
   \   000033   12....       LCALL   ?Subroutine5 & 0xFFFF
   1726              pReportCmd->attrList[0].dataType 	= ZCL_DATATYPE_CHAR_STR;
   1727              pReportCmd->attrList[0].attrData 	= (void *)(Free_Data);
   1728          		// Endpoint and coordShortAddr
   1729          	pReportCmd->attrList[1].attrID 		= NLME_GetCoordShortAddr();
   \                     ??CrossCallReturnLabel_2:
   \   000036                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000036   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000039   12....       LCALL   ?Subroutine4 & 0xFFFF
   1730              pReportCmd->attrList[1].dataType 	= ZCL_DATATYPE_UINT8;
   1731              pReportCmd->attrList[1].attrData 	= (void *)(&Free_Data_Size);
   1732          
   1733              zcl_SendReportCmd( SAMPLETHERMOSTAT_ENDPOINT, &DstAddr,
   1734                                 ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
   1735                                 pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, zclSampleThermostatSeqNum++ );
   1736            }
   \                     ??CrossCallReturnLabel_0:
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   75..01       MOV     ?V2,#0x1
   \   000042   78..         MOV     R0,#?V2
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   78..         MOV     R0,#?V2
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C01         MOV     R4,#0x1
   \   000053   7D02         MOV     R5,#0x2
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?XSTACK_DISP101_8
   \   00005A   7908         MOV     R1,#0x8
   \   00005C   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   00005F   7405         MOV     A,#0x5
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   1737          
   1738            osal_mem_free( pReportCmd );
   \                     ??zclSampleThermostat_SendFreeData_0:
   \   000064                ; Setup parameters for call to function osal_mem_free
   \   000064   AA..         MOV     R2,?V0
   \   000066   AB..         MOV     R3,?V1
   \   000068   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1739          	#endif  // ZCL_REPORT
   1740          }
   \   00006B   740C         MOV     A,#0xc
   \   00006D                REQUIRE ?Subroutine3
   \   00006D                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   74FF         MOV     A,#-0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   74A0         MOV     A,#-0x60
   \   000004   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000007   7442         MOV     A,#0x42
   \   000009   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00000C   A3           INC     DPTR
   \   00000D   74..         MOV     A,#Free_Data & 0xff
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   74..         MOV     A,#(Free_Data >> 8) & 0xff
   \   000013   F0           MOVX    @DPTR,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   EA           MOV     A,R2
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   EB           MOV     A,R3
   \   000010   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000013   7420         MOV     A,#0x20
   \   000015   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000018   A3           INC     DPTR
   \   000019   74..         MOV     A,#Free_Data_Size & 0xff
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   74..         MOV     A,#(Free_Data_Size >> 8) & 0xff
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   90....       MOV     DPTR,#zclSampleThermostatSeqNum
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   7401         MOV     A,#0x1
   \   000027   28           ADD     A,R0
   \   000028   F0           MOVX    @DPTR,A
   \   000029                ; Setup parameters for call to function zcl_SendReportCmd
   \   000029                ; Setup parameters for call to function zcl_SendReportCmd
   \   000029   E8           MOV     A,R0
   \   00002A   F5..         MOV     ?V2,A
   \   00002C   78..         MOV     R0,#?V2
   \   00002E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1741          void zclSampleThermostat_SendC(void)
   \                     zclSampleThermostat_SendC:
   1742          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1743          	char add[17];
   1744          	for(uint8 i = 1;i<=16;i++)
   \   00000A   7A01         MOV     R2,#0x1
   1745          	{
   1746          		add[i-1] =  Free_Data[i];
   \                     ??zclSampleThermostat_SendC_0:
   \   00000C   EA           MOV     A,R2
   \   00000D   F8           MOV     R0,A
   \   00000E   74..         MOV     A,#Free_Data & 0xff
   \   000010   28           ADD     A,R0
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   34..         ADDC    A,#(Free_Data >> 8) & 0xff
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C0E0         PUSH    A
   \   00001B   740C         MOV     A,#0xc
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine23 & 0xFFFF
   1747          	}
   \                     ??CrossCallReturnLabel_47:
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
   \   000026   0A           INC     R2
   \   000027   EA           MOV     A,R2
   \   000028   C3           CLR     C
   \   000029   9411         SUBB    A,#0x11
   \   00002B   40DF         JC      ??zclSampleThermostat_SendC_0
   1748          	for(uint8 i = 0; i < 16;i++) 
   \   00002D   7A00         MOV     R2,#0x0
   1749          	{
   1750          	   	if( add[i] >= 'A' )
   \                     ??zclSampleThermostat_SendC_1:
   \   00002F   EA           MOV     A,R2
   \   000030   F8           MOV     R0,A
   \   000031   740C         MOV     A,#0xc
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E582         MOV     A,DPL
   \   000038   28           ADD     A,R0
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   3583         ADDC    A,DPH
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   C3           CLR     C
   \   000042   9441         SUBB    A,#0x41
   \   000044   E0           MOVX    A,@DPTR
   \   000045   4004         JC      ??zclSampleThermostat_SendC_2
   1751          	  		add[i] = add[i] - '7';
   \   000047   24C9         ADD     A,#-0x37
   \   000049   8002         SJMP    ??zclSampleThermostat_SendC_3
   1752          	   	else 
   1753          	      	add[i] = add[i] - '0';
   \                     ??zclSampleThermostat_SendC_2:
   \   00004B   24D0         ADD     A,#-0x30
   \                     ??zclSampleThermostat_SendC_3:
   \   00004D   F0           MOVX    @DPTR,A
   1754          		if ( i%2 != 0 ) 
   \   00004E   EA           MOV     A,R2
   \   00004F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000051   5016         JNC     ??zclSampleThermostat_SendC_4
   1755          			add[i-1] = (add[i-1]<<4) + add[i];
   \   000053   E582         MOV     A,DPL
   \   000055   24FF         ADD     A,#-0x1
   \   000057   F8           MOV     R0,A
   \   000058   E583         MOV     A,DPH
   \   00005A   34FF         ADDC    A,#-0x1
   \   00005C   F9           MOV     R1,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FB           MOV     R3,A
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C4           SWAP    A
   \   000065   54F0         ANL     A,#0xf0
   \   000067   2B           ADD     A,R3
   \   000068   F0           MOVX    @DPTR,A
   1756           	}	
   \                     ??zclSampleThermostat_SendC_4:
   \   000069   0A           INC     R2
   \   00006A   EA           MOV     A,R2
   \   00006B   C3           CLR     C
   \   00006C   9410         SUBB    A,#0x10
   \   00006E   40BF         JC      ??zclSampleThermostat_SendC_1
   1757          	#ifdef ZCL_REPORT
   1758          	// Can't send via indirect ??? (system reset)
   1759          	afAddrType_t DstAddr;
   1760            DstAddr.addrMode = (afAddrMode_t)afAddr64Bit;
   \   000070   7408         MOV     A,#0x8
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   7403         MOV     A,#0x3
   \   000077   F0           MOVX    @DPTR,A
   1761            DstAddr.endPoint = 0xFF;
   \   000078   7409         MOV     A,#0x9
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?Subroutine7 & 0xFFFF
   1762            DstAddr.addr.shortAddr = 0xFFFF;
   1763            DstAddr.addr.extAddr[0] = add[14];
   \                     ??CrossCallReturnLabel_7:
   \   000080   741A         MOV     A,#0x1a
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   F0           MOVX    @DPTR,A
   1764            DstAddr.addr.extAddr[1] = add[12];
   \   00008D   7418         MOV     A,#0x18
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   E0           MOVX    A,@DPTR
   \   000093   C0E0         PUSH    A
   \   000095   7401         MOV     A,#0x1
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
   1765            DstAddr.addr.extAddr[2] = add[10];
   \   00009D   7416         MOV     A,#0x16
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   C0E0         PUSH    A
   \   0000A5   7402         MOV     A,#0x2
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   D0E0         POP     A
   \   0000AC   F0           MOVX    @DPTR,A
   1766            DstAddr.addr.extAddr[3] = add[8];
   \   0000AD   7414         MOV     A,#0x14
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   C0E0         PUSH    A
   \   0000B5   7403         MOV     A,#0x3
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   D0E0         POP     A
   \   0000BC   F0           MOVX    @DPTR,A
   1767            DstAddr.addr.extAddr[4] = add[6];
   \   0000BD   7412         MOV     A,#0x12
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   C0E0         PUSH    A
   \   0000C5   7404         MOV     A,#0x4
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   D0E0         POP     A
   \   0000CC   F0           MOVX    @DPTR,A
   1768            DstAddr.addr.extAddr[5] = add[4];
   \   0000CD   7410         MOV     A,#0x10
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   C0E0         PUSH    A
   \   0000D5   7405         MOV     A,#0x5
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   D0E0         POP     A
   \   0000DC   F0           MOVX    @DPTR,A
   1769            DstAddr.addr.extAddr[6] = add[2];
   \   0000DD   740E         MOV     A,#0xe
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   C0E0         PUSH    A
   \   0000E5   7406         MOV     A,#0x6
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   D0E0         POP     A
   \   0000EC   F0           MOVX    @DPTR,A
   1770            DstAddr.addr.extAddr[7] = add[0];
   \   0000ED   740C         MOV     A,#0xc
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   C0E0         PUSH    A
   \   0000F5   7407         MOV     A,#0x7
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   D0E0         POP     A
   \   0000FC   F0           MOVX    @DPTR,A
   1771          	
   1772            zclReportCmd_t *pReportCmd;
   1773            pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + 2 * sizeof(zclReport_t) );
   \   0000FD                ; Setup parameters for call to function osal_mem_alloc
   \   0000FD   7A0B         MOV     R2,#0xb
   \   0000FF   7B00         MOV     R3,#0x0
   \   000101   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000104   8A..         MOV     ?V0,R2
   \   000106   8B..         MOV     ?V1,R3
   1774            if ( pReportCmd != NULL )
   \   000108   EA           MOV     A,R2
   \   000109   45..         ORL     A,?V1
   \   00010B   603B         JZ      ??zclSampleThermostat_SendC_5
   1775            {
   1776              pReportCmd->numAttr = 2;
   \   00010D   8A82         MOV     DPL,R2
   \   00010F   8B83         MOV     DPH,R3
   \   000111   7402         MOV     A,#0x2
   \   000113   F0           MOVX    @DPTR,A
   1777          		
   1778          		// Data
   1779              pReportCmd->attrList[0].attrID 		= ATTRID_CONTROL_S;
   \   000114   A3           INC     DPTR
   \   000115   7408         MOV     A,#0x8
   \   000117   12....       LCALL   ?Subroutine5 & 0xFFFF
   1780              pReportCmd->attrList[0].dataType 	= ZCL_DATATYPE_CHAR_STR;
   1781              pReportCmd->attrList[0].attrData 	= (void *)(Free_Data);
   1782          		// Endpoint and coordShortAddr
   1783          	pReportCmd->attrList[1].attrID 		= NLME_GetCoordShortAddr();
   \                     ??CrossCallReturnLabel_3:
   \   00011A                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00011A   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00011D   12....       LCALL   ?Subroutine4 & 0xFFFF
   1784              pReportCmd->attrList[1].dataType 	= ZCL_DATATYPE_UINT8;
   1785              pReportCmd->attrList[1].attrData 	= (void *)(&Free_Data_Size);
   1786          
   1787              zcl_SendReportCmd( SAMPLETHERMOSTAT_ENDPOINT, &DstAddr,
   1788                                 ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
   1789                                 pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, zclSampleThermostatSeqNum++ );
   1790            }
   \                     ??CrossCallReturnLabel_1:
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000123   75..01       MOV     ?V2,#0x1
   \   000126   78..         MOV     R0,#?V2
   \   000128   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012B   78..         MOV     R0,#?V2
   \   00012D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000130   78..         MOV     R0,#?V0
   \   000132   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000135   7C01         MOV     R4,#0x1
   \   000137   7D02         MOV     R5,#0x2
   \   000139   7405         MOV     A,#0x5
   \   00013B   12....       LCALL   ?XSTACK_DISP101_8
   \   00013E   7908         MOV     R1,#0x8
   \   000140   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   000143   7405         MOV     A,#0x5
   \   000145   12....       LCALL   ?DEALLOC_XSTACK8
   1791          
   1792            osal_mem_free( pReportCmd );
   \                     ??zclSampleThermostat_SendC_5:
   \   000148                ; Setup parameters for call to function osal_mem_free
   \   000148   AA..         MOV     R2,?V0
   \   00014A   AB..         MOV     R3,?V1
   \   00014C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1793          	#endif  // ZCL_REPORT
   1794          }
   \   00014F   741D         MOV     A,#0x1d
   \   000151   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleThermostat_NwkState`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for aProcessCmd>`:
   \   000000   01           DB 1
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleThermostat_TestEp>`:
   \   000000   14           DB 20
   \   000001   ....         DW zclSampleThermostat_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleThermostat_CmdCallb`:
   \   000000   ....         DW `??zclSampleThermostat_BasicResetCB::?relay`
   \   000002   ....         DW `??zclSampleThermostat_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??zclSampleThermostat_IdentifyQueryRspCB::?rela`
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for clusterIDs>`:
   \   000000   0102         DW 513

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for clusterIDs>_1`:
   \   000000   0102         DW 513

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_LcdDisplayUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_LcdDisplayMainMode::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_LcdDisplayMainMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_LcdDisplayHelpMode::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_LcdDisplayHelpMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_LcdDisplayHeatMode::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_LcdDisplayHeatMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_LcdDisplayCoolMode::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_LcdDisplayCoolMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleThermostat_ProcessIdentifyTimeChange:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_ProcessAppMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_ProcessAppMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_ProcessFoundationMsg::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_ProcessFoundationMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_IdentifyQueryRspCB::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_ProcessInReportCmd::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_ProcessInReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_EZModeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_EZModeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_BindingProcess::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_BindingProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_SendFreeData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_SendFreeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleThermostat_SendC::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleThermostat_SendC

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[EVENT] ZDO_CB_MSG">`:
   \   000000   5B455645     DB "[EVENT] ZDO_CB_MSG"
   \            4E545D20
   \            5A444F5F
   \            43425F4D
   \            534700  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[EVENT] MT_SYS_APP_MSG">`:
   \   000000   5B455645     DB "[EVENT] MT_SYS_APP_MSG"
   \            4E545D20
   \            4D545F53
   \            59535F41
   \            50505F4D
   \            534700  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[EVENT] ZCL_INCOMING_MSG">`:
   \   000000   5B455645     DB "[EVENT] ZCL_INCOMING_MSG"
   \            4E545D20
   \            5A434C5F
   \            494E434F
   \            4D494E47
   \            5F4D5347
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[EVENT] KEY_CHANGE">`:
   \   000000   5B455645     DB "[EVENT] KEY_CHANGE"
   \            4E545D20
   \            4B45595F
   \            4348414E
   \            474500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[EVENT] ZDO_STATE_CHANGE">`:
   \   000000   5B455645     DB "[EVENT] ZDO_STATE_CHANGE"
   \            4E545D20
   \            5A444F5F
   \            53544154
   \            455F4348
   \            414E4745
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[EVENT] SAMPLETHERMOS...">`:
   \   000000   5B455645     DB "[EVENT] SAMPLETHERMOSTAT_IDENTIFY_TIMEOUT_EVT"
   \            4E545D20
   \            53414D50
   \            4C455448
   \            45524D4F
   \            53544154
   \            5F494445
   \            4E544946
   \            595F5449
   \            4D454F55
   \            545F4556
   \            5400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[EVENT] SAMPLETHERMOS...">_1`:
   \   000000   5B455645     DB "[EVENT] SAMPLETHERMOSTAT_MAIN_SCREEN_EVT"
   \            4E545D20
   \            53414D50
   \            4C455448
   \            45524D4F
   \            53544154
   \            5F4D4149
   \            4E5F5343
   \            5245454E
   \            5F455654
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[EVENT] SAMPLETHERMOS...">_2`:
   \   000000   5B455645     DB "[EVENT] SAMPLETHERMOSTAT_EZMODE_NEXTSTATE_EVT"
   \            4E545D20
   \            53414D50
   \            4C455448
   \            45524D4F
   \            53544154
   \            5F455A4D
   \            4F44455F
   \            4E455854
   \            53544154
   \            455F4556
   \            5400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[EVENT] SAMPLETHERMOS...">_3`:
   \   000000   5B455645     DB "[EVENT] SAMPLETHERMOSTAT_EZMODE_TIMEOUT_EVT"
   \            4E545D20
   \            53414D50
   \            4C455448
   \            45524D4F
   \            53544154
   \            5F455A4D
   \            4F44455F
   \            54494D45
   \            4F55545F
   \            45565400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SAMPLETHERMOSTAT_JOIN...">`:
   \   000000   53414D50     DB "SAMPLETHERMOSTAT_JOIN_SETUP_EVT"
   \            4C455448
   \            45524D4F
   \            53544154
   \            5F4A4F49
   \            4E5F5345
   \            5455505F
   \            45565400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SW6">`:
   \   000000   53573600     DB "SW6"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "usedEntries: ">`:
   \   000000   75736564     DB "usedEntries: "
   \            456E7472
   \            6965733A
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Entry 0: ">`:
   \   000000   456E7472     DB "Entry 0: "
   \            7920303A
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " | ">`:
   \   000000   207C2000     DB " | "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Entry 1: ">`:
   \   000000   456E7472     DB "Entry 1: "
   \            7920313A
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Entry 2: ">`:
   \   000000   456E7472     DB "Entry 2: "
   \            7920323A
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Entry 3: ">`:
   \   000000   456E7472     DB "Entry 3: "
   \            7920333A
   \            2000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SW8">`:
   \   000000   53573800     DB "SW8"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode">`:
   \   000000   455A4D6F     DB "EZMode"
   \            646500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEMP: ">`:
   \   000000   54454D50     DB "TEMP: "
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "N/A">`:
   \   000000   4E2F4100     DB "N/A"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "C">`:
   \   000000   4300         DB "C"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SW5: Help      *">`:
   \   000000   5357353A     DB "SW5: Help      *"
   \            2048656C
   \            70202020
   \            2020202A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SW5: Help       ">`:
   \   000000   5357353A     DB "SW5: Help       "
   \            2048656C
   \            70202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HEAT TEMP: ">`:
   \   000000   48454154     DB "HEAT TEMP: "
   \            2054454D
   \            503A2000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "COOL TEMP: ">`:
   \   000000   434F4F4C     DB "COOL TEMP: "
   \            2054454D
   \            503A2000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZBR:">`:
   \   000000   405A4252     DB "@ZBR:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ";">`:
   \   000000   3B00         DB ";"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!">`:
   \   000000   2100         DB "!"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZBF:">`:
   \   000000   405A4246     DB "@ZBF:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZBS:">`:
   \   000000   405A4253     DB "@ZBS:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Success">`:
   \   000000   455A4D6F     DB "EZMode: Success"
   \            64653A20
   \            53756363
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZDst:">`:
   \   000000   455A4473     DB "EZDst:"
   \            743A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " EP:">`:
   \   000000   2045503A     DB " EP:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: BadParm">`:
   \   000000   455A4D6F     DB "EZMode: BadParm"
   \            64653A20
   \            42616450
   \            61726D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Cancel">`:
   \   000000   455A4D6F     DB "EZMode: Cancel"
   \            64653A20
   \            43616E63
   \            656C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: NoMatch">`:
   \   000000   455A4D6F     DB "EZMode: NoMatch"
   \            64653A20
   \            4E6F4D61
   \            74636800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: TimeOut">`:
   \   000000   455A4D6F     DB "EZMode: TimeOut"
   \            64653A20
   \            54696D65
   \            4F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     29   zclSampleThermostat_BasicResetCB
        2      0   -> MT_SysCommandProcessing
        2      0   -> zgWriteStartupOptions
      2     25   zclSampleThermostat_BindingProcess
        2      9   -> HalLcdWriteString
        2      9   -> zcl_InvokeEZMode
      0     39   zclSampleThermostat_EZModeCB
        0     35   -> HalLcdWriteString
        0     37   -> _ltoa
        0     38   -> osal_memcpy
        0     39   -> osal_start_timerEx
        0     35   -> zclHA_uint16toa
        0     35   -> zclSampleThermostat_ProcessIdentifyTimeChange
      0     45   zclSampleThermostat_HandleKeys
        0     29   -> GetBindingTableEntry
        0     29   -> HalLcdWriteString
        0     29   -> NLME_GetShortAddr
        0     29   -> UART_DebugPrint
        0     29   -> UART_ZCmdPrint
        0     29   -> UART_ZCmdPrintNum
        0     29   -> UART_ZCmdPrintString
        0     29   -> ZDP_MgmtPermitJoinReq
        0     29   -> bindCapacity
        0     29   -> zclSampleThermostat_BasicResetCB
        0     29   -> zclSampleThermostat_LcdDisplayUpdate
        0     29   -> zcl_InvokeEZMode
      2      0   zclSampleThermostat_IdentifyCB
        2      0   -> zclSampleThermostat_ProcessIdentifyTimeChange
      2      2   zclSampleThermostat_IdentifyQueryRspCB
        2      2   -> zcl_EZModeAction
      0     14   zclSampleThermostat_Init
        0     10   -> GPIO_init
        0     10   -> HalLcdWriteString
        0     10   -> NLME_GetShortAddr
        0     10   -> RegisterForKeys
        0     10   -> UART_Init
        0     10   -> ZDO_RegisterForZDOMsg
        0     10   -> afRegister
        0     10   -> osal_set_event
        0     14   -> osal_start_timerEx
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclHA_Init
        0     10   -> zcl_RegisterEZMode
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerForMsg
      0     30   zclSampleThermostat_LcdDisplayCoolMode
        0     27   -> HalLcdWriteString
        0     29   -> _ltoa
        0     30   -> osal_memcpy
      0     30   zclSampleThermostat_LcdDisplayHeatMode
        0     27   -> HalLcdWriteString
        0     29   -> _ltoa
        0     30   -> osal_memcpy
      2      0   zclSampleThermostat_LcdDisplayHelpMode
        2      0   -> HalLcdWriteString
      0     30   zclSampleThermostat_LcdDisplayMainMode
        0     27   -> HalLcdWriteString
        0     29   -> _ltoa
        0     30   -> osal_memcpy
        0     27   -> zclHA_LcdStatusLine1
      4     29   zclSampleThermostat_LcdDisplayUpdate
        2      0   -> zclSampleThermostat_LcdDisplayCoolMode
        2      0   -> zclSampleThermostat_LcdDisplayHeatMode
        2      0   -> zclSampleThermostat_LcdDisplayHelpMode
        2      0   -> zclSampleThermostat_LcdDisplayMainMode
      1     68   zclSampleThermostat_ProcessAppMsg
        0     41   -> zclParseHdr
        0     45   -> zclSampleThermostat_ProcessFoundationMsg
        0     52   -> zcl_SendCommand
      0     74   zclSampleThermostat_ProcessFoundationMsg
        0     18   -> osal_mem_free
        0     18   -> zclParseInConfigReportCmd
        0     18   -> zclParseInReadCmd
        0     18   -> zclParseInReadReportCfgCmd
        0     18   -> zclParseInReportCmd
        0     18   -> zclParseInWriteCmd
        0     29   -> zcl_SendCommand
        0     23   -> zcl_SendConfigReportCmd
        0     23   -> zcl_SendRead
        0     23   -> zcl_SendReadReportCfgCmd
        0     23   -> zcl_SendReportCmd
        0     24   -> zcl_SendWriteRequest
      2     39   zclSampleThermostat_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      1     78   zclSampleThermostat_ProcessInReportCmd
        0     62   -> HalLedBlink
        0     62   -> HalUARTWrite
        0     62   -> UART_ZCmdPrint
        0     62   -> UART_ZCmdPrintBuffer
        0     62   -> UART_ZCmdPrintNum
        0     62   -> UART_ZCmdPrintString
      1     46   zclSampleThermostat_SendC
        0     41   -> NLME_GetCoordShortAddr
        0     41   -> osal_mem_alloc
        0     41   -> osal_mem_free
        0     46   -> zcl_SendReportCmd
      0     29   zclSampleThermostat_SendFreeData
        0     24   -> NLME_GetCoordShortAddr
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     29   -> zcl_SendReportCmd
      0     20   zclSampleThermostat_event_loop
        0     16   -> UART_DebugPrint
        0     16   -> UART_ParseRxPackage
        0     16   -> ZCMD_ReplyCMD
        0     16   -> ZDO_ParseEPListRsp
        0     16   -> osal_mem_free
        0     16   -> osal_msg_deallocate
        0     16   -> osal_msg_receive
        0     16   -> osal_set_event
        0     20   -> osal_start_timerEx
        0     16   -> zclSampleThermostat_BindingProcess
        0     16   -> zclSampleThermostat_HandleKeys
        0     16   -> zclSampleThermostat_LcdDisplayUpdate
        0     16   -> zclSampleThermostat_ProcessAppMsg
        0     16   -> zclSampleThermostat_ProcessIdentifyTimeChange
        0     16   -> zclSampleThermostat_ProcessInReportCmd
        0     16   -> zcl_EZModeAction


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant " EP:">
       4  ?<Constant " | ">
       2  ?<Constant "!">
       1  ?<Constant "">
       2  ?<Constant ";">
       6  ?<Constant "@ZBF:">
       6  ?<Constant "@ZBR:">
       6  ?<Constant "@ZBS:">
       2  ?<Constant "C">
      12  ?<Constant "COOL TEMP: ">
       7  ?<Constant "EZDst:">
       7  ?<Constant "EZMode">
      16  ?<Constant "EZMode: BadParm">
      15  ?<Constant "EZMode: Cancel">
      16  ?<Constant "EZMode: NoMatch">
      16  ?<Constant "EZMode: Success">
      16  ?<Constant "EZMode: TimeOut">
      10  ?<Constant "Entry 0: ">
      10  ?<Constant "Entry 1: ">
      10  ?<Constant "Entry 2: ">
      10  ?<Constant "Entry 3: ">
      12  ?<Constant "HEAT TEMP: ">
       4  ?<Constant "N/A">
      32  ?<Constant "SAMPLETHERMOSTAT_JOIN...">
      17  ?<Constant "SW5: Help       ">
      17  ?<Constant "SW5: Help      *">
       4  ?<Constant "SW6">
       4  ?<Constant "SW8">
       7  ?<Constant "TEMP: ">
      19  ?<Constant "[EVENT] KEY_CHANGE">
      23  ?<Constant "[EVENT] MT_SYS_APP_MSG">
      46  ?<Constant "[EVENT] SAMPLETHERMOS...">
      41  ?<Constant "[EVENT] SAMPLETHERMOS...">_1
      46  ?<Constant "[EVENT] SAMPLETHERMOS...">_2
      44  ?<Constant "[EVENT] SAMPLETHERMOS...">_3
      25  ?<Constant "[EVENT] ZCL_INCOMING_MSG">
      19  ?<Constant "[EVENT] ZDO_CB_MSG">
      25  ?<Constant "[EVENT] ZDO_STATE_CHANGE">
      14  ?<Constant "usedEntries: ">
       4  ?<Initializer for aProcessCmd>
       2  ?<Initializer for clusterIDs>
       2  ?<Initializer for clusterIDs>_1
       6  ?<Initializer for sampleThermostat_TestEp>
      24  ?<Initializer for zclSampleThermostat_CmdCallb
       1  ?<Initializer for zclSampleThermostat_NwkState
       6  ??Subroutine30_0
       6  ??Subroutine31_0
       7  ??Subroutine32_0
      13  ??Subroutine33_0
       3  ??Subroutine34_0
       1  ??Subroutine35_0
       5  ??Subroutine36_0
       8  ??Subroutine37_0
       6  ??Subroutine38_0
       3  ?Subroutine0
      81  ?Subroutine1
       6  ?Subroutine10
      17  ?Subroutine11
      14  ?Subroutine12
      13  ?Subroutine13
      12  ?Subroutine14
       3  ?Subroutine15
      13  ?Subroutine16
      15  ?Subroutine17
      16  ?Subroutine18
      12  ?Subroutine19
       5  ?Subroutine2
       6  ?Subroutine20
       8  ?Subroutine21
       4  ?Subroutine22
      19  ?Subroutine23
      12  ?Subroutine24
      16  ?Subroutine25
       9  ?Subroutine26
       6  ?Subroutine27
       7  ?Subroutine28
       9  ?Subroutine29
       8  ?Subroutine3
      47  ?Subroutine4
      21  ?Subroutine5
      17  ?Subroutine6
      13  ?Subroutine7
      10  ?Subroutine8
       6  ?Subroutine9
       4  __Constant_1388
       4  __Constant_2710
       4  __Constant_3e8
       4  __Constant_a
       4  __Constant_bb8
       4  aProcessCmd
       2  clusterIDs
       2  clusterIDs
       1  gPermitDuration
       1  giThermostatScreenMode
       2  sClearLine
      14  sDeviceName
      16  sStoreCoolTemp
      16  sStoreHeatTemp
      17  sSwCoolSet
      13  sSwEZMode
      17  sSwHeatSet
      10  sSwHelp
       6  sTempLine2
      17  sTempLine3
       6  sampleThermostat_TestEp
       1  zclSampleThermostatSeqNum
      21  zclSampleThermostat_BasicResetCB
       6  zclSampleThermostat_BasicResetCB::?relay
     126  zclSampleThermostat_BindingProcess
       6  zclSampleThermostat_BindingProcess::?relay
      24  zclSampleThermostat_CmdCallbacks
      12  zclSampleThermostat_DstAddr
     321  zclSampleThermostat_EZModeCB
       6  zclSampleThermostat_EZModeCB::?relay
     667  zclSampleThermostat_HandleKeys
       6  zclSampleThermostat_HandleKeys::?relay
      27  zclSampleThermostat_IdentifyCB
       6  zclSampleThermostat_IdentifyCB::?relay
      22  zclSampleThermostat_IdentifyQueryRspCB
       6  zclSampleThermostat_IdentifyQueryRspCB::?relay
     213  zclSampleThermostat_Init
       6  zclSampleThermostat_Init::?relay
      63  zclSampleThermostat_LcdDisplayCoolMode
       6  zclSampleThermostat_LcdDisplayCoolMode::?relay
      60  zclSampleThermostat_LcdDisplayHeatMode
       6  zclSampleThermostat_LcdDisplayHeatMode::?relay
      33  zclSampleThermostat_LcdDisplayHelpMode
       6  zclSampleThermostat_LcdDisplayHelpMode::?relay
     226  zclSampleThermostat_LcdDisplayMainMode
       6  zclSampleThermostat_LcdDisplayMainMode::?relay
      95  zclSampleThermostat_LcdDisplayUpdate
       6  zclSampleThermostat_LcdDisplayUpdate::?relay
       1  zclSampleThermostat_NwkState
     392  zclSampleThermostat_ProcessAppMsg
       6  zclSampleThermostat_ProcessAppMsg::?relay
     597  zclSampleThermostat_ProcessFoundationMsg
       6  zclSampleThermostat_ProcessFoundationMsg::?relay
      79  zclSampleThermostat_ProcessIdentifyTimeChange
       6  zclSampleThermostat_ProcessIdentifyTimeChange::?relay
     870  zclSampleThermostat_ProcessInReportCmd
       6  zclSampleThermostat_ProcessInReportCmd::?relay
      10  zclSampleThermostat_RegisterEZModeData
     340  zclSampleThermostat_SendC
       6  zclSampleThermostat_SendC::?relay
     109  zclSampleThermostat_SendFreeData
       6  zclSampleThermostat_SendFreeData::?relay
       1  zclSampleThermostat_TaskID
     661  zclSampleThermostat_event_loop
       6  zclSampleThermostat_event_loop::?relay

 
 5 405 bytes in segment BANKED_CODE
   114 bytes in segment BANK_RELAYS
    39 bytes in segment XDATA_I
    39 bytes in segment XDATA_ID
   736 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
   153 bytes of CODE     memory
   716 bytes of CONST    memory (+ 20 bytes shared)
 5 405 bytes of HUGECODE memory
    55 bytes of XDATA    memory

Errors: none
Warnings: 6
