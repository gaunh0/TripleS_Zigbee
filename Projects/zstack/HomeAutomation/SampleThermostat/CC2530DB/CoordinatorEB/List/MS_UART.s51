///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               27/Feb/2017  10:11:43
// Copyright 2004-2016 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART.c
//    Command line       =  
//        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "C:\Users\Teddy\Desktop\aaa\[COMBROS]
//        Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFAFA
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART.c" -D
//        COORDINATOR -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE
//        -D xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D
//        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
//        ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D
//        ZCL_HVAC_CLUSTER -D xHAL_UART=TRUE -D xHAL_UART_DMA=1 -lC
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
//        -lA "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\Teddy\Desktop\aaa\[COMBROS]
//        Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\HomeAutomation\MY-SOURCE\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\CoordinatorEB\List\MS_UART.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MS_UART

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_DIV_MOD
        EXTERN ?L_MUL
        EXTERN ?L_NEG
        EXTERN ?SL_GE_X
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??UART0_RxProcessCB::?relay`,0203H
        FUNCTION `??UART1_RxProcessCB::?relay`,0203H
        PUBLIC `??UART_DataAvailable::?relay`
        FUNCTION `??UART_DataAvailable::?relay`,0203H
        PUBLIC `??UART_DebugPrint::?relay`
        FUNCTION `??UART_DebugPrint::?relay`,0203H
        PUBLIC `??UART_DebugPrintLCD::?relay`
        FUNCTION `??UART_DebugPrintLCD::?relay`,0203H
        PUBLIC `??UART_DebugPrintLCDNum::?relay`
        FUNCTION `??UART_DebugPrintLCDNum::?relay`,0203H
        PUBLIC `??UART_DebugPrintNum::?relay`
        FUNCTION `??UART_DebugPrintNum::?relay`,0203H
        PUBLIC `??UART_GetData::?relay`
        FUNCTION `??UART_GetData::?relay`,0203H
        PUBLIC `??UART_Init::?relay`
        FUNCTION `??UART_Init::?relay`,0203H
        PUBLIC `??UART_ParseLength::?relay`
        FUNCTION `??UART_ParseLength::?relay`,0203H
        PUBLIC `??UART_ParseRxPackage::?relay`
        FUNCTION `??UART_ParseRxPackage::?relay`,0203H
        PUBLIC `??UART_SendNum::?relay`
        FUNCTION `??UART_SendNum::?relay`,0203H
        PUBLIC `??UART_SendString::?relay`
        FUNCTION `??UART_SendString::?relay`,0203H
        PUBLIC `??UART_ZCmdPrint::?relay`
        FUNCTION `??UART_ZCmdPrint::?relay`,0203H
        PUBLIC `??UART_ZCmdPrintBuffer::?relay`
        FUNCTION `??UART_ZCmdPrintBuffer::?relay`,0203H
        PUBLIC `??UART_ZCmdPrintNum::?relay`
        FUNCTION `??UART_ZCmdPrintNum::?relay`,0203H
        PUBLIC `??UART_ZCmdPrintString::?relay`
        FUNCTION `??UART_ZCmdPrintString::?relay`,0203H
        FUNCTION `??uart_pow_of::?relay`,0203H
        FUNCTION UART0_RxProcessCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 140, STACK
        FUNCTION UART1_RxProcessCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC UART_DataAvailable
        FUNCTION UART_DataAvailable,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC UART_DebugPrint
        FUNCTION UART_DebugPrint,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC UART_DebugPrintLCD
        FUNCTION UART_DebugPrintLCD,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC UART_DebugPrintLCDNum
        FUNCTION UART_DebugPrintLCDNum,0203H
        ARGFRAME XSTACK, 4, STACK
        PUBLIC UART_DebugPrintNum
        FUNCTION UART_DebugPrintNum,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC UART_GetData
        FUNCTION UART_GetData,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC UART_Init
        FUNCTION UART_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC UART_ParseLength
        FUNCTION UART_ParseLength,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC UART_ParseRxPackage
        FUNCTION UART_ParseRxPackage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC UART_SendNum
        FUNCTION UART_SendNum,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC UART_SendString
        FUNCTION UART_SendString,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC UART_ZCmdPrint
        FUNCTION UART_ZCmdPrint,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC UART_ZCmdPrintBuffer
        FUNCTION UART_ZCmdPrintBuffer,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC UART_ZCmdPrintNum
        FUNCTION UART_ZCmdPrintNum,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC UART_ZCmdPrintString
        FUNCTION UART_ZCmdPrintString,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK __Constant_0
        FUNCTION uart_pow_of,080203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
`??Hal_UART_RxBufLen::?relay` SYMBOL "?relay", Hal_UART_RxBufLen
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen
UART_DataAvailable  SYMBOL "UART_DataAvailable"
`??UART_DataAvailable::?relay` SYMBOL "?relay", UART_DataAvailable
UART_DebugPrint     SYMBOL "UART_DebugPrint"
`??UART_DebugPrint::?relay` SYMBOL "?relay", UART_DebugPrint
UART_DebugPrintLCD  SYMBOL "UART_DebugPrintLCD"
`??UART_DebugPrintLCD::?relay` SYMBOL "?relay", UART_DebugPrintLCD
UART_DebugPrintLCDNum SYMBOL "UART_DebugPrintLCDNum"
`??UART_DebugPrintLCDNum::?relay` SYMBOL "?relay", UART_DebugPrintLCDNum
UART_DebugPrintNum  SYMBOL "UART_DebugPrintNum"
`??UART_DebugPrintNum::?relay` SYMBOL "?relay", UART_DebugPrintNum
UART_GetData        SYMBOL "UART_GetData"
`??UART_GetData::?relay` SYMBOL "?relay", UART_GetData
UART_Init           SYMBOL "UART_Init"
`??UART_Init::?relay` SYMBOL "?relay", UART_Init
UART_ParseLength    SYMBOL "UART_ParseLength"
`??UART_ParseLength::?relay` SYMBOL "?relay", UART_ParseLength
UART_ParseRxPackage SYMBOL "UART_ParseRxPackage"
`??UART_ParseRxPackage::?relay` SYMBOL "?relay", UART_ParseRxPackage
UART_SendNum        SYMBOL "UART_SendNum"
`??UART_SendNum::?relay` SYMBOL "?relay", UART_SendNum
UART_SendString     SYMBOL "UART_SendString"
`??UART_SendString::?relay` SYMBOL "?relay", UART_SendString
UART_ZCmdPrint      SYMBOL "UART_ZCmdPrint"
`??UART_ZCmdPrint::?relay` SYMBOL "?relay", UART_ZCmdPrint
UART_ZCmdPrintBuffer SYMBOL "UART_ZCmdPrintBuffer"
`??UART_ZCmdPrintBuffer::?relay` SYMBOL "?relay", UART_ZCmdPrintBuffer
UART_ZCmdPrintNum   SYMBOL "UART_ZCmdPrintNum"
`??UART_ZCmdPrintNum::?relay` SYMBOL "?relay", UART_ZCmdPrintNum
UART_ZCmdPrintString SYMBOL "UART_ZCmdPrintString"
`??UART_ZCmdPrintString::?relay` SYMBOL "?relay", UART_ZCmdPrintString

        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??Hal_UART_RxBufLen::?relay`
        FUNCTION `??Hal_UART_RxBufLen::?relay`,00H
        EXTERN `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,00H
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART.c
//    1 /*******************************************************************************
//    2  *                                            INCLUDES
//    3  *******************************************************************************/
//    4 #include "MS_UART.h"
//    5 
//    6 /*******************************************************************************
//    7  *                                             MACROS
//    8  *******************************************************************************/
//    9 
//   10 /*******************************************************************************
//   11  *                                            CONSTANTS
//   12  *******************************************************************************/
//   13 #define UART0_MAX_TX_BUF_SIZE_128           128
//   14 #define UART0_MAX_TX_BUF_SIZE_256           256
//   15 #define UART0_MAX_RX_BUF_SIZE_128           128
//   16 #define UART0_MAX_RX_BUF_SIZE_256           256
//   17 
//   18 #define UART1_MAX_TX_BUF_SIZE_128           128
//   19 #define UART1_MAX_TX_BUF_SIZE_256           256
//   20 #define UART1_MAX_RX_BUF_SIZE_128           128
//   21 #define UART1_MAX_RX_BUF_SIZE_256           256
//   22 
//   23 /*******************************************************************************
//   24  *                                             TYPEDEFS
//   25  *******************************************************************************/
//   26 
//   27 /*******************************************************************************
//   28  *                                         GLOBAL VARIABLES
//   29  *******************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   30 static UartRxData_t Rx0_Data;
Rx0_Data:
        DS 135
        REQUIRE __INIT_XDATA_Z
//   31 
//   32 /*******************************************************************************
//   33  *                                          FUNCTIONS - External
//   34  *******************************************************************************/
//   35 
//   36 /*******************************************************************************
//   37  *                                          FUNCTIONS - Local
//   38  *******************************************************************************/
//   39 static void UART0_RxProcessCB(uint8 port, uint8 event);
//   40 static void UART1_RxProcessCB(uint8 port, uint8 event);
//   41 
//   42 static void UART0_WriteDataToRxBuffer(uint8* buffer, uint8 length);
//   43 
//   44 static long uart_pow_of(uint8 A, uint8 n);
//   45 
//   46 /*******************************************************************************
//   47  *                                          FUNCTIONS - API
//   48  *******************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   49 void UART_Init(uint8 port)
UART_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function UART_Init
        CODE
//   50 {
        FUNCALL UART_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//   51 	halUARTCfg_t uartConfig;
//   52 
//   53 	if (port == HAL_UART_PORT_0)
        JNZ     ??UART_Init_0
//   54 	{
//   55 		uartConfig.configured = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//   56 		uartConfig.baudRate = HAL_UART_BR_115200;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//   57 		uartConfig.flowControl = HAL_UART_FLOW_OFF;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//   58 		uartConfig.flowControlThreshold = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   59 		uartConfig.rx.maxBufSize = UART0_MAX_RX_BUF_SIZE_128;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   60 		uartConfig.tx.maxBufSize = UART0_MAX_TX_BUF_SIZE_128;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   61 		uartConfig.idleTimeout = 1; 	
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//   62 		uartConfig.intEnable = TRUE;	
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//   63 		uartConfig.callBackFunc = UART0_RxProcessCB;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`??UART0_RxProcessCB::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??UART0_RxProcessCB::?relay` >> 8) & 0xff
        SJMP    ??UART_Init_1
//   64 	}
//   65 	else if (port == HAL_UART_PORT_1)
??UART_Init_0:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??UART_Init_2
//   66 	{
//   67 		uartConfig.configured = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//   68 		uartConfig.baudRate = HAL_UART_BR_115200;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//   69 		uartConfig.flowControl = HAL_UART_FLOW_OFF;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//   70 		uartConfig.flowControlThreshold = 0;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   71 		uartConfig.rx.maxBufSize = UART1_MAX_RX_BUF_SIZE_256;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//   72 		uartConfig.tx.maxBufSize = UART1_MAX_TX_BUF_SIZE_128;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   73 		uartConfig.idleTimeout = 1; 	
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//   74 		uartConfig.intEnable = TRUE;	
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//   75 		uartConfig.callBackFunc = UART1_RxProcessCB;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#`??UART1_RxProcessCB::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??UART1_RxProcessCB::?relay` >> 8) & 0xff
??UART_Init_1:
        MOVX    @DPTR,A
//   76 	}
//   77 	HalUARTOpen (port, &uartConfig);
??UART_Init_2:
        ; Setup parameters for call to function HalUARTOpen
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//   78 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ??Subroutine10_0 & 0xFFFF
          CFI EndBlock cfiBlock0
//   79 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   80 void UART_SendString(uint8 port, uint8 *buf)
UART_SendString:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function UART_SendString
        CODE
        FUNCALL UART_SendString, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_SendString, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock1
//   81 {
//   82 	HalUARTWrite(port, buf, osal_strlen((char*)buf));
//   83 }
//   84 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   85 void UART_SendNum(uint8 port, long num)
UART_SendNum:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function UART_SendNum
        CODE
//   86 {
        FUNCALL UART_SendNum, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_SendNum, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_SendNum, uart_pow_of
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_SendNum, uart_pow_of
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_SendNum, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_SendNum, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_SendNum, uart_pow_of
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     R7,A
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
//   87 	uint8 i;
//   88 	uint8 num_flag = 0;
        MOV     R6,#0x0
//   89 	uint8 tmp_chr[1];
//   90 	
//   91 	if (num == 0)
        MOV     ?V14,#`?<Constant "0">` & 0xff
        MOV     ?V15,#(`?<Constant "0">` >> 8) & 0xff
        MOV     A,R2
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JNZ     ??UART_SendNum_0
//   92 	{
//   93 		HalUARTWrite(port, "0", 1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?V14
        MOV     R3,?V15
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//   94 		return;
        LJMP    ??UART_SendNum_1 & 0xFFFF
//   95 	}
//   96 	if (num < 0)
??UART_SendNum_0:
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V4
        LCALL   ?SL_GE_X
        JC      ??UART_SendNum_2
//   97 	{
//   98 		HalUARTWrite(port, "-", 1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "-">` & 0xff
        MOV     R3,#(`?<Constant "-">` >> 8) & 0xff
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//   99 		num *= -1;
        MOV     R0,#?V4
        LCALL   ?L_NEG
//  100 	}
//  101 
//  102 	for ( i = 9; i > 0; i--)
??UART_SendNum_2:
        MOV     ?V13,#0x9
//  103 	{
//  104 		if ((num / uart_pow_of(10, i-1)) != 0)
??UART_SendNum_3:
        MOV     A,#-0x1
        ADD     A,?V13
        MOV     ?V12,A
        MOV     ?V0,?V4
        MOV     ?V1,?V5
        MOV     ?V2,?V6
        MOV     ?V3,?V7
        ; Setup parameters for call to function uart_pow_of
        MOV     R2,A
        MOV     R1,#0xa
        LCALL   `??uart_pow_of::?relay`; Banked call to: uart_pow_of
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V10,R4
        MOV     ?V11,R5
        MOV     R0,#?V0
        MOV     R1,#?V8
        LCALL   ?L_DIV_MOD
        MOV     A,?V0
        ORL     A,?V1
        ORL     A,?V2
        ORL     A,?V3
        JZ      ??UART_SendNum_4
//  105 		{
//  106 			num_flag = 1;
        MOV     R6,#0x1
//  107 			tmp_chr[0] = num/uart_pow_of(10, i-1) + '0';
        MOV     ?V8,?V4
        MOV     ?V9,?V5
        MOV     ?V10,?V6
        MOV     ?V11,?V7
        ; Setup parameters for call to function uart_pow_of
        MOV     R2,?V12
        MOV     R1,#0xa
        LCALL   `??uart_pow_of::?relay`; Banked call to: uart_pow_of
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     R0,#?V8
        MOV     R1,#?V0
        LCALL   ?L_DIV_MOD
        MOV     A,?V8
        ADD     A,#0x30
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  108 			HalUARTWrite(port, tmp_chr, 1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        SJMP    ??UART_SendNum_5
//  109 		}
//  110 		else
//  111 		{
//  112 			if (num_flag != 0)
??UART_SendNum_4:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??UART_SendNum_6
//  113 			{
//  114 				HalUARTWrite(port, "0", 1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?V14
        MOV     R3,?V15
??UART_SendNum_5:
        MOV     A,R7
        MOV     R1,A
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  115 			}
//  116 		}
//  117 		
//  118 		num %= uart_pow_of(10, i-1);
??UART_SendNum_6:
        ; Setup parameters for call to function uart_pow_of
        MOV     R2,?V12
        MOV     R1,#0xa
        LCALL   `??uart_pow_of::?relay`; Banked call to: uart_pow_of
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?L_DIV_MOD
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        MOV     ?V6,?V2
        MOV     ?V7,?V3
//  119 	}
        DEC     ?V13
        MOV     A,?V13
        JZ      $+5
        LJMP    ??UART_SendNum_3 & 0xFFFF
//  120 }
??UART_SendNum_1:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  121 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  122 long uart_pow_of(uint8 A, uint8 n)
uart_pow_of:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function uart_pow_of
        CODE
//  123 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  124 	uint8 i;
//  125 	uint32 temp = 1;
        MOV     ?V4,#0x1
        MOV     ?V5,#0x0
        MOV     ?V6,#0x0
        MOV     ?V7,#0x0
//  126 	
//  127 	for (i = 0; i < n; i++)
        MOV     R2,#0x0
        SJMP    ??uart_pow_of_0
//  128 	{
//  129 		temp *= A;
??uart_pow_of_1:
        MOV     ?V0,R7
        CLR     A
        MOV     ?V1,A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?L_MUL
//  130 	}
        INC     R2
??uart_pow_of_0:
        MOV     A,R2
        CLR     C
        SUBB    A,R6
        JC      ??uart_pow_of_1
//  131 		
//  132 	return temp;
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
//  133 }
          CFI EndBlock cfiBlock3
//  134 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  135 void UART_DebugPrint(uint8 port, uint8* buf)
UART_DebugPrint:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function UART_DebugPrint
        CODE
//  136 {
        ; Saved register size: 0
        ; Auto size: 0
//  137 	#if (defined UART_DEBUG_TERMINAL) && (UART_DEBUG_TERMINAL == TRUE)
//  138 	HalUARTWrite(port, buf, osal_strlen(buf));
//  139 	HalUARTWrite(port, "\r\n", 2);	
//  140 	#endif
//  141 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock4
//  142 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  143 void UART_DebugPrintNum(uint8 port, long num)
UART_DebugPrintNum:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function UART_DebugPrintNum
        CODE
//  144 {
        ; Saved register size: 0
        ; Auto size: 0
//  145 	#if (defined UART_DEBUG_TERMINAL) && (UART_DEBUG_TERMINAL == TRUE)
//  146 	UART_SendNum(port, num);
//  147 	#endif
//  148 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  149 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  150 void UART_ZCmdPrint(uint8 port, uint8 *buf)
UART_ZCmdPrint:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function UART_ZCmdPrint
        CODE
//  151 {
        FUNCALL UART_ZCmdPrint, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_ZCmdPrint, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_ZCmdPrint, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  152 	#if (defined UART_ZCMD) && (UART_ZCMD == TRUE)
//  153 	HalUARTWrite(port, buf, osal_strlen((char*)buf));
        ; Setup parameters for call to function osal_strlen
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  154 	HalUARTWrite(port, "\r\n", 2);	
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,?V0
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  155 	#endif
//  156 }
          CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
//  157 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  158 void UART_ZCmdPrintBuffer(uint8 port, uint8 *buf, uint8 length)
UART_ZCmdPrintBuffer:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function UART_ZCmdPrintBuffer
        CODE
//  159 {
        FUNCALL UART_ZCmdPrintBuffer, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  160 	#if (defined UART_ZCMD) && (UART_ZCMD == TRUE)
//  161 	HalUARTWrite(port, buf, length);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R5,#0x0
        SJMP    ??Subroutine9_0
//  162 	#endif
//  163 }
          CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        ; Saved register size: 9
        ; Auto size: 0
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function osal_strlen
        LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0
          CFI EndBlock cfiBlock9
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine9_0:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
          CFI EndBlock cfiBlock10
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine10_0:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  164 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  165 void UART_ZCmdPrintNum(uint8 port, long num)
UART_ZCmdPrintNum:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function UART_ZCmdPrintNum
        CODE
//  166 {
        FUNCALL UART_ZCmdPrintNum, UART_SendNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  167 	#if (defined UART_ZCMD) && (UART_ZCMD == TRUE)
//  168 	UART_SendNum(port, num);
        ; Setup parameters for call to function UART_SendNum
        LCALL   `??UART_SendNum::?relay`; Banked call to: UART_SendNum
//  169 	#endif
//  170 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock12
//  171 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  172 void UART_ZCmdPrintString(uint8 port, uint8 *buf)
UART_ZCmdPrintString:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function UART_ZCmdPrintString
        CODE
        FUNCALL UART_ZCmdPrintString, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART_ZCmdPrintString, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock13
//  173 {
//  174 	#if (defined UART_ZCMD) && (UART_ZCMD == TRUE)
//  175 	HalUARTWrite(port, buf, osal_strlen((char*)buf));	
//  176 	#endif
//  177 }
//  178 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  179 void UART_DebugPrintLCD(uint8 port, uint8 Row, uint8 Col, uint8 *buf)
UART_DebugPrintLCD:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function UART_DebugPrintLCD
        CODE
//  180 {
        ; Saved register size: 0
        ; Auto size: 0
//  181 	#if (defined UART_DEBUG_LCD) && (UART_DEBUG_LCD == TRUE)
//  182 	uint8 Length = osal_strlen((char*)buf);
//  183 	
//  184 	UART_SendString(port, "@LCD1602");
//  185 	
//  186 	if (Row < 10)
//  187 		UART_SendString(port, "0");
//  188 	UART_SendNum(port, Row);
//  189 	if (Col < 10)
//  190 		UART_SendString(port, "0");
//  191 	UART_SendNum(port, Col);
//  192 
//  193 	if (Length < 10)
//  194 		UART_SendString(port, "0");
//  195 	UART_SendNum(port, Length);
//  196 	
//  197 	HalUARTWrite(port, buf, Length);
//  198 	
//  199 	UART_SendString(port, "@");
//  200 	
//  201 	#endif
//  202 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock14
//  203 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  204 void UART_DebugPrintLCDNum(uint8 port, uint8 Row, uint8 Col, long Num)
UART_DebugPrintLCDNum:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function UART_DebugPrintLCDNum
        CODE
//  205 {
        ; Saved register size: 0
        ; Auto size: 0
//  206 	#if (defined UART_DEBUG_LCD) && (UART_DEBUG_LCD == TRUE)
//  207 	uint8 numNum = 0;
//  208 	uint16 tmpNum = Num;
//  209 	
//  210 	UART_SendString(port, "@LCD1602");
//  211 	
//  212 	if (Row < 10)
//  213 		UART_SendString(port, "0");
//  214 	UART_SendNum(port, Row);
//  215 	if (Col < 10)
//  216 		UART_SendString(port, "0");
//  217 	UART_SendNum(port, Col);
//  218 
//  219 	while (tmpNum != 0)
//  220 	{
//  221 		numNum++;
//  222 		tmpNum = tmpNum/10;
//  223 	}
//  224 	
//  225 	if (numNum < 10)
//  226 		UART_SendString(port, "0");
//  227 	if (Num != 0)
//  228 		UART_SendNum(port, numNum);
//  229 	else
//  230 		UART_SendNum(port, 1);
//  231 
//  232 	UART_SendNum(port, Num);
//  233 	UART_SendString(port, "@");
//  234 	
//  235 	#endif
//  236 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock15
//  237 
//  238 void UART0_WriteDataToRxBuffer(uint8 *buffer, uint8 length)
//  239 {
//  240 	uint8 tmp_Length = 0;
//  241 
//  242 	while (tmp_Length < length)
//  243 	{
//  244 		Rx0_Data.CircularBuffer[Rx0_Data.idxWrite] = *(buffer + tmp_Length);
//  245 		Rx0_Data.idxWrite = (Rx0_Data.idxWrite + 1) % RX_BUFFER_SIZE;
//  246 		if (++Rx0_Data.DataAvailable == RX_BUFFER_SIZE)
//  247 		{
//  248 			Rx0_Data.DataAvailable = 0;
//  249 		}
//  250 		tmp_Length++;
//  251 	}
//  252 }
//  253 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  254 uint8 UART_DataAvailable(uint8 port)
UART_DataAvailable:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function UART_DataAvailable
        CODE
//  255 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
//  256 	if ( port == HAL_UART_PORT_0 )
        JNZ     ??UART_DataAvailable_0
//  257 	{
//  258 		return Rx0_Data.DataAvailable;
        MOV     DPTR,#Rx0_Data + 4
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??UART_DataAvailable_1
//  259 	}
//  260 	else if ( port == HAL_UART_PORT_1 )
//  261 	{
//  262 
//  263 	}
//  264 	return 0;
??UART_DataAvailable_0:
        MOV     R1,#0x0
??UART_DataAvailable_1:
          CFI EndBlock cfiBlock16
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  265 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock17
//  266 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  267 uint8* UART_GetData(uint8 port, uint8* buffer, uint8 length)
UART_GetData:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function UART_GetData
        CODE
//  268 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  269 	uint8 tmp_Length = 0;
        MOV     R5,#0x0
        SJMP    ??UART_GetData_0
//  270 	
//  271 	while (tmp_Length < length)
//  272 	{
//  273 		*(buffer + tmp_Length) = Rx0_Data.CircularBuffer[Rx0_Data.idxRead];
//  274 		Rx0_Data.DataAvailable--;
//  275 		Rx0_Data.idxRead = (Rx0_Data.idxRead + 1) % RX_BUFFER_SIZE;
//  276 		if (Rx0_Data.idxRead == Rx0_Data.idxWrite)
//  277 		{
//  278 			Rx0_Data.DataAvailable = 0;
//  279 			break;
//  280 		}
//  281 		tmp_Length++;
??UART_GetData_1:
        INC     R5
??UART_GetData_0:
        MOV     A,R5
        CLR     C
        SUBB    A,R4
        JNC     ??UART_GetData_2
        MOV     DPTR,#Rx0_Data
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,R5
        MOV     R0,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     DPTR,#Rx0_Data
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??UART_GetData_3
        INC     DPTR
        MOVX    A,@DPTR
??UART_GetData_3:
        JNZ     ??UART_GetData_1
        MOV     DPTR,#Rx0_Data + 4
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  282 	}
//  283 	return buffer;
??UART_GetData_2:
        SJMP    ?Subroutine2
//  284 }
          CFI EndBlock cfiBlock18
//  285 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  286 static void UART0_RxProcessCB(uint8 port, uint8 event)
UART0_RxProcessCB:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function UART0_RxProcessCB
        CODE
//  287 {
        FUNCALL UART0_RxProcessCB, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 140, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL UART0_RxProcessCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 140, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 140, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 128
        MOV     A,#-0x80
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 140)
        MOV     ?V1,R2
//  288 	uint16 Rx0_tmpBufLen;
//  289 	uint8 Rx0_tmpBuffer[UART0_MAX_RX_BUF_SIZE_128];
//  290 	
//  291 	switch (event)
        MOV     A,#0x4
        XRL     A,?V1
        JNZ     ??UART0_RxProcessCB_0
//  292 	{
//  293 		case HAL_UART_RX_FULL:
//  294 			break;
//  295 		case HAL_UART_RX_ABOUT_FULL:
//  296 			break;
//  297 		case HAL_UART_RX_TIMEOUT:
//  298 			Rx0_tmpBufLen = Hal_UART_RxBufLen(port);
        ; Setup parameters for call to function Hal_UART_RxBufLen
        LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
//  299 			HalUARTRead(HAL_UART_PORT_0, Rx0_tmpBuffer, Rx0_tmpBufLen);
        ; Setup parameters for call to function HalUARTRead
        MOV     A,R6
        MOV     R4,A
        MOV     R5,?V3
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
//  300 			UART0_WriteDataToRxBuffer(Rx0_tmpBuffer, Rx0_tmpBufLen);			
        MOV     A,R6
        MOV     R3,A
        MOV     R2,#0x0
        SJMP    ??UART0_RxProcessCB_1
??UART0_RxProcessCB_2:
        MOV     A,R2
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,DPH
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#Rx0_Data + 2
        LCALL   ?Subroutine5 & 0xFFFF
//  301 			break;			
//  302 	}
??CrossCallReturnLabel_5:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPTR,#Rx0_Data + 2
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     DPTR,#Rx0_Data + 2
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     DPTR,#Rx0_Data + 4
        MOVX    A,@DPTR
        XRL     A,#0x80
        JNZ     ??UART0_RxProcessCB_3
        INC     DPTR
        MOVX    A,@DPTR
??UART0_RxProcessCB_3:
        JNZ     ??UART0_RxProcessCB_4
        MOV     DPTR,#Rx0_Data + 4
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
??UART0_RxProcessCB_4:
        INC     R2
??UART0_RxProcessCB_1:
        MOV     A,R2
        CLR     C
        SUBB    A,R3
        JC      ??UART0_RxProcessCB_2
//  303 }
??UART0_RxProcessCB_0:
        MOV     A,#-0x80
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function UART0_RxProcessCB
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 140)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function UART0_RxProcessCB
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 140)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function UART0_RxProcessCB
          CFI Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 140)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function UART0_RxProcessCB
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_9
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 140)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function UART_GetData
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_0
          CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond25) CFA_SP SP+-9
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function UART_ParseRxPackage
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_1
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-4
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function UART_GetData
          CFI Conditional ??CrossCallReturnLabel_4
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function UART0_RxProcessCB
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 140)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOVX    A,@DPTR
        ADD     A,#(Rx0_Data + 7) & 0xff
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#((Rx0_Data + 7) >> 8) & 0xff
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30
//  304 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  305 static void UART1_RxProcessCB(uint8 port, uint8 event)
UART1_RxProcessCB:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function UART1_RxProcessCB
        CODE
//  306 {
        ; Saved register size: 0
        ; Auto size: 0
//  307 	switch (event)
//  308 	{
//  309 		case HAL_UART_RX_FULL:
//  310 			break;
//  311 		case HAL_UART_RX_ABOUT_FULL:
//  312 			break;
//  313 		case HAL_UART_RX_TIMEOUT:
//  314 			break;
//  315 	}
//  316 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock31
//  317 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  318 uint8 UART_ParseRxPackage(uint8 port)
UART_ParseRxPackage:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function UART_ParseRxPackage
        CODE
//  319 {
        FUNCALL UART_ParseRxPackage, UART_DataAvailable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  320 	if (port == HAL_UART_PORT_0)
        JNZ     ??UART_ParseRxPackage_0
//  321 	{
//  322 		uint8 i = 0;
        MOV     R6,#0x0
//  323 		uint8 j = 0;
//  324 		uint16 dataAvailable = UART_DataAvailable(HAL_UART_PORT_0);
        ; Setup parameters for call to function UART_DataAvailable
        MOV     R1,#0x0
        LCALL   `??UART_DataAvailable::?relay`; Banked call to: UART_DataAvailable
        MOV     A,R1
        MOV     R0,A
//  325 		
//  326 		if (dataAvailable)
        JNZ     ??UART_ParseRxPackage_1
//  327 		{
//  328 			for (i = 0; i < dataAvailable; i++)
//  329 			{
//  330 				if ( Rx0_Data.CircularBuffer[(Rx0_Data.idxRead + i) % RX_BUFFER_SIZE] == '@' )
//  331 				{
//  332 					for (j = i + 1; j < dataAvailable; j++)
//  333 					{
//  334 						if ( Rx0_Data.CircularBuffer[(Rx0_Data.idxRead + j) % RX_BUFFER_SIZE] == '!' )
//  335 						{
//  336 							Rx0_Data.ParseLength = j + 1;
//  337 							return 1;
//  338 						}
//  339 					}
//  340 				}
//  341 				else
//  342 				{
//  343 					Rx0_Data.idxRead = (Rx0_Data.idxRead + 1) % RX_BUFFER_SIZE;
//  344 					Rx0_Data.DataAvailable--;
//  345 					if ( Rx0_Data.idxRead == Rx0_Data.idxWrite )
//  346 					{
//  347 						Rx0_Data.DataAvailable = 0;
//  348 					}
//  349 				}
//  350 			}
//  351 		}
//  352 		Rx0_Data.ParseLength = 0;
??UART_ParseRxPackage_2:
        MOV     DPTR,#Rx0_Data + 6
        CLR     A
        MOVX    @DPTR,A
//  353 	}
//  354 	else if (port == HAL_UART_PORT_1)
//  355 	{
//  356     
//  357 	}
//  358   return 0;
??UART_ParseRxPackage_0:
        MOV     R1,#0x0
??UART_ParseRxPackage_3:
        LJMP    ??Subroutine10_0 & 0xFFFF
??UART_ParseRxPackage_4:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     DPTR,#Rx0_Data
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??UART_ParseRxPackage_5
        INC     DPTR
        MOVX    A,@DPTR
??UART_ParseRxPackage_5:
        JNZ     ??UART_ParseRxPackage_6
        MOV     DPTR,#Rx0_Data + 4
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
??UART_ParseRxPackage_6:
        INC     R6
??UART_ParseRxPackage_1:
        MOV     A,R6
        MOV     R2,A
        CLR     C
        SUBB    A,R0
        SUBB    A,0xE0 /* A   */
        JNC     ??UART_ParseRxPackage_2
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        XRL     A,#0x40
        JNZ     ??UART_ParseRxPackage_4
        MOV     A,#0x1
        ADD     A,R6
        MOV     R4,A
        SJMP    ??UART_ParseRxPackage_7
??UART_ParseRxPackage_8:
        INC     R4
??UART_ParseRxPackage_7:
        MOV     A,R4
        MOV     R2,A
        CLR     C
        SUBB    A,R0
        SUBB    A,0xE0 /* A   */
        JNC     ??UART_ParseRxPackage_6
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        XRL     A,#0x21
        JNZ     ??UART_ParseRxPackage_8
        MOV     A,#0x1
        ADD     A,R4
        MOV     DPTR,#Rx0_Data + 6
        MOVX    @DPTR,A
        MOV     R1,#0x1
        SJMP    ??UART_ParseRxPackage_3
//  359 }
          CFI EndBlock cfiBlock32

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function UART_GetData
          CFI Conditional ??CrossCallReturnLabel_6
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function UART_ParseRxPackage
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOV     DPTR,#Rx0_Data + 4
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function UART_ParseRxPackage
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function UART_ParseRxPackage
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        MOV     DPTR,#Rx0_Data
        MOVX    A,@DPTR
        ADD     A,R2
        ANL     A,#0x7f
        MOV     R2,A
        MOV     A,#(Rx0_Data + 7) & 0xff
        ADD     A,R2
        MOV     DPL,A
        CLR     A
        ADDC    A,#((Rx0_Data + 7) >> 8) & 0xff
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function UART_GetData
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function UART_ParseRxPackage
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV     DPTR,#Rx0_Data
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     DPTR,#Rx0_Data
        MOVX    A,@DPTR
        ANL     A,#0x7f
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
//  360 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  361 uint8 UART_ParseLength(uint8 port)
UART_ParseLength:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function UART_ParseLength
        CODE
//  362 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
//  363 	uint8 tmp_ParseLength;
//  364 
//  365 	if ( port == HAL_UART_PORT_0 )
        JNZ     ??UART_ParseLength_0
//  366 	{
//  367 		tmp_ParseLength = Rx0_Data.ParseLength;
        MOV     DPTR,#Rx0_Data + 6
        MOVX    A,@DPTR
        MOV     R1,A
//  368 		Rx0_Data.ParseLength = 0;
        CLR     A
        MOVX    @DPTR,A
//  369 		return tmp_ParseLength;
        SJMP    ??UART_ParseLength_1
//  370 	}
//  371 	else if ( port == HAL_UART_PORT_1 )
//  372 	{
//  373 	
//  374 	}
//  375 	return 0;
??UART_ParseLength_0:
        MOV     R1,#0x0
??UART_ParseLength_1:
        LJMP    ?Subroutine2 & 0xFFFF
//  376 }
          CFI EndBlock cfiBlock42

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_SendString::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_SendString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_SendNum::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_SendNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??uart_pow_of::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uart_pow_of

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_DebugPrint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_DebugPrint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_DebugPrintNum::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_DebugPrintNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_ZCmdPrint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_ZCmdPrint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_ZCmdPrintBuffer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_ZCmdPrintBuffer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_ZCmdPrintNum::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_ZCmdPrintNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_ZCmdPrintString::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_ZCmdPrintString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_DebugPrintLCD::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_DebugPrintLCD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_DebugPrintLCDNum::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_DebugPrintLCDNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_DataAvailable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_DataAvailable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_GetData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_GetData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART0_RxProcessCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART0_RxProcessCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART1_RxProcessCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART1_RxProcessCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_ParseRxPackage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_ParseRxPackage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??UART_ParseLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_ParseLength

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "0">`:
        DB "0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "-">`:
        DB "-"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        END
//  377 /*******************************************************************************
//  378 ********************************************************************************/
// 
// 1 056 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//    11 bytes in segment XDATA_ROM_C
//   135 bytes in segment XDATA_Z
// 
//   108 bytes of CODE     memory
//     7 bytes of CONST    memory (+ 4 bytes shared)
// 1 056 bytes of HUGECODE memory
//   135 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
