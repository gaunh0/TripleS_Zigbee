###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                14/Feb/2017  09:10:48
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART.c
#    Command line       =  
#        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFAFA
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART.c" -D
#        ROUTER -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_HVAC_CLUSTER -lC
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\List"
#        -lA "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Teddy\Desktop\aaa\[COMBROS]
#        Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\HomeAutomation\MY-SOURCE\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\List\MS_UART.lst
#    Object file        =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\Obj\MS_UART.r51
#
###############################################################################

C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART.c
      1          /*******************************************************************************
      2           *                                            INCLUDES
      3           *******************************************************************************/
      4          #include "MS_UART.h"
      5          
      6          /*******************************************************************************
      7           *                                             MACROS
      8           *******************************************************************************/
      9          
     10          /*******************************************************************************
     11           *                                            CONSTANTS
     12           *******************************************************************************/
     13          #define UART0_MAX_TX_BUF_SIZE_128           128
     14          #define UART0_MAX_TX_BUF_SIZE_256           256
     15          #define UART0_MAX_RX_BUF_SIZE_128           128
     16          #define UART0_MAX_RX_BUF_SIZE_256           256
     17          
     18          #define UART1_MAX_TX_BUF_SIZE_128           128
     19          #define UART1_MAX_TX_BUF_SIZE_256           256
     20          #define UART1_MAX_RX_BUF_SIZE_128           128
     21          #define UART1_MAX_RX_BUF_SIZE_256           256
     22          
     23          /*******************************************************************************
     24           *                                             TYPEDEFS
     25           *******************************************************************************/
     26          
     27          /*******************************************************************************
     28           *                                         GLOBAL VARIABLES
     29           *******************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     30          static UartRxData_t Rx0_Data;
   \                     Rx0_Data:
   \   000000                DS 135
   \   000087                REQUIRE __INIT_XDATA_Z
     31          
     32          /*******************************************************************************
     33           *                                          FUNCTIONS - External
     34           *******************************************************************************/
     35          
     36          /*******************************************************************************
     37           *                                          FUNCTIONS - Local
     38           *******************************************************************************/
     39          static void UART0_RxProcessCB(uint8 port, uint8 event);
     40          static void UART1_RxProcessCB(uint8 port, uint8 event);
     41          
     42          static void UART0_WriteDataToRxBuffer(uint8* buffer, uint8 length);
     43          
     44          static long uart_pow_of(uint8 A, uint8 n);
     45          
     46          /*******************************************************************************
     47           *                                          FUNCTIONS - API
     48           *******************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     49          void UART_Init(uint8 port)
   \                     UART_Init:
     50          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
     51          	halUARTCfg_t uartConfig;
     52          
     53          	if (port == HAL_UART_PORT_0)
   \   00000C   7052         JNZ     ??UART_Init_0
     54          	{
     55          		uartConfig.configured = TRUE;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
     56          		uartConfig.baudRate = HAL_UART_BR_115200;
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   7404         MOV     A,#0x4
   \   00001C   F0           MOVX    @DPTR,A
     57          		uartConfig.flowControl = HAL_UART_FLOW_OFF;
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
     58          		uartConfig.flowControlThreshold = 0;
   \   000024   7403         MOV     A,#0x3
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E4           CLR     A
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   F0           MOVX    @DPTR,A
     59          		uartConfig.rx.maxBufSize = UART0_MAX_RX_BUF_SIZE_128;
   \   00002D   740A         MOV     A,#0xa
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7480         MOV     A,#-0x80
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
     60          		uartConfig.tx.maxBufSize = UART0_MAX_TX_BUF_SIZE_128;
   \   000038   7412         MOV     A,#0x12
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7480         MOV     A,#-0x80
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
     61          		uartConfig.idleTimeout = 1; 	
   \   000043   7405         MOV     A,#0x5
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7401         MOV     A,#0x1
   \   00004A   F0           MOVX    @DPTR,A
     62          		uartConfig.intEnable = TRUE;	
   \   00004B   7416         MOV     A,#0x16
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
     63          		uartConfig.callBackFunc = UART0_RxProcessCB;
   \   000053   741B         MOV     A,#0x1b
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   74..         MOV     A,#`??UART0_RxProcessCB::?relay` & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   74..         MOV     A,#(`??UART0_RxProcessCB::?relay` >> 8) & 0xff
   \   00005E   8054         SJMP    ??UART_Init_1
     64          	}
     65          	else if (port == HAL_UART_PORT_1)
   \                     ??UART_Init_0:
   \   000060   7401         MOV     A,#0x1
   \   000062   6E           XRL     A,R6
   \   000063   7050         JNZ     ??UART_Init_2
     66          	{
     67          		uartConfig.configured = TRUE;
   \   000065   85..82       MOV     DPL,?XSP + 0
   \   000068   85..83       MOV     DPH,?XSP + 1
   \   00006B   7401         MOV     A,#0x1
   \   00006D   F0           MOVX    @DPTR,A
     68          		uartConfig.baudRate = HAL_UART_BR_115200;
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   7404         MOV     A,#0x4
   \   000073   F0           MOVX    @DPTR,A
     69          		uartConfig.flowControl = HAL_UART_FLOW_OFF;
   \   000074   7402         MOV     A,#0x2
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
     70          		uartConfig.flowControlThreshold = 0;
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E4           CLR     A
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   F0           MOVX    @DPTR,A
     71          		uartConfig.rx.maxBufSize = UART1_MAX_RX_BUF_SIZE_256;
   \   000084   740A         MOV     A,#0xa
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   04           INC     A
   \   00008D   F0           MOVX    @DPTR,A
     72          		uartConfig.tx.maxBufSize = UART1_MAX_TX_BUF_SIZE_128;
   \   00008E   7412         MOV     A,#0x12
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   7480         MOV     A,#-0x80
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   E4           CLR     A
   \   000098   F0           MOVX    @DPTR,A
     73          		uartConfig.idleTimeout = 1; 	
   \   000099   7405         MOV     A,#0x5
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   F0           MOVX    @DPTR,A
     74          		uartConfig.intEnable = TRUE;	
   \   0000A1   7416         MOV     A,#0x16
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   F0           MOVX    @DPTR,A
     75          		uartConfig.callBackFunc = UART1_RxProcessCB;
   \   0000A9   741B         MOV     A,#0x1b
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   74..         MOV     A,#`??UART1_RxProcessCB::?relay` & 0xff
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   74..         MOV     A,#(`??UART1_RxProcessCB::?relay` >> 8) & 0xff
   \                     ??UART_Init_1:
   \   0000B4   F0           MOVX    @DPTR,A
     76          	}
     77          	HalUARTOpen (port, &uartConfig);
   \                     ??UART_Init_2:
   \   0000B5                ; Setup parameters for call to function HalUARTOpen
   \   0000B5   AA..         MOV     R2,?XSP + 0
   \   0000B7   AB..         MOV     R3,?XSP + 1
   \   0000B9   12....       LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
     78          }
   \   0000BC   741D         MOV     A,#0x1d
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   02....       LJMP    ??Subroutine10_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
     79          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     80          void UART_SendString(uint8 port, uint8 *buf)
   \                     UART_SendString:
   \   000000                REQUIRE ?V0
   \   000000   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
     81          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
     82          	HalUARTWrite(port, buf, osal_strlen((char*)buf));
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function osal_strlen
   \   00000B                ; Setup parameters for call to function HalUARTWrite
   \   00000B                ; Setup parameters for call to function osal_strlen
   \   00000B   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   00000E   EA           MOV     A,R2
   \   00000F   FC           MOV     R4,A
   \   000010   EB           MOV     A,R3
   \   000011   FD           MOV     R5,A
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   A9..         MOV     R1,?V0
   \   000018                REQUIRE ??Subroutine9_0
   \   000018                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     83          }
   \   000003                REQUIRE ??Subroutine10_0
   \   000003                ; // Fall through to label ??Subroutine10_0
     84          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     85          void UART_SendNum(uint8 port, long num)
   \                     UART_SendNum:
     86          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8A..         MOV     ?V4,R2
   \   00000E   8B..         MOV     ?V5,R3
   \   000010   8C..         MOV     ?V6,R4
   \   000012   8D..         MOV     ?V7,R5
     87          	uint8 i;
     88          	uint8 num_flag = 0;
   \   000014   7E00         MOV     R6,#0x0
     89          	uint8 tmp_chr[1];
     90          	
     91          	if (num == 0)
   \   000016   75....       MOV     ?V14,#`?<Constant "0">` & 0xff
   \   000019   75....       MOV     ?V15,#(`?<Constant "0">` >> 8) & 0xff
   \   00001C   EA           MOV     A,R2
   \   00001D   45..         ORL     A,?V5
   \   00001F   45..         ORL     A,?V6
   \   000021   45..         ORL     A,?V7
   \   000023   700E         JNZ     ??UART_SendNum_0
     92          	{
     93          		HalUARTWrite(port, "0", 1);
   \   000025                ; Setup parameters for call to function HalUARTWrite
   \   000025   7C01         MOV     R4,#0x1
   \   000027   7D00         MOV     R5,#0x0
   \   000029   AA..         MOV     R2,?V14
   \   00002B   AB..         MOV     R3,?V15
   \   00002D   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     94          		return;
   \   000030   02....       LJMP    ??UART_SendNum_1 & 0xFFFF
     95          	}
     96          	if (num < 0)
   \                     ??UART_SendNum_0:
   \   000033   90....       MOV     DPTR,#__Constant_0
   \   000036   78..         MOV     R0,#?V4
   \   000038   12....       LCALL   ?SL_GE_X
   \   00003B   4010         JC      ??UART_SendNum_2
     97          	{
     98          		HalUARTWrite(port, "-", 1);
   \   00003D                ; Setup parameters for call to function HalUARTWrite
   \   00003D   7C01         MOV     R4,#0x1
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A..         MOV     R2,#`?<Constant "-">` & 0xff
   \   000043   7B..         MOV     R3,#(`?<Constant "-">` >> 8) & 0xff
   \   000045   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     99          		num *= -1;
   \   000048   78..         MOV     R0,#?V4
   \   00004A   12....       LCALL   ?L_NEG
    100          	}
    101          
    102          	for ( i = 9; i > 0; i--)
   \                     ??UART_SendNum_2:
   \   00004D   75..09       MOV     ?V13,#0x9
    103          	{
    104          		if ((num / uart_pow_of(10, i-1)) != 0)
   \                     ??UART_SendNum_3:
   \   000050   74FF         MOV     A,#-0x1
   \   000052   25..         ADD     A,?V13
   \   000054   F5..         MOV     ?V12,A
   \   000056   85....       MOV     ?V0,?V4
   \   000059   85....       MOV     ?V1,?V5
   \   00005C   85....       MOV     ?V2,?V6
   \   00005F   85....       MOV     ?V3,?V7
   \   000062                ; Setup parameters for call to function uart_pow_of
   \   000062   FA           MOV     R2,A
   \   000063   790A         MOV     R1,#0xa
   \   000065   12....       LCALL   `??uart_pow_of::?relay`; Banked call to: uart_pow_of
   \   000068   8A..         MOV     ?V8,R2
   \   00006A   8B..         MOV     ?V9,R3
   \   00006C   8C..         MOV     ?V10,R4
   \   00006E   8D..         MOV     ?V11,R5
   \   000070   78..         MOV     R0,#?V0
   \   000072   79..         MOV     R1,#?V8
   \   000074   12....       LCALL   ?L_DIV_MOD
   \   000077   E5..         MOV     A,?V0
   \   000079   45..         ORL     A,?V1
   \   00007B   45..         ORL     A,?V2
   \   00007D   45..         ORL     A,?V3
   \   00007F   6039         JZ      ??UART_SendNum_4
    105          		{
    106          			num_flag = 1;
   \   000081   7E01         MOV     R6,#0x1
    107          			tmp_chr[0] = num/uart_pow_of(10, i-1) + '0';
   \   000083   85....       MOV     ?V8,?V4
   \   000086   85....       MOV     ?V9,?V5
   \   000089   85....       MOV     ?V10,?V6
   \   00008C   85....       MOV     ?V11,?V7
   \   00008F                ; Setup parameters for call to function uart_pow_of
   \   00008F   AA..         MOV     R2,?V12
   \   000091   790A         MOV     R1,#0xa
   \   000093   12....       LCALL   `??uart_pow_of::?relay`; Banked call to: uart_pow_of
   \   000096   8A..         MOV     ?V0,R2
   \   000098   8B..         MOV     ?V1,R3
   \   00009A   8C..         MOV     ?V2,R4
   \   00009C   8D..         MOV     ?V3,R5
   \   00009E   78..         MOV     R0,#?V8
   \   0000A0   79..         MOV     R1,#?V0
   \   0000A2   12....       LCALL   ?L_DIV_MOD
   \   0000A5   E5..         MOV     A,?V8
   \   0000A7   2430         ADD     A,#0x30
   \   0000A9   85..82       MOV     DPL,?XSP + 0
   \   0000AC   85..83       MOV     DPH,?XSP + 1
   \   0000AF   F0           MOVX    @DPTR,A
    108          			HalUARTWrite(port, tmp_chr, 1);
   \   0000B0                ; Setup parameters for call to function HalUARTWrite
   \   0000B0   7C01         MOV     R4,#0x1
   \   0000B2   7D00         MOV     R5,#0x0
   \   0000B4   AA..         MOV     R2,?XSP + 0
   \   0000B6   AB..         MOV     R3,?XSP + 1
   \   0000B8   800D         SJMP    ??UART_SendNum_5
    109          		}
    110          		else
    111          		{
    112          			if (num_flag != 0)
   \                     ??UART_SendNum_4:
   \   0000BA   EE           MOV     A,R6
   \   0000BB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000BD   500D         JNC     ??UART_SendNum_6
    113          			{
    114          				HalUARTWrite(port, "0", 1);
   \   0000BF                ; Setup parameters for call to function HalUARTWrite
   \   0000BF   7C01         MOV     R4,#0x1
   \   0000C1   7D00         MOV     R5,#0x0
   \   0000C3   AA..         MOV     R2,?V14
   \   0000C5   AB..         MOV     R3,?V15
   \                     ??UART_SendNum_5:
   \   0000C7   EF           MOV     A,R7
   \   0000C8   F9           MOV     R1,A
   \   0000C9   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    115          			}
    116          		}
    117          		
    118          		num %= uart_pow_of(10, i-1);
   \                     ??UART_SendNum_6:
   \   0000CC                ; Setup parameters for call to function uart_pow_of
   \   0000CC   AA..         MOV     R2,?V12
   \   0000CE   790A         MOV     R1,#0xa
   \   0000D0   12....       LCALL   `??uart_pow_of::?relay`; Banked call to: uart_pow_of
   \   0000D3   8A..         MOV     ?V0,R2
   \   0000D5   8B..         MOV     ?V1,R3
   \   0000D7   8C..         MOV     ?V2,R4
   \   0000D9   8D..         MOV     ?V3,R5
   \   0000DB   78..         MOV     R0,#?V4
   \   0000DD   79..         MOV     R1,#?V0
   \   0000DF   12....       LCALL   ?L_DIV_MOD
   \   0000E2   85....       MOV     ?V4,?V0
   \   0000E5   85....       MOV     ?V5,?V1
   \   0000E8   85....       MOV     ?V6,?V2
   \   0000EB   85....       MOV     ?V7,?V3
    119          	}
   \   0000EE   15..         DEC     ?V13
   \   0000F0   E5..         MOV     A,?V13
   \   0000F2   6003         JZ      $+5
   \   0000F4   02....       LJMP    ??UART_SendNum_3 & 0xFFFF
    120          }
   \                     ??UART_SendNum_1:
   \   0000F7   7401         MOV     A,#0x1
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FC   7F10         MOV     R7,#0x10
   \   0000FE   02....       LJMP    ?BANKED_LEAVE_XDATA
    121          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    122          long uart_pow_of(uint8 A, uint8 n)
   \                     uart_pow_of:
    123          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    124          	uint8 i;
    125          	uint32 temp = 1;
   \   000009   75..01       MOV     ?V4,#0x1
   \   00000C   75..00       MOV     ?V5,#0x0
   \   00000F   75..00       MOV     ?V6,#0x0
   \   000012   75..00       MOV     ?V7,#0x0
    126          	
    127          	for (i = 0; i < n; i++)
   \   000015   7A00         MOV     R2,#0x0
   \   000017   8011         SJMP    ??uart_pow_of_0
    128          	{
    129          		temp *= A;
   \                     ??uart_pow_of_1:
   \   000019   8F..         MOV     ?V0,R7
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V1,A
   \   00001E   F5..         MOV     ?V2,A
   \   000020   F5..         MOV     ?V3,A
   \   000022   78..         MOV     R0,#?V4
   \   000024   79..         MOV     R1,#?V0
   \   000026   12....       LCALL   ?L_MUL
    130          	}
   \   000029   0A           INC     R2
   \                     ??uart_pow_of_0:
   \   00002A   EA           MOV     A,R2
   \   00002B   C3           CLR     C
   \   00002C   9E           SUBB    A,R6
   \   00002D   40EA         JC      ??uart_pow_of_1
    131          		
    132          	return temp;
   \   00002F   AA..         MOV     R2,?V4
   \   000031   AB..         MOV     R3,?V5
   \   000033   AC..         MOV     R4,?V6
   \   000035   AD..         MOV     R5,?V7
   \   000037   7F08         MOV     R7,#0x8
   \   000039   02....       LJMP    ?BANKED_LEAVE_XDATA
    133          }
    134          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    135          void UART_DebugPrint(uint8 port, uint8* buf)
   \                     UART_DebugPrint:
    136          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    137          	#if (defined UART_DEBUG_TERMINAL) && (UART_DEBUG_TERMINAL == TRUE)
    138          	HalUARTWrite(port, buf, osal_strlen(buf));
    139          	HalUARTWrite(port, "\r\n", 2);	
    140          	#endif
    141          }
   \   000000   02....       LJMP    ?BRET
    142          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    143          void UART_DebugPrintNum(uint8 port, long num)
   \                     UART_DebugPrintNum:
    144          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    145          	#if (defined UART_DEBUG_TERMINAL) && (UART_DEBUG_TERMINAL == TRUE)
    146          	UART_SendNum(port, num);
    147          	#endif
    148          }
   \   000000   02....       LJMP    ?BRET
    149          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void UART_ZCmdPrint(uint8 port, uint8 *buf)
   \                     UART_ZCmdPrint:
    151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    152          	#if (defined UART_ZCMD) && (UART_ZCMD == TRUE)
    153          	HalUARTWrite(port, buf, osal_strlen((char*)buf));
   \   00000B                ; Setup parameters for call to function osal_strlen
   \   00000B   12....       LCALL   `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   00000E   8A..         MOV     ?V2,R2
   \   000010   8B..         MOV     ?V3,R3
   \   000012   AC..         MOV     R4,?V2
   \   000014   AD..         MOV     R5,?V3
   \   000016                ; Setup parameters for call to function HalUARTWrite
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   A9..         MOV     R1,?V0
   \   00001C   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    154          	HalUARTWrite(port, "\r\n", 2);	
   \   00001F                ; Setup parameters for call to function HalUARTWrite
   \   00001F   7C02         MOV     R4,#0x2
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   000025   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000027   A9..         MOV     R1,?V0
   \   000029   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    155          	#endif
    156          }
   \   00002C                REQUIRE ?Subroutine1
   \   00002C                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    157          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void UART_ZCmdPrintBuffer(uint8 port, uint8 *buf, uint8 length)
   \                     UART_ZCmdPrintBuffer:
    159          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    160          	#if (defined UART_ZCMD) && (UART_ZCMD == TRUE)
    161          	HalUARTWrite(port, buf, length);
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7D00         MOV     R5,#0x0
   \   000007   80..         SJMP    ??Subroutine9_0
    162          	#endif
    163          }
    164          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    165          void UART_ZCmdPrintNum(uint8 port, long num)
   \                     UART_ZCmdPrintNum:
    166          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    167          	#if (defined UART_ZCMD) && (UART_ZCMD == TRUE)
    168          	UART_SendNum(port, num);
   \   000005                ; Setup parameters for call to function UART_SendNum
   \   000005   12....       LCALL   `??UART_SendNum::?relay`; Banked call to: UART_SendNum
    169          	#endif
    170          }
   \   000008   80..         SJMP    ?Subroutine1
    171          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    172          void UART_ZCmdPrintString(uint8 port, uint8 *buf)
   \                     UART_ZCmdPrintString:
   \   000000                REQUIRE ?V0
   \   000000   80..         SJMP    ?Subroutine0
    173          {
    174          	#if (defined UART_ZCMD) && (UART_ZCMD == TRUE)
    175          	HalUARTWrite(port, buf, osal_strlen((char*)buf));	
    176          	#endif
    177          }
    178          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          void UART_DebugPrintLCD(uint8 port, uint8 Row, uint8 Col, uint8 *buf)
   \                     UART_DebugPrintLCD:
    180          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    181          	#if (defined UART_DEBUG_LCD) && (UART_DEBUG_LCD == TRUE)
    182          	uint8 Length = osal_strlen((char*)buf);
    183          	
    184          	UART_SendString(port, "@LCD1602");
    185          	
    186          	if (Row < 10)
    187          		UART_SendString(port, "0");
    188          	UART_SendNum(port, Row);
    189          	if (Col < 10)
    190          		UART_SendString(port, "0");
    191          	UART_SendNum(port, Col);
    192          
    193          	if (Length < 10)
    194          		UART_SendString(port, "0");
    195          	UART_SendNum(port, Length);
    196          	
    197          	HalUARTWrite(port, buf, Length);
    198          	
    199          	UART_SendString(port, "@");
    200          	
    201          	#endif
    202          }
   \   000000   02....       LJMP    ?BRET
    203          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void UART_DebugPrintLCDNum(uint8 port, uint8 Row, uint8 Col, long Num)
   \                     UART_DebugPrintLCDNum:
    205          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    206          	#if (defined UART_DEBUG_LCD) && (UART_DEBUG_LCD == TRUE)
    207          	uint8 numNum = 0;
    208          	uint16 tmpNum = Num;
    209          	
    210          	UART_SendString(port, "@LCD1602");
    211          	
    212          	if (Row < 10)
    213          		UART_SendString(port, "0");
    214          	UART_SendNum(port, Row);
    215          	if (Col < 10)
    216          		UART_SendString(port, "0");
    217          	UART_SendNum(port, Col);
    218          
    219          	while (tmpNum != 0)
    220          	{
    221          		numNum++;
    222          		tmpNum = tmpNum/10;
    223          	}
    224          	
    225          	if (numNum < 10)
    226          		UART_SendString(port, "0");
    227          	if (Num != 0)
    228          		UART_SendNum(port, numNum);
    229          	else
    230          		UART_SendNum(port, 1);
    231          
    232          	UART_SendNum(port, Num);
    233          	UART_SendString(port, "@");
    234          	
    235          	#endif
    236          }
   \   000000   02....       LJMP    ?BRET
    237          
    238          void UART0_WriteDataToRxBuffer(uint8 *buffer, uint8 length)
    239          {
    240          	uint8 tmp_Length = 0;
    241          
    242          	while (tmp_Length < length)
    243          	{
    244          		Rx0_Data.CircularBuffer[Rx0_Data.idxWrite] = *(buffer + tmp_Length);
    245          		Rx0_Data.idxWrite = (Rx0_Data.idxWrite + 1) % RX_BUFFER_SIZE;
    246          		if (++Rx0_Data.DataAvailable == RX_BUFFER_SIZE)
    247          		{
    248          			Rx0_Data.DataAvailable = 0;
    249          		}
    250          		tmp_Length++;
    251          	}
    252          }
    253          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          uint8 UART_DataAvailable(uint8 port)
   \                     UART_DataAvailable:
    255          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
    256          	if ( port == HAL_UART_PORT_0 )
   \   000005   7007         JNZ     ??UART_DataAvailable_0
    257          	{
    258          		return Rx0_Data.DataAvailable;
   \   000007   90....       MOV     DPTR,#Rx0_Data + 4
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   8002         SJMP    ??UART_DataAvailable_1
    259          	}
    260          	else if ( port == HAL_UART_PORT_1 )
    261          	{
    262          
    263          	}
    264          	return 0;
   \                     ??UART_DataAvailable_0:
   \   00000E   7900         MOV     R1,#0x0
   \                     ??UART_DataAvailable_1:
   \   000010                REQUIRE ?Subroutine2
   \   000010                ; // Fall through to label ?Subroutine2
    265          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    266          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          uint8* UART_GetData(uint8 port, uint8* buffer, uint8 length)
   \                     UART_GetData:
    268          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    269          	uint8 tmp_Length = 0;
   \   000004   7D00         MOV     R5,#0x0
   \   000006   8001         SJMP    ??UART_GetData_0
    270          	
    271          	while (tmp_Length < length)
    272          	{
    273          		*(buffer + tmp_Length) = Rx0_Data.CircularBuffer[Rx0_Data.idxRead];
    274          		Rx0_Data.DataAvailable--;
    275          		Rx0_Data.idxRead = (Rx0_Data.idxRead + 1) % RX_BUFFER_SIZE;
    276          		if (Rx0_Data.idxRead == Rx0_Data.idxWrite)
    277          		{
    278          			Rx0_Data.DataAvailable = 0;
    279          			break;
    280          		}
    281          		tmp_Length++;
   \                     ??UART_GetData_1:
   \   000008   0D           INC     R5
   \                     ??UART_GetData_0:
   \   000009   ED           MOV     A,R5
   \   00000A   C3           CLR     C
   \   00000B   9C           SUBB    A,R4
   \   00000C   5032         JNC     ??UART_GetData_2
   \   00000E   90....       MOV     DPTR,#Rx0_Data
   \   000011   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C0E0         PUSH    A
   \   000017   ED           MOV     A,R5
   \   000018   F8           MOV     R0,A
   \   000019   EA           MOV     A,R2
   \   00001A   28           ADD     A,R0
   \   00001B   F582         MOV     DPL,A
   \   00001D   E4           CLR     A
   \   00001E   3B           ADDC    A,R3
   \   00001F   F583         MOV     DPH,A
   \   000021   D0E0         POP     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000027   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00002A   90....       MOV     DPTR,#Rx0_Data
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   68           XRL     A,R0
   \   000033   7002         JNZ     ??UART_GetData_3
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \                     ??UART_GetData_3:
   \   000037   70CF         JNZ     ??UART_GetData_1
   \   000039   90....       MOV     DPTR,#Rx0_Data + 4
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
    282          	}
    283          	return buffer;
   \                     ??UART_GetData_2:
   \   000040   80..         SJMP    ?Subroutine2
    284          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   24..         ADD     A,#(Rx0_Data + 7) & 0xff
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   34..         ADDC    A,#((Rx0_Data + 7) >> 8) & 0xff
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#Rx0_Data + 4
   \   000003   E0           MOVX    A,@DPTR
   \   000004   24FF         ADD     A,#-0x1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   34FF         ADDC    A,#-0x1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#Rx0_Data
   \   000003   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000006   90....       MOV     DPTR,#Rx0_Data
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   547F         ANL     A,#0x7f
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET
    285          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          static void UART0_RxProcessCB(uint8 port, uint8 event)
   \                     UART0_RxProcessCB:
    287          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V1,R2
    288          	uint16 Rx0_tmpBufLen;
    289          	uint8 Rx0_tmpBuffer[UART0_MAX_RX_BUF_SIZE_128];
    290          	
    291          	switch (event)
   \   00000C   7404         MOV     A,#0x4
   \   00000E   65..         XRL     A,?V1
   \   000010   7067         JNZ     ??UART0_RxProcessCB_0
    292          	{
    293          		case HAL_UART_RX_FULL:
    294          			break;
    295          		case HAL_UART_RX_ABOUT_FULL:
    296          			break;
    297          		case HAL_UART_RX_TIMEOUT:
    298          			Rx0_tmpBufLen = Hal_UART_RxBufLen(port);
   \   000012                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000012   12....       LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000015   8A..         MOV     ?V2,R2
   \   000017   8B..         MOV     ?V3,R3
   \   000019   AE..         MOV     R6,?V2
    299          			HalUARTRead(HAL_UART_PORT_0, Rx0_tmpBuffer, Rx0_tmpBufLen);
   \   00001B                ; Setup parameters for call to function HalUARTRead
   \   00001B   EE           MOV     A,R6
   \   00001C   FC           MOV     R4,A
   \   00001D   AD..         MOV     R5,?V3
   \   00001F   AA..         MOV     R2,?XSP + 0
   \   000021   AB..         MOV     R3,?XSP + 1
   \   000023   7900         MOV     R1,#0x0
   \   000025   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    300          			UART0_WriteDataToRxBuffer(Rx0_tmpBuffer, Rx0_tmpBufLen);			
   \   000028   EE           MOV     A,R6
   \   000029   FB           MOV     R3,A
   \   00002A   7A00         MOV     R2,#0x0
   \   00002C   8046         SJMP    ??UART0_RxProcessCB_1
   \                     ??UART0_RxProcessCB_2:
   \   00002E   EA           MOV     A,R2
   \   00002F   F8           MOV     R0,A
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   E582         MOV     A,DPL
   \   000038   28           ADD     A,R0
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   3583         ADDC    A,DPH
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   C0E0         PUSH    A
   \   000043   90....       MOV     DPTR,#Rx0_Data + 2
   \   000046   12....       LCALL   ?Subroutine5 & 0xFFFF
    301          			break;			
    302          	}
   \                     ??CrossCallReturnLabel_5:
   \   000049   D0E0         POP     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   90....       MOV     DPTR,#Rx0_Data + 2
   \   00004F   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000052   90....       MOV     DPTR,#Rx0_Data + 2
   \   000055   E0           MOVX    A,@DPTR
   \   000056   547F         ANL     A,#0x7f
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   E4           CLR     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000060   90....       MOV     DPTR,#Rx0_Data + 4
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6480         XRL     A,#0x80
   \   000066   7002         JNZ     ??UART0_RxProcessCB_3
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \                     ??UART0_RxProcessCB_3:
   \   00006A   7007         JNZ     ??UART0_RxProcessCB_4
   \   00006C   90....       MOV     DPTR,#Rx0_Data + 4
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
   \                     ??UART0_RxProcessCB_4:
   \   000073   0A           INC     R2
   \                     ??UART0_RxProcessCB_1:
   \   000074   EA           MOV     A,R2
   \   000075   C3           CLR     C
   \   000076   9B           SUBB    A,R3
   \   000077   40B5         JC      ??UART0_RxProcessCB_2
    303          }
   \                     ??UART0_RxProcessCB_0:
   \   000079   7480         MOV     A,#-0x80
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000003   22           RET
    304          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          static void UART1_RxProcessCB(uint8 port, uint8 event)
   \                     UART1_RxProcessCB:
    306          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    307          	switch (event)
    308          	{
    309          		case HAL_UART_RX_FULL:
    310          			break;
    311          		case HAL_UART_RX_ABOUT_FULL:
    312          			break;
    313          		case HAL_UART_RX_TIMEOUT:
    314          			break;
    315          	}
    316          }
   \   000000   02....       LJMP    ?BRET
    317          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          uint8 UART_ParseRxPackage(uint8 port)
   \                     UART_ParseRxPackage:
    319          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    320          	if (port == HAL_UART_PORT_0)
   \   000006   7010         JNZ     ??UART_ParseRxPackage_0
    321          	{
    322          		uint8 i = 0;
   \   000008   7E00         MOV     R6,#0x0
    323          		uint8 j = 0;
    324          		uint16 dataAvailable = UART_DataAvailable(HAL_UART_PORT_0);
   \   00000A                ; Setup parameters for call to function UART_DataAvailable
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   12....       LCALL   `??UART_DataAvailable::?relay`; Banked call to: UART_DataAvailable
   \   00000F   E9           MOV     A,R1
   \   000010   F8           MOV     R0,A
    325          		
    326          		if (dataAvailable)
   \   000011   7027         JNZ     ??UART_ParseRxPackage_1
    327          		{
    328          			for (i = 0; i < dataAvailable; i++)
    329          			{
    330          				if ( Rx0_Data.CircularBuffer[(Rx0_Data.idxRead + i) % RX_BUFFER_SIZE] == '@' )
    331          				{
    332          					for (j = i + 1; j < dataAvailable; j++)
    333          					{
    334          						if ( Rx0_Data.CircularBuffer[(Rx0_Data.idxRead + j) % RX_BUFFER_SIZE] == '!' )
    335          						{
    336          							Rx0_Data.ParseLength = j + 1;
    337          							return 1;
    338          						}
    339          					}
    340          				}
    341          				else
    342          				{
    343          					Rx0_Data.idxRead = (Rx0_Data.idxRead + 1) % RX_BUFFER_SIZE;
    344          					Rx0_Data.DataAvailable--;
    345          					if ( Rx0_Data.idxRead == Rx0_Data.idxWrite )
    346          					{
    347          						Rx0_Data.DataAvailable = 0;
    348          					}
    349          				}
    350          			}
    351          		}
    352          		Rx0_Data.ParseLength = 0;
   \                     ??UART_ParseRxPackage_2:
   \   000013   90....       MOV     DPTR,#Rx0_Data + 6
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
    353          	}
    354          	else if (port == HAL_UART_PORT_1)
    355          	{
    356              
    357          	}
    358            return 0;
   \                     ??UART_ParseRxPackage_0:
   \   000018   7900         MOV     R1,#0x0
   \                     ??UART_ParseRxPackage_3:
   \   00001A   02....       LJMP    ??Subroutine10_0 & 0xFFFF
   \                     ??UART_ParseRxPackage_4:
   \   00001D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000020   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000023   90....       MOV     DPTR,#Rx0_Data
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6A           XRL     A,R2
   \   00002C   7002         JNZ     ??UART_ParseRxPackage_5
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \                     ??UART_ParseRxPackage_5:
   \   000030   7007         JNZ     ??UART_ParseRxPackage_6
   \   000032   90....       MOV     DPTR,#Rx0_Data + 4
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
   \                     ??UART_ParseRxPackage_6:
   \   000039   0E           INC     R6
   \                     ??UART_ParseRxPackage_1:
   \   00003A   EE           MOV     A,R6
   \   00003B   FA           MOV     R2,A
   \   00003C   C3           CLR     C
   \   00003D   98           SUBB    A,R0
   \   00003E   95E0         SUBB    A,0xE0 /* A   */
   \   000040   50D1         JNC     ??UART_ParseRxPackage_2
   \   000042   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000045   6440         XRL     A,#0x40
   \   000047   70D4         JNZ     ??UART_ParseRxPackage_4
   \   000049   7401         MOV     A,#0x1
   \   00004B   2E           ADD     A,R6
   \   00004C   FC           MOV     R4,A
   \   00004D   8001         SJMP    ??UART_ParseRxPackage_7
   \                     ??UART_ParseRxPackage_8:
   \   00004F   0C           INC     R4
   \                     ??UART_ParseRxPackage_7:
   \   000050   EC           MOV     A,R4
   \   000051   FA           MOV     R2,A
   \   000052   C3           CLR     C
   \   000053   98           SUBB    A,R0
   \   000054   95E0         SUBB    A,0xE0 /* A   */
   \   000056   50E1         JNC     ??UART_ParseRxPackage_6
   \   000058   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00005B   6421         XRL     A,#0x21
   \   00005D   70F0         JNZ     ??UART_ParseRxPackage_8
   \   00005F   7401         MOV     A,#0x1
   \   000061   2C           ADD     A,R4
   \   000062   90....       MOV     DPTR,#Rx0_Data + 6
   \   000065   F0           MOVX    @DPTR,A
   \   000066   7901         MOV     R1,#0x1
   \   000068   80B0         SJMP    ??UART_ParseRxPackage_3
    359          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#Rx0_Data
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2A           ADD     A,R2
   \   000005   547F         ANL     A,#0x7f
   \   000007   FA           MOV     R2,A
   \   000008   74..         MOV     A,#(Rx0_Data + 7) & 0xff
   \   00000A   2A           ADD     A,R2
   \   00000B   F582         MOV     DPL,A
   \   00000D   E4           CLR     A
   \   00000E   34..         ADDC    A,#((Rx0_Data + 7) >> 8) & 0xff
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   22           RET
    360          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          uint8 UART_ParseLength(uint8 port)
   \                     UART_ParseLength:
    362          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
    363          	uint8 tmp_ParseLength;
    364          
    365          	if ( port == HAL_UART_PORT_0 )
   \   000005   7009         JNZ     ??UART_ParseLength_0
    366          	{
    367          		tmp_ParseLength = Rx0_Data.ParseLength;
   \   000007   90....       MOV     DPTR,#Rx0_Data + 6
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
    368          		Rx0_Data.ParseLength = 0;
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    369          		return tmp_ParseLength;
   \   00000E   8002         SJMP    ??UART_ParseLength_1
    370          	}
    371          	else if ( port == HAL_UART_PORT_1 )
    372          	{
    373          	
    374          	}
    375          	return 0;
   \                     ??UART_ParseLength_0:
   \   000010   7900         MOV     R1,#0x0
   \                     ??UART_ParseLength_1:
   \   000012   02....       LJMP    ?Subroutine2 & 0xFFFF
    376          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_SendString::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_SendString

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_SendNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_SendNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uart_pow_of::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uart_pow_of

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_DebugPrint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_DebugPrint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_DebugPrintNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_DebugPrintNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_ZCmdPrint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_ZCmdPrint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_ZCmdPrintBuffer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_ZCmdPrintBuffer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_ZCmdPrintNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_ZCmdPrintNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_ZCmdPrintString::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_ZCmdPrintString

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_DebugPrintLCD::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_DebugPrintLCD

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_DebugPrintLCDNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_DebugPrintLCDNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_DataAvailable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_DataAvailable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_GetData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_GetData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART0_RxProcessCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART0_RxProcessCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART1_RxProcessCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART1_RxProcessCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_ParseRxPackage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_ParseRxPackage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_ParseLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_ParseLength

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "-">`:
   \   000000   2D00         DB "-"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0
    377          /*******************************************************************************
    378          ********************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1    140   UART0_RxProcessCB
        0    140   -> HalUARTRead
        0    140   -> Hal_UART_RxBufLen
      0      0   UART1_RxProcessCB
      2      9   UART_DataAvailable
      0      0   UART_DebugPrint
      0      0   UART_DebugPrintLCD
      0      4   UART_DebugPrintLCDNum
      0      0   UART_DebugPrintNum
      3      0   UART_GetData
      0     38   UART_Init
        0     38   -> HalUARTOpen
      2      0   UART_ParseLength
      0      9   UART_ParseRxPackage
        0      9   -> UART_DataAvailable
      1     37   UART_SendNum
        0     25   -> HalUARTWrite
        0     25   -> uart_pow_of
      0      9   UART_SendString
        0      9   -> HalUARTWrite
        0      9   -> osal_strlen
      0     12   UART_ZCmdPrint
        0     12   -> HalUARTWrite
        0     12   -> osal_strlen
      0      9   UART_ZCmdPrintBuffer
        0      9   -> HalUARTWrite
      0     12   UART_ZCmdPrintNum
        0     12   -> UART_SendNum
      0      9   UART_ZCmdPrintString
        0      9   -> HalUARTWrite
        0      9   -> osal_strlen
      0     41   uart_pow_of


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "-">
       2  ?<Constant "0">
       3  ?<Constant "\r\n">
       5  ??Subroutine10_0
       3  ??Subroutine9_0
      24  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine2
      17  ?Subroutine3
      20  ?Subroutine4
      14  ?Subroutine5
      13  ?Subroutine6
       4  ?Subroutine7
      10  ?Subroutine8
     135  Rx0_Data
     129  UART0_RxProcessCB
       6  UART0_RxProcessCB::?relay
       3  UART1_RxProcessCB
       6  UART1_RxProcessCB::?relay
      16  UART_DataAvailable
       6  UART_DataAvailable::?relay
       3  UART_DebugPrint
       6  UART_DebugPrint::?relay
       3  UART_DebugPrintLCD
       6  UART_DebugPrintLCD::?relay
       3  UART_DebugPrintLCDNum
       6  UART_DebugPrintLCDNum::?relay
       3  UART_DebugPrintNum
       6  UART_DebugPrintNum::?relay
      66  UART_GetData
       6  UART_GetData::?relay
     196  UART_Init
       6  UART_Init::?relay
      21  UART_ParseLength
       6  UART_ParseLength::?relay
     106  UART_ParseRxPackage
       6  UART_ParseRxPackage::?relay
     257  UART_SendNum
       6  UART_SendNum::?relay
       3  UART_SendString
       6  UART_SendString::?relay
      44  UART_ZCmdPrint
       6  UART_ZCmdPrint::?relay
       9  UART_ZCmdPrintBuffer
       6  UART_ZCmdPrintBuffer::?relay
      10  UART_ZCmdPrintNum
       6  UART_ZCmdPrintNum::?relay
       2  UART_ZCmdPrintString
       6  UART_ZCmdPrintString::?relay
       4  __Constant_0
      60  uart_pow_of
       6  uart_pow_of::?relay

 
 1 056 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
    11 bytes in segment XDATA_ROM_C
   135 bytes in segment XDATA_Z
 
   108 bytes of CODE     memory
     7 bytes of CONST    memory (+ 4 bytes shared)
 1 056 bytes of HUGECODE memory
   135 bytes of XDATA    memory

Errors: none
Warnings: none
