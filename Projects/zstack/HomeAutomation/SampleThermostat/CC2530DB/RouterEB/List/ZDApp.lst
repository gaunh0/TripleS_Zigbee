###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                14/Feb/2017  09:11:00
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFAFA
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Components\stack\zdo\ZDApp.c" -D ROUTER -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_ON_OFF -D ZCL_HVAC_CLUSTER -lC
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\List"
#        -lA "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Teddy\Desktop\aaa\[COMBROS]
#        Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\Source\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\Source\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\HomeAutomation\MY-SOURCE\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\List\ZDApp.lst
#    Object file        =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleThermostat\CC2530DB\RouterEB\Obj\ZDApp.r51
#
###############################################################################

C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          /* MY INCLUDE */
     75          #include "MS_UART.h"
     76          #include "MS_GLOBAL.h"
     77          
     78          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     79            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     80          #endif
     81          
     82          /*********************************************************************
     83           * CONSTANTS
     84           */
     85          
     86          #if !defined( NWK_START_DELAY )
     87            #define NWK_START_DELAY             100   // in milliseconds
     88          #endif
     89          
     90          #if !defined( LEAVE_RESET_DELAY )
     91            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     92          #endif
     93          
     94          // Init ZDO, but hold and wait for application to start the joining or
     95          // forming network
     96          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     97          
     98          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     99            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
    100          #endif
    101          
    102          #if !defined( BEACON_REQUEST_DELAY )
    103            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    104          #endif
    105          
    106          #if !defined( BEACON_REQ_DELAY_MASK )
    107            #define BEACON_REQ_DELAY_MASK       0x007F
    108          #endif
    109          
    110          #define MAX_RESUME_RETRY            3
    111          
    112          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    113          
    114          // Beacon Order Settings (see NLMEDE.h)
    115          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    116          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    117          
    118          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    119          // Additional counts to add to the frame counter when restoring from NV
    120          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    121          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    122          #endif
    123          
    124          // Leave control bits
    125          #define ZDAPP_LEAVE_CTRL_INIT 0
    126          #define ZDAPP_LEAVE_CTRL_SET  1
    127          #define ZDAPP_LEAVE_CTRL_RA   2
    128          
    129          // Address Manager Stub Implementation
    130          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    131          
    132          
    133          #if !defined ZDO_NV_SAVE_RFDs
    134          #define ZDO_NV_SAVE_RFDs  TRUE
    135          #endif
    136          
    137          // Delay time before updating NWK NV data to force fewer writes during high activity.
    138          #if ZDO_NV_SAVE_RFDs
    139          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    140          #else
    141          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    142          #endif
    143          
    144          // Timeout value to process New Devices
    145          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    146          
    147          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    148          #if !defined MAX_PENDING_BIND_REQ
    149          #define MAX_PENDING_BIND_REQ 3
    150          #endif
    151          #endif
    152          
    153          /******************************************************************************
    154           * TYPEDEFS
    155           */
    156          typedef struct
    157          {
    158            void   *next;
    159            uint16 shortAddr;
    160            uint16 timeDelta;
    161          } ZDAppNewDevice_t;
    162          
    163          /*********************************************************************
    164           * GLOBAL VARIABLES
    165           */
    166          
    167          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    169          #endif
    170          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    171          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    172          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    174          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    181          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    182          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    184          
    185          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    187          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    189          
    190          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    192          #endif
    193          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    195          
    196          /*********************************************************************
    197           * EXTERNAL VARIABLES
    198           */
    199          
    200          /*********************************************************************
    201           * EXTERNAL FUNCTIONS
    202           */
    203          
    204          /*********************************************************************
    205           * LOCAL FUNCTIONS
    206           */
    207          
    208          void ZDApp_NetworkStartEvt( void );
    209          void ZDApp_DeviceAuthEvt( void );
    210          void ZDApp_SaveNetworkStateEvt( void );
    211          
    212          uint8 ZDApp_ReadNetworkRestoreState( void );
    213          uint8 ZDApp_RestoreNetworkState( void );
    214          void ZDAppDetermineDeviceType( void );
    215          void ZDApp_InitUserDesc( void );
    216          void ZDAppCheckForHoldKey( void );
    217          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    218          void ZDApp_ProcessNetworkJoin( void );
    219          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    220          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    221          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    222          
    223          void ZDApp_SecInit( uint8 state );
    224          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    225          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    226          
    227          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    228          
    229          void ZDApp_ResetTimerStart( uint16 delay );
    230          void ZDApp_ResetTimerCancel( void );
    231          void ZDApp_LeaveCtrlInit( void );
    232          void ZDApp_LeaveCtrlSet( uint8 ra );
    233          uint8 ZDApp_LeaveCtrlBypass( void );
    234          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    235          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    236                                  uint8 removeChildren );
    237          void ZDApp_NodeProfileSync( uint8 stackProfile );
    238          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    239          void ZDApp_RegisterCBs( void );
    240          void ZDApp_InitZdoCBFunc(void);
    241          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    242          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    243          void ZDApp_InitPendingBind( void );
    244          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    245          void ZDApp_AgeOutPendingBindEntry( void );
    246          #endif
    247          
    248          void ZDApp_SetParentAnnceTimer( void );
    249          
    250          /*********************************************************************
    251           * LOCAL VARIABLES
    252           */
    253          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    254          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    258          
    259          #if defined( HOLD_AUTO_START )
    260            devStates_t devState = DEV_HOLD;
    261          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    262            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    263          #endif
    264          
    265          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    266            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    267          
    268          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    269            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    270            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    271                                  // to parent. Set to make the device do an Orphan scan.
    272          #else
    273            // Set the default to coodinator
    274            devStartModes_t devStartMode = MODE_HARD;
    275          #endif
    276          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    277          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    278          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    279          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    280          {
    281            ZDO_EP,
    282            &ZDAppTaskID,
    283            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    284            (afNetworkLatencyReq_t)0            // No Network Latency req
    285          };
    286          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    287          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    288          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    289          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    290          
    291          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    292          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    293          
    294          /*********************************************************************
    295           * @fn      ZDApp_Init
    296           *
    297           * @brief   ZDApp Initialization function.
    298           *
    299           * @param   task_id - ZDApp Task ID
    300           *
    301           * @return  None
    302           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    303          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    304          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    305            // Save the task ID
    306            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    307          
    308            // Initialize the ZDO global device short address storage
    309            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    310            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    311            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    312          
    313            // Check for manual "Hold Auto Start"
    314            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
    315          
    316            // Initialize ZDO items and setup the device - type of device to create.
    317            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
    318          
    319            // Register the endpoint description with the AF
    320            // This task doesn't have a Simple description, but we still need
    321            // to register the endpoint.
    322            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    323          
    324          #if defined( ZDO_USERDESC_RESPONSE )
    325            ZDApp_InitUserDesc();
   \   000029                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000029   12....       LCALL   `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
    326          #endif // ZDO_USERDESC_RESPONSE
    327          
    328            // Start the device?
    329            if ( devState != DEV_HOLD )
   \   00002C   90....       MOV     DPTR,#devState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6009         JZ      ??ZDApp_Init_0
    330            {
    331              ZDOInitDevice( 0 );
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7A00         MOV     R2,#0x0
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000039   8014         SJMP    ??ZDApp_Init_1
    332            }
    333            else
    334            {
    335              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   00003B                ; Setup parameters for call to function ZDOInitDevice
   \   00003B   7AFF         MOV     R2,#-0x1
   \   00003D   7BFF         MOV     R3,#-0x1
   \   00003F   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    336              // Blink LED to indicate HOLD_START
    337              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   000042                ; Setup parameters for call to function HalLedBlink
   \   000042   7CF4         MOV     R4,#-0xc
   \   000044   7D01         MOV     R5,#0x1
   \   000046   7B32         MOV     R3,#0x32
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   7908         MOV     R1,#0x8
   \   00004C   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    338            }
    339          
    340            // Initialize the ZDO callback function pointers zdoCBFunc[]
    341            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004F                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004F   12....       LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    342          
    343            ZDApp_RegisterCBs();
   \   000052                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000052   12....       LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    344          
    345          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    346          #if defined ( REFLECTOR )
    347            ZDApp_InitPendingBind();
   \   000055                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000055   12....       LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    348          #endif
    349          #endif
    350          } /* ZDApp_Init() */
   \   000058   02....       LJMP    ??Subroutine44_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    351          
    352          /*********************************************************************
    353           * @fn          ZDApp_SecInit
    354           *
    355           * @brief       ZDApp initialize security.
    356           *
    357           * @param       state - device initialization state
    358           *
    359           * @return      none
    360           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    362          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    363            uint8 zgPreConfigKey[SEC_KEY_LEN];
    364          
    365            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    366            {
    367              // Set the Trust Center bit
    368              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    369            }
    370          
    371            // Initialize ZigBee Device Security Manager
    372            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    373          
    374            if ( ZG_SECURE_ENABLED )
    375            {
    376              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00000F   E5..         MOV     A,?V0
   \   000011   6045         JZ      ??ZDApp_SecInit_0
    377              {
    378                nwkFrameCounter = 0;
   \   000013   90....       MOV     DPTR,#nwkFrameCounter
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    379          
    380                if( _NIB.nwkKeyLoaded == FALSE )
   \   00001E   90....       MOV     DPTR,#_NIB + 61
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7034         JNZ     ??ZDApp_SecInit_0
    381                {
    382                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    383                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000024   90....       MOV     DPTR,#zgSecurityMode
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   702C         JNZ     ??ZDApp_SecInit_0
   \   00002C   90....       MOV     DPTR,#zgPreConfigKeys
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6026         JZ      ??ZDApp_SecInit_0
    384                  {
    385                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000032                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000032   AC..         MOV     R4,?XSP + 0
   \   000034   AD..         MOV     R5,?XSP + 1
   \   000036   7A62         MOV     R2,#0x62
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    386                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   00003D                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   AA..         MOV     R2,?XSP + 0
   \   000041   AB..         MOV     R3,?XSP + 1
   \   000043   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    387                      SSP_SwitchNwkKey( 0 );
   \   000046                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000046   7900         MOV     R1,#0x0
   \   000048   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    388          
    389                      // clear local copy of key
    390                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00004B                ; Setup parameters for call to function osal_memset
   \   00004B   7C10         MOV     R4,#0x10
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7900         MOV     R1,#0x0
   \   000051   AA..         MOV     R2,?XSP + 0
   \   000053   AB..         MOV     R3,?XSP + 1
   \   000055   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    391                  }
    392                }
    393              }
    394          
    395              // clean the new devices list when Security module is initialized
    396              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   000058   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00005B   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00005E   601E         JZ      ??ZDApp_SecInit_1
    397              {
    398                ZDAppNewDevice_t *pNewDeviceNext;
    399          
    400                while ( ZDApp_NewDeviceList )
    401                {
    402                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000060   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000063   FE           MOV     R6,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FF           MOV     R7,A
    403                  osal_mem_free( ZDApp_NewDeviceList );
   \   000067                ; Setup parameters for call to function osal_mem_free
   \   000067   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00006A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00006D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    404                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000070   EE           MOV     A,R6
   \   000071   F8           MOV     R0,A
   \   000072   EF           MOV     A,R7
   \   000073   F9           MOV     R1,A
   \   000074   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000077   12....       LCALL   ?Subroutine16 & 0xFFFF
    405                }
   \                     ??CrossCallReturnLabel_2:
   \   00007A   E8           MOV     A,R0
   \   00007B   49           ORL     A,R1
   \   00007C   70E2         JNZ     ??ZDApp_SecInit_2
    406              }
    407            }
    408          }
   \                     ??ZDApp_SecInit_1:
   \   00007E   7410         MOV     A,#0x10
   \   000080   02....       LJMP    ??Subroutine47_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    409          
    410          /*********************************************************************
    411           * @fn      ZDApp_event_loop()
    412           *
    413           * @brief   Main event loop for Zigbee device objects task. This function
    414           *          should be called at periodic intervals.
    415           *
    416           * @param   task_id - Task ID
    417           * @param   events  - Bitmap of events
    418           *
    419           * @return  none
    420           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    421          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    422          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    423            uint8 *msg_ptr;
    424          
    425            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL     A,#0x80
   \   00000D   702D         JNZ     ??ZDApp_event_loop_0
    426            {
    427              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    428              {
    429                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    430          
    431                // Release the memory
    432                osal_msg_deallocate( msg_ptr );
    433              }
    434          
    435              // Return unprocessed events
    436              return (events ^ SYS_EVENT_MSG);
    437            }
    438          
    439            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EE           MOV     A,R6
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5041         JNC     ??ZDApp_event_loop_1
    440            {
    441              // Initialize apps and start the network
    442              ZDApp_ChangeState( DEV_INIT );
   \   000014                ; Setup parameters for call to function ZDApp_ChangeState
   \   000014   7901         MOV     R1,#0x1
   \   000016   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    443          
    444              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    445                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000019                ; Setup parameters for call to function ZDO_StartDevice
   \   000019   7C0F         MOV     R4,#0xf
   \   00001B   7B0F         MOV     R3,#0xf
   \   00001D   90....       MOV     DPTR,#devStartMode
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX    A,@DPTR
   \   000026   5407         ANL     A,#0x7
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    446          
    447              // Return unprocessed events
    448              return (events ^ ZDO_NETWORK_INIT);
   \   00002C   EE           MOV     A,R6
   \   00002D   6401         XRL     A,#0x1
   \   00002F   02....       LJMP    ??ZDApp_event_loop_2 & 0xFFFF
    449            }
   \                     ??ZDApp_event_loop_3:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000032   12....       LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000035                ; Setup parameters for call to function osal_msg_deallocate
   \   000035   AA..         MOV     R2,?V0
   \   000037   AB..         MOV     R3,?V1
   \   000039   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003C                ; Setup parameters for call to function osal_msg_receive
   \   00003C   90....       MOV     DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000044   8A..         MOV     ?V0,R2
   \   000046   8B..         MOV     ?V1,R3
   \   000048   EA           MOV     A,R2
   \   000049   45..         ORL     A,?V1
   \   00004B   70E5         JNZ     ??ZDApp_event_loop_3
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   6480         XRL     A,#0x80
   \   000052   02....       LJMP    ??ZDApp_event_loop_4 & 0xFFFF
    450          
    451            if ( ZSTACK_ROUTER_BUILD )
    452            {
    453              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_1:
   \   000055   5402         ANL     A,#0x2
   \   000057   6009         JZ      ??ZDApp_event_loop_5
    454              {
    455                ZDApp_NetworkStartEvt();
   \   000059                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   000059   12....       LCALL   `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
    456          
    457                // Return unprocessed events
    458                return (events ^ ZDO_NETWORK_START);
   \   00005C   EE           MOV     A,R6
   \   00005D   6402         XRL     A,#0x2
   \   00005F   02....       LJMP    ??ZDApp_event_loop_2 & 0xFFFF
    459              }
    460          
    461              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_5:
   \   000062   EE           MOV     A,R6
   \   000063   5420         ANL     A,#0x20
   \   000065   6034         JZ      ??ZDApp_event_loop_6
    462              {
    463                if ( nwkStatus == ZSuccess )
   \   000067   90....       MOV     DPTR,#nwkStatus
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   701D         JNZ     ??ZDApp_event_loop_7
    464                {
    465                  if ( devState == DEV_END_DEVICE )
   \   00006D   90....       MOV     DPTR,#devState
   \   000070   E0           MOVX    A,@DPTR
   \   000071   6406         XRL     A,#0x6
   \   000073   7005         JNZ     ??ZDApp_event_loop_8
    466                  {
    467                    ZDApp_ChangeState( DEV_ROUTER );
   \   000075                ; Setup parameters for call to function ZDApp_ChangeState
   \   000075   7907         MOV     R1,#0x7
   \   000077   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    468                  }
    469          
    470                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_8:
   \   00007A                ; Setup parameters for call to function osal_pwrmgr_device
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    471          
    472                  if ( zgChildAgingEnable == TRUE )
   \   00007F   90....       MOV     DPTR,#zgChildAgingEnable
   \   000082   E0           MOVX    A,@DPTR
   \   000083   6401         XRL     A,#0x1
   \   000085   7003         JNZ     ??ZDApp_event_loop_7
    473                  {
    474                    // Once the device has changed its state to a ROUTER set the timer to send
    475                    // Parent annce
    476                    ZDApp_SetParentAnnceTimer();
   \   000087                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000087   12....       LCALL   `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
    477                  }
    478                }
    479                else
    480                {
    481                  // remain as end device
    482                }
    483                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_7:
   \   00008A                ; Setup parameters for call to function osal_set_event
   \   00008A   7A10         MOV     R2,#0x10
   \   00008C   7B00         MOV     R3,#0x0
   \   00008E   90....       MOV     DPTR,#ZDAppTaskID
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    484          
    485                // Return unprocessed events
    486                return (events ^ ZDO_ROUTER_START);
   \   000096   EE           MOV     A,R6
   \   000097   6420         XRL     A,#0x20
   \   000099   807F         SJMP    ??ZDApp_event_loop_2
    487              }
    488          
    489              if ( events & ZDO_PARENT_ANNCE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   00009B   EF           MOV     A,R7
   \   00009C   5440         ANL     A,#0x40
   \   00009E   600B         JZ      ??ZDApp_event_loop_9
    490              {
    491                ZDApp_SendParentAnnce();
   \   0000A0                ; Setup parameters for call to function ZDApp_SendParentAnnce
   \   0000A0   12....       LCALL   `??ZDApp_SendParentAnnce::?relay`; Banked call to: ZDApp_SendParentAnnce
    492          
    493                // Return unprocessed events
    494                return (events ^ ZDO_PARENT_ANNCE_EVT);
   \   0000A3   EE           MOV     A,R6
   \   0000A4   FA           MOV     R2,A
   \   0000A5   EF           MOV     A,R7
   \   0000A6   6440         XRL     A,#0x40
   \   0000A8   02....       LJMP    ??ZDApp_event_loop_4 & 0xFFFF
    495              }
    496            }
    497          
    498            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_9:
   \   0000AB   EF           MOV     A,R7
   \   0000AC   5420         ANL     A,#0x20
   \   0000AE   603B         JZ      ??ZDApp_event_loop_10
    499            {
    500              if( devState == DEV_NWK_BACKOFF )
   \   0000B0   90....       MOV     DPTR,#devState
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   640C         XRL     A,#0xc
   \   0000B6   700D         JNZ     ??ZDApp_event_loop_11
    501              {
    502                ZDApp_ChangeState(DEV_NWK_DISC);
   \   0000B8                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000B8   7902         MOV     R1,#0x2
   \   0000BA   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    503                // Restart scan for rejoin
    504                ZDApp_StartJoiningCycle();
   \   0000BD                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   0000BD   12....       LCALL   `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
    505                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   0000C0                ; Setup parameters for call to function osal_start_timerEx
   \   0000C0   90....       MOV     DPTR,#zgDefaultRejoinScan
   \   0000C3   800B         SJMP    ??ZDApp_event_loop_12
    506              }
    507              else
    508              {
    509                // Rejoin backoff, silent period
    510                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_11:
   \   0000C5                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000C5   790C         MOV     R1,#0xc
   \   0000C7   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    511                ZDApp_StopJoiningCycle();
   \   0000CA                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   0000CA   12....       LCALL   `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    512                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   0000CD                ; Setup parameters for call to function osal_start_timerEx
   \   0000CD   90....       MOV     DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_12:
   \   0000D0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000D3   7A00         MOV     R2,#0x0
   \   0000D5   7B20         MOV     R3,#0x20
   \   0000D7   90....       MOV     DPTR,#ZDAppTaskID
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F9           MOV     R1,A
   \   0000DC   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000DF   7404         MOV     A,#0x4
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
    513              }
    514          
    515              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   0000E4   EE           MOV     A,R6
   \   0000E5   FA           MOV     R2,A
   \   0000E6   EF           MOV     A,R7
   \   0000E7   6420         XRL     A,#0x20
   \   0000E9   8078         SJMP    ??ZDApp_event_loop_4
    516            }
    517          
    518            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_10:
   \   0000EB   EE           MOV     A,R6
   \   0000EC   5410         ANL     A,#0x10
   \   0000EE   602E         JZ      ??ZDApp_event_loop_13
    519            {
    520              ZDO_UpdateNwkStatus( devState );
   \   0000F0                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000F0   90....       MOV     DPTR,#devState
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F9           MOV     R1,A
   \   0000F5   12....       LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    521          
    522              // At start up, do one MTO route discovery if the device is a concentrator
    523              if ( zgConcentratorEnable == TRUE )
   \   0000F8   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   6401         XRL     A,#0x1
   \   0000FE   7017         JNZ     ??ZDApp_event_loop_14
    524              {
    525                // Start next event
    526                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000100                ; Setup parameters for call to function osal_start_timerEx
   \   000100   90....       MOV     DPTR,#__Constant_64
   \   000103   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000106   7A00         MOV     R2,#0x0
   \   000108   7B08         MOV     R3,#0x8
   \   00010A   90....       MOV     DPTR,#NWK_TaskID
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   F9           MOV     R1,A
   \   00010F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000112   7404         MOV     A,#0x4
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
    527              }
    528          
    529              // Return unprocessed events
    530              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_14:
   \   000117   EE           MOV     A,R6
   \   000118   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   00011A   FA           MOV     R2,A
   \   00011B   EF           MOV     A,R7
   \   00011C   8045         SJMP    ??ZDApp_event_loop_4
    531            }
    532          
    533            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_13:
   \   00011E   EE           MOV     A,R6
   \   00011F   5408         ANL     A,#0x8
   \   000121   6006         JZ      ??ZDApp_event_loop_15
    534            {
    535              // User defined logic
    536          
    537              // Return unprocessed events
    538              return (events ^ ZDO_COMMAND_CNF);
   \   000123   EE           MOV     A,R6
   \   000124   6408         XRL     A,#0x8
   \   000126   FA           MOV     R2,A
   \   000127   8046         SJMP    ??ZDApp_event_loop_16
    539            }
    540          
    541            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_15:
   \   000129   EF           MOV     A,R7
   \   00012A   5401         ANL     A,#0x1
   \   00012C   6019         JZ      ??ZDApp_event_loop_17
    542            {
    543              // Save only in valid state
    544              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
   \   00012E   90....       MOV     DPTR,#_NIB + 35
   \   000131   E0           MOVX    A,@DPTR
   \   000132   F8           MOV     R0,A
   \   000133   7408         MOV     A,#0x8
   \   000135   68           XRL     A,R0
   \   000136   6005         JZ      ??ZDApp_event_loop_18
   \   000138   7404         MOV     A,#0x4
   \   00013A   68           XRL     A,R0
   \   00013B   7003         JNZ     ??ZDApp_event_loop_19
    545              {
    546                ZDApp_SaveNetworkStateEvt();
   \                     ??ZDApp_event_loop_18:
   \   00013D                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   00013D   12....       LCALL   `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    547              }
    548          
    549              // Return unprocessed events
    550              return (events ^ ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_event_loop_19:
   \   000140   EE           MOV     A,R6
   \   000141   FA           MOV     R2,A
   \   000142   EF           MOV     A,R7
   \   000143   6401         XRL     A,#0x1
   \   000145   801C         SJMP    ??ZDApp_event_loop_4
    551            }
    552          
    553            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_17:
   \   000147   EE           MOV     A,R6
   \   000148   5404         ANL     A,#0x4
   \   00014A   600A         JZ      ??ZDApp_event_loop_20
    554            {
    555          #ifdef ZBA_FALLBACK_NWKKEY
    556              if ( devState == DEV_END_DEVICE_UNAUTH )
    557              {
    558                ZDSecMgrFallbackNwkKey();
    559              }
    560              else
    561          #endif
    562              {
    563                // Set the NV startup option to force a "new" join.
    564                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   00014C                ; Setup parameters for call to function zgWriteStartupOptions
   \   00014C   7A02         MOV     R2,#0x2
   \   00014E   79FF         MOV     R1,#-0x1
   \   000150   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    565          
    566                // The device has been in the UNAUTH state, so reset
    567                // Note: there will be no return from this call
    568                SystemResetSoft();
   \   000153                ; Setup parameters for call to function Onboard_soft_reset
   \   000153   12....       LCALL   Onboard_soft_reset & 0xFFFF
    569              }
    570            }
    571          
    572          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    573            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_20:
   \   000156   EF           MOV     A,R7
   \   000157   5410         ANL     A,#0x10
   \   000159   600B         JZ      ??ZDApp_event_loop_21
    574            {
    575          #if defined ( REFLECTOR )
    576              ZDApp_AgeOutPendingBindEntry();
   \   00015B                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   00015B   12....       LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    577          #endif
    578              // Return unprocessed events
    579              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   00015E   EE           MOV     A,R6
   \   00015F   FA           MOV     R2,A
   \   000160   EF           MOV     A,R7
   \   000161   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   000163   FB           MOV     R3,A
   \   000164   8009         SJMP    ??ZDApp_event_loop_16
    580            }
    581          #endif
    582          
    583            if ( ZG_SECURE_ENABLED )
    584            {
    585              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_21:
   \   000166                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   000166   EE           MOV     A,R6
   \   000167   FA           MOV     R2,A
   \   000168   EF           MOV     A,R7
   \   000169   FB           MOV     R3,A
   \   00016A   A9..         MOV     R1,?V2
   \   00016C   12....       LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    586            }
   \                     ??ZDApp_event_loop_16:
   \   00016F   80..         SJMP    ??Subroutine35_0
    587            else
    588            {
    589              // Discard or make more handlers
    590              return 0;
    591            }
    592          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    593          
    594          /*********************************************************************
    595           * @fn      ZDApp_ProcessSecEvent()
    596           *
    597           * @brief   Process incoming security events.
    598           *
    599           * @param   task_id - Task ID
    600           * @param   events  - Bitmap of events
    601           *
    602           * @return  none
    603           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    604          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    605          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    606            (void)task_id;  // Intentionally unreferenced parameter
    607          
    608            if ( ZSTACK_ROUTER_BUILD )
    609            {
    610              if ( events & ZDO_NEW_DEVICE )
   \   000009   EE           MOV     A,R6
   \   00000A   5440         ANL     A,#0x40
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??ZDApp_ProcessSecEvent_0 & 0xFFFF
    611              {
    612                // process the new device event
    613                if ( ZDApp_NewDeviceList )
   \   000011   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000014   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000017   607E         JZ      ??ZDApp_ProcessSecEvent_1
    614                {
    615                  ZDAppNewDevice_t *pNewDevice;
    616                  uint16 timeDelta;
    617          
    618                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000019   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000021   12....       LCALL   `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
    619          
    620                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   000024   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000027   F5..         MOV     ?V0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V1,A
    621                  osal_mem_free( ZDApp_NewDeviceList );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000030   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000033   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    622                  ZDApp_NewDeviceList = pNewDevice;
   \   000036   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000039   12....       LCALL   ??Subroutine46_0 & 0xFFFF
    623          
    624                  if ( pNewDevice )
   \                     ??CrossCallReturnLabel_91:
   \   00003C   E5..         MOV     A,?V0
   \   00003E   45..         ORL     A,?V1
   \   000040   6055         JZ      ??ZDApp_ProcessSecEvent_1
    625                  {
    626                    timeDelta = pNewDevice->timeDelta;
   \   000042   85..82       MOV     DPL,?V0
   \   000045   85..83       MOV     DPH,?V1
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V4,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V5,A
    627                    pNewDevice = pNewDevice->next;
   \   000053   8014         SJMP    ??ZDApp_ProcessSecEvent_2
    628          
    629                    while ( pNewDevice )
    630                    {
    631                      pNewDevice->timeDelta -= timeDelta;
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000055   85..82       MOV     DPL,?V0
   \   000058   85..83       MOV     DPH,?V1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   C3           CLR     C
   \   000060   E0           MOVX    A,@DPTR
   \   000061   95..         SUBB    A,?V4
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   95..         SUBB    A,?V5
   \   000068   F0           MOVX    @DPTR,A
    632                      pNewDevice = pNewDevice->next;
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V1,A
    633                    }
   \   000076   E5..         MOV     A,?V0
   \   000078   45..         ORL     A,?V1
   \   00007A   70D9         JNZ     ??ZDApp_ProcessSecEvent_3
    634          
    635                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \   00007C                ; Setup parameters for call to function osal_start_timerEx
   \   00007C   E4           CLR     A
   \   00007D   F5..         MOV     ?V6,A
   \   00007F   F5..         MOV     ?V7,A
   \   000081   78..         MOV     R0,#?V4
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000086   7A40         MOV     R2,#0x40
   \   000088   7B00         MOV     R3,#0x0
   \   00008A   90....       MOV     DPTR,#ZDAppTaskID
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000092   7404         MOV     A,#0x4
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
    636                  }
    637                }
    638          
    639                // Return unprocessed events
    640                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000097   EE           MOV     A,R6
   \   000098   6440         XRL     A,#0x40
   \   00009A   800B         SJMP    ??ZDApp_ProcessSecEvent_4
    641              }
    642            }
    643          
    644            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   00009C   EE           MOV     A,R6
   \   00009D   5480         ANL     A,#0x80
   \   00009F   600A         JZ      ??ZDApp_ProcessSecEvent_5
    645            {
    646              ZDApp_DeviceAuthEvt();
   \   0000A1                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   0000A1   12....       LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    647          
    648              // Return unprocessed events
    649              return (events ^ ZDO_DEVICE_AUTH);
   \   0000A4   EE           MOV     A,R6
   \   0000A5   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessSecEvent_4:
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   802B         SJMP    ??ZDApp_ProcessSecEvent_6
    650            }
    651          
    652            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   0000AB   EF           MOV     A,R7
   \   0000AC   5402         ANL     A,#0x2
   \   0000AE   600A         JZ      ??ZDApp_ProcessSecEvent_7
    653            {
    654              ZDApp_SaveNwkKey();
   \   0000B0                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   0000B0   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    655          
    656              // Return unprocessed events
    657              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   6402         XRL     A,#0x2
   \   0000B8   801C         SJMP    ??ZDApp_ProcessSecEvent_6
    658            }
    659          
    660            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_7:
   \   0000BA   EF           MOV     A,R7
   \   0000BB   5408         ANL     A,#0x8
   \   0000BD   600A         JZ      ??ZDApp_ProcessSecEvent_8
    661            {
    662          #if defined (NV_RESTORE)
    663              ZDSecMgrSaveApsLinkKey();
   \   0000BF                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   0000BF   12....       LCALL   `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    664          #endif // (NV_RESTORE)
    665          
    666              // Return unprocessed events
    667              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   6408         XRL     A,#0x8
   \   0000C7   800D         SJMP    ??ZDApp_ProcessSecEvent_6
    668            }
    669          
    670            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   0000C9   EF           MOV     A,R7
   \   0000CA   5404         ANL     A,#0x4
   \   0000CC   600B         JZ      ??ZDApp_ProcessSecEvent_9
    671            {
    672              ZDSecMgrSaveTCLinkKey();
   \   0000CE                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   0000CE   12....       LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    673          
    674              // Return unprocessed events
    675              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   0000D1   EE           MOV     A,R6
   \   0000D2   FA           MOV     R2,A
   \   0000D3   EF           MOV     A,R7
   \   0000D4   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_6:
   \   0000D6   FB           MOV     R3,A
   \   0000D7   8004         SJMP    ??ZDApp_ProcessSecEvent_10
    676            }
    677          
    678            // Discard or make more handlers
    679            return 0;
   \                     ??ZDApp_ProcessSecEvent_9:
   \   0000D9   7A00         MOV     R2,#0x0
   \   0000DB   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_10:
   \   0000DD   02....       LJMP    ?Subroutine2 & 0xFFFF
    680          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E5..         MOV     A,?V0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
    681          
    682          /*********************************************************************
    683           * Application Functions
    684           */
    685          
    686          /*********************************************************************
    687           * @fn      ZDOInitDevice
    688           *
    689           * @brief   Start the device in the network.  This function will read
    690           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    691           *   restore the network state of the device.
    692           *
    693           * @param   startDelay - timeDelay to start device (in milliseconds).
    694           *                       There is a jitter added to this delay:
    695           *                       ((NWK_START_DELAY + startDelay)
    696           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    697           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    698           *                       this function will hold the network init. Application
    699           *                       can start the device.
    700           *
    701           * NOTE:    If the application would like to force a "new" join, the
    702           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    703           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    704           *          this function. "new" join means to not restore the network
    705           *          state of the device. Use zgWriteStartupOptions() to set these
    706           *          options.
    707           *
    708           * @return
    709           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    710           *          restored.
    711           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    712           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    713           *          it could mean that there was no network state to restore.
    714           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    715          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    716          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
    717            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000009   75..01       MOV     ?V0,#0x1
    718            uint16 extendedDelay = 0;
   \   00000C   7E00         MOV     R6,#0x0
   \   00000E   7F00         MOV     R7,#0x0
    719          
    720            if ( devState == DEV_HOLD )
   \   000010   90....       MOV     DPTR,#devState
   \   000013   E0           MOVX    A,@DPTR
   \   000014   7005         JNZ     ??ZDOInitDevice_0
    721            {
    722              // Initialize the RAM items table, in case an NV item has been updated.
    723              zgInitItems( FALSE );
   \   000016                ; Setup parameters for call to function zgInitItems
   \   000016   7900         MOV     R1,#0x0
   \   000018   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    724            }
    725          
    726            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   00001B                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   00001B   12....       LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    727            //devtag.071807.todo - fix this temporary solution
    728            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000021   E0           MOVX    A,@DPTR
   \   000022   90....       MOV     DPTR,#_NIB + 14
   \   000025   F0           MOVX    @DPTR,A
    729          
    730          #if defined ( NV_RESTORE )
    731            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    732            // while booting to skip past NV Restore.
    733            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000026   90....       MOV     DPTR,#zdappHoldKeys
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6404         XRL     A,#0x4
   \   00002C   7064         JNZ     ??ZDOInitDevice_1
    734            {
    735              zdappHoldKeys = 0;   // Only once
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    736              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    737            }
    738            else
    739            {
    740              // Determine if NV should be restored
    741              networkStateNV = ZDApp_ReadNetworkRestoreState();
    742            }
    743          
    744            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    745            {
    746              networkStateNV = ZDApp_RestoreNetworkState();
    747              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    748            }
    749            else
    750            {
    751              // Wipe out the network state in NV
    752              NLME_InitNV();
   \                     ??ZDOInitDevice_2:
   \   000030                ; Setup parameters for call to function NLME_InitNV
   \   000030   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
    753              NLME_SetDefaultNV();
   \   000033                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000033   12....       LCALL   `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    754              // clear NWK key values
    755              ZDSecMgrClearNVKeyValues();
   \   000036                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000036   12....       LCALL   `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    756            }
    757          #endif
    758          
    759            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDevice_3:
   \   000039   7401         MOV     A,#0x1
   \   00003B   65..         XRL     A,?V0
   \   00003D   7025         JNZ     ??ZDOInitDevice_4
    760            {
    761              ZDAppDetermineDeviceType();
   \   00003F                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00003F   12....       LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    762          
    763              // Only delay if joining network - not restoring network state
    764              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    765                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000042                ; Setup parameters for call to function osal_rand
   \   000042   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000045   EA           MOV     A,R2
   \   000046   547F         ANL     A,#0x7f
   \   000048   F8           MOV     R0,A
   \   000049   E5..         MOV     A,?V2
   \   00004B   28           ADD     A,R0
   \   00004C   F8           MOV     R0,A
   \   00004D   E4           CLR     A
   \   00004E   35..         ADDC    A,?V3
   \   000050   F9           MOV     R1,A
   \   000051   E8           MOV     A,R0
   \   000052   2464         ADD     A,#0x64
   \   000054   FE           MOV     R6,A
   \   000055   E4           CLR     A
   \   000056   39           ADDC    A,R1
   \   000057   FF           MOV     R7,A
    766          
    767              runtimeChannel = zgDefaultChannelList;
   \   000058   90....       MOV     DPTR,#zgDefaultChannelList
   \   00005B   12....       LCALL   ?XLOAD_R0123
   \   00005E   90....       MOV     DPTR,#runtimeChannel
   \   000061   12....       LCALL   ?XSTORE_R0123
    768            }
    769          
    770            // Initialize the security for type of device
    771            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_4:
   \   000064                ; Setup parameters for call to function ZDApp_SecInit
   \   000064   A9..         MOV     R1,?V0
   \   000066   12....       LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    772          
    773            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000069   74FF         MOV     A,#-0x1
   \   00006B   65..         XRL     A,?V2
   \   00006D   7004         JNZ     ??ZDOInitDevice_5
   \   00006F   74FF         MOV     A,#-0x1
   \   000071   65..         XRL     A,?V3
   \                     ??ZDOInitDevice_5:
   \   000073   6010         JZ      ??ZDOInitDevice_6
    774            {
    775              devState = DEV_INIT;    // Remove the Hold state
   \   000075   90....       MOV     DPTR,#devState
   \   000078   7401         MOV     A,#0x1
   \   00007A   F0           MOVX    @DPTR,A
    776          
    777              // Initialize leave control logic
    778              ZDApp_LeaveCtrlInit();
   \   00007B                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00007B   12....       LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    779          
    780              // Trigger the network start
    781              ZDApp_NetworkInit( extendedDelay );
   \   00007E                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    782            }
    783          
    784            // set broadcast address mask to support broadcast filtering
    785            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_6:
   \   000085                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000085   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F9           MOV     R1,A
   \   00008A   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    786          
    787            return ( networkStateNV );
   \   00008D   A9..         MOV     R1,?V0
   \   00008F   02....       LJMP    ?Subroutine2 & 0xFFFF
   \                     ??ZDOInitDevice_1:
   \   000092                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   000092   12....       LCALL   `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   000095   E9           MOV     A,R1
   \   000096   F5..         MOV     ?V0,A
   \   000098   7096         JNZ     ??ZDOInitDevice_2
   \   00009A                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   00009A   12....       LCALL   `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   00009D   E9           MOV     A,R1
   \   00009E   F5..         MOV     ?V0,A
   \   0000A0   75..01       MOV     ?V4,#0x1
   \   0000A3   8E..         MOV     ?V5,R6
   \   0000A5   8E..         MOV     ?V6,R6
   \   0000A7   8E..         MOV     ?V7,R6
   \   0000A9   90....       MOV     DPTR,#_NIB + 22
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   78..         MOV     R0,#?V4
   \   0000AF   12....       LCALL   ?L_SHL
   \   0000B2   90....       MOV     DPTR,#runtimeChannel
   \   0000B5   78..         MOV     R0,#?V4
   \   0000B7   12....       LCALL   ?L_MOV_TO_X
   \   0000BA   02....       LJMP    ??ZDOInitDevice_3 & 0xFFFF
    788          }
    789          
    790          /*********************************************************************
    791           * @fn      ZDApp_ReadNetworkRestoreState
    792           *
    793           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    794           *          or not to restore the network state.
    795           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    796           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    797           *
    798           * @param   none
    799           *
    800           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    801           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    802           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    803           *          ZCD_NV_STARTUP_OPTION
    804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    805          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    806          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    807            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    808          
    809            // Look for the New Network State option.
    810            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000E   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    811            {
    812              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV     R6,#0x1
    813            }
    814          
    815            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV     A,R6
   \   000013   F9           MOV     R1,A
   \   000014   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    816          }
    817          
    818          /*********************************************************************
    819           * @fn      ZDAppDetermineDeviceType()
    820           *
    821           * @brief   Determines the type of device to start.
    822           *
    823           *          Looks at zgDeviceLogicalType and determines what type of
    824           *          device to start.  The types are:
    825           *            ZG_DEVICETYPE_COORDINATOR
    826           *            ZG_DEVICETYPE_ROUTER
    827           *            ZG_DEVICETYPE_ENDDEVICE
    828           *
    829           * @param   none
    830           *
    831           * @return  none
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    834          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    835            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    836            {
    837              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    838              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8035         SJMP    ??ZDAppDetermineDeviceType_1
    839            }
    840            else
    841            {
    842              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700B         JNZ     ??ZDAppDetermineDeviceType_2
    843                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   4401         ORL     A,#0x1
   \   000025   800E         SJMP    ??ZDAppDetermineDeviceType_3
    844              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6402         XRL     A,#0x2
   \   00002A   700A         JNZ     ??ZDAppDetermineDeviceType_4
    845                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   54F8         ANL     A,#0xf8
   \   000032   F0           MOVX    @DPTR,A
   \   000033   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000035   F0           MOVX    @DPTR,A
    846          
    847              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    848              // The device shall do rejoin the network. Otherwise, do normal join
    849              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000036                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000036   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000038   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003A   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003D   E9           MOV     A,R1
   \   00003E   90....       MOV     DPTR,#devStartMode
   \   000041   7003         JNZ     ??ZDAppDetermineDeviceType_5
    850              {
    851                devStartMode = MODE_JOIN;     // Assume joining
   \   000043   E4           CLR     A
   \   000044   8007         SJMP    ??ZDAppDetermineDeviceType_1
    852              }
    853              else
    854              {
    855                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000046   7403         MOV     A,#0x3
   \   000048   F0           MOVX    @DPTR,A
    856                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   000049   90....       MOV     DPTR,#prevDevState
   \   00004C   04           INC     A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004D   F0           MOVX    @DPTR,A
    857              }
    858            }
    859          }
   \   00004E   02....       LJMP    ??Subroutine37_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    860          
    861          /*********************************************************************
    862           * @fn      ZDApp_NetworkStartEvt()
    863           *
    864           * @brief   Process the Network Start Event
    865           *
    866           * @param   none
    867           *
    868           * @return  none
    869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    870          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    871          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    872            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7030         JNZ     ??ZDApp_NetworkStartEvt_0
    873            {
    874              // Successfully started a ZigBee network
    875              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7015         JNZ     ??ZDApp_NetworkStartEvt_1
    876              {
    877                //save NIB to NV before child joins if NV_RESTORE is defined
    878                ZDApp_NwkWriteNVRequest();
   \   000012                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000012   12....       LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
    879                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7909         MOV     R1,#0x9
   \   000017   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    880          
    881                if ( zgChildAgingEnable == TRUE )
   \   00001A   90....       MOV     DPTR,#zgChildAgingEnable
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6401         XRL     A,#0x1
   \   000020   7011         JNZ     ??ZDApp_NetworkStartEvt_2
    882                {
    883                  // Once the device has changed its state to a COORDINATOR set the timer to send
    884                  // Parent annce
    885                  ZDApp_SetParentAnnceTimer();
   \   000022                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000022   12....       LCALL   `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000025   800C         SJMP    ??ZDApp_NetworkStartEvt_2
    886                }
    887              }
    888              else
    889              {
    890                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000027                ; Setup parameters for call to function osal_set_event
   \   000027   7A10         MOV     R2,#0x10
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   90....       MOV     DPTR,#ZDAppTaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    891              }
    892          
    893              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000033                ; Setup parameters for call to function osal_pwrmgr_device
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   000038   8037         SJMP    ??ZDApp_NetworkStartEvt_3
    894            }
    895            else
    896            {
    897              // Try again with a higher energy threshold
    898              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00003A                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00003A   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00003D   E9           MOV     A,R1
   \   00003E   7900         MOV     R1,#0x0
   \   000040   2410         ADD     A,#0x10
   \   000042   5001         JNC     ??ZDApp_NetworkStartEvt_4
   \   000044   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000045   C3           CLR     C
   \   000046   94FF         SUBB    A,#-0x1
   \   000048   E9           MOV     A,R1
   \   000049   9400         SUBB    A,#0x0
   \   00004B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00004D   65D0         XRL     A,PSW
   \   00004F   33           RLC     A
   \   000050   501A         JNC     ??ZDApp_NetworkStartEvt_5
    899              {
    900                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000052                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000052   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000055   E9           MOV     A,R1
   \   000056   F8           MOV     R0,A
   \   000057                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000057   7410         MOV     A,#0x10
   \   000059   29           ADD     A,R1
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    901                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00005E                ; Setup parameters for call to function osal_set_event
   \   00005E   7A01         MOV     R2,#0x1
   \   000060   7B00         MOV     R3,#0x0
   \   000062   90....       MOV     DPTR,#ZDAppTaskID
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00006A   8005         SJMP    ??ZDApp_NetworkStartEvt_3
    902              }
    903              else
    904              {
    905                // Failed to start network. Enter a dormant state (until user intervenes)
    906                ZDApp_ChangeState( DEV_INIT );
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00006C                ; Setup parameters for call to function ZDApp_ChangeState
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    907              }
    908            }
    909          }
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000071   02....       LJMP    ??Subroutine37_0 & 0xFFFF
    910          
    911          /*********************************************************************
    912           * @fn      ZDApp_DeviceAuthEvt()
    913           *
    914           * @brief   Process the Device Authentic Event
    915           *
    916           * @param   none
    917           *
    918           * @return  none
    919           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    920          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    921          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    922            // received authentication from trust center
    923            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   703A         JNZ     ??ZDApp_DeviceAuthEvt_0
    924            {
    925              // Stop the reset timer so it doesn't reset
    926              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    927          
    928              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   7906         MOV     R1,#0x6
   \   000011   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    929          
    930              // Set the Power Manager Device
    931          #if defined ( POWER_SAVING )
    932              osal_pwrmgr_device( PWRMGR_BATTERY );
    933          #endif
    934          
    935              if ( ZSTACK_ROUTER_BUILD )
    936              {
    937                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000014   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000017   6009         JZ      ??ZDApp_DeviceAuthEvt_1
    938                {
    939                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    940                  NLME_StartRouterRequest( 0, 0, false );
   \   000019                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7A00         MOV     R2,#0x0
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
    941                }
    942              }
    943          
    944              // Notify to save info into NV
    945              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000022                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000022   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    946          
    947              // Save off the security
    948              ZDApp_SaveNwkKey();
   \   000025                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000025   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    949          
    950              ZDApp_AnnounceNewAddress();
   \   000028                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000028   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    951          
    952              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    953                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    954                    && (zgChildAgingEnable == TRUE) ) )
   \   00002B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000031   5008         JNC     ??ZDApp_DeviceAuthEvt_2
   \   000033   90....       MOV     DPTR,#zgChildAgingEnable
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6401         XRL     A,#0x1
   \   000039   700E         JNZ     ??ZDApp_DeviceAuthEvt_3
    955              {
    956                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00003B                ; Setup parameters for call to function NLME_SetPollRate
   \   00003B   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00003E   12....       LCALL   ?XLOAD_R2345
   \   000041   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000044   8003         SJMP    ??ZDApp_DeviceAuthEvt_3
    957              }
    958            }
    959            else
    960            {
    961              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000046                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000046   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    962            }
    963          }
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   000049   02....       LJMP    ??Subroutine37_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX    A,@DPTR
   \   000004   5407         ANL     A,#0x7
   \   000006   6402         XRL     A,#0x2
   \   000008   22           RET
    964          
    965          /*********************************************************************
    966           * @fn      ZDApp_SaveNetworkStateEvt()
    967           *
    968           * @brief   Process the Save the Network State Event
    969           *
    970           * @param   none
    971           *
    972           * @return  none
    973           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    974          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    975          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    976          #if defined ( NV_RESTORE )
    977           #if defined ( NV_TURN_OFF_RADIO )
    978            // Turn off the radio's receiver during an NV update
    979            uint8 RxOnIdle;
    980            uint8 x = false;
    981            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    982            ZMacSetReq( ZMacRxOnIdle, &x );
    983           #endif
    984          
    985            // Update the Network State in NV
    986            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    987                           NWK_NV_DEVICELIST_ENABLE |
    988                           NWK_NV_BINDING_ENABLE    |
    989                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV     R1,#0xf
   \   000006   12....       LCALL   `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
    990          
    991            // Reset the NV startup option to resume from NV by
    992            // clearing the "New" join option.
    993            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV     R2,#0x2
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    994          
    995           #if defined ( NV_TURN_OFF_RADIO )
    996            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    997           #endif
    998          #endif // NV_RESTORE
    999          }
   \   000010   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   1000          
   1001          #if defined ( NV_RESTORE )
   1002          /*********************************************************************
   1003           * @fn      ZDApp_RestoreNetworkState()
   1004           *
   1005           * @brief   This function will restore the network state of the
   1006           *          device if the network state is stored in NV.
   1007           *
   1008           * @param   none
   1009           *
   1010           * @return
   1011           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1012           *          restored.
   1013           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1014           *          This could mean that zgStartupOption said to not restore, or
   1015           *          it could mean that there was no network state to restore.
   1016           *
   1017           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1018          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
   1019          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1020            uint8 nvStat;
   1021          
   1022            // Initialize NWK NV items
   1023            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
   1024          
   1025            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6039         JZ      ??ZDApp_RestoreNetworkState_0
   1026            {
   1027              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV     A,R1
   \   000013   6023         JZ      ??ZDApp_RestoreNetworkState_1
   1028              {
   1029                // Are we a coordinator
   1030                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   1031                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_100:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000024   7007         JNZ     ??ZDApp_RestoreNetworkState_2
   1032                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   F0           MOVX    @DPTR,A
   1033                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002D   90....       MOV     DPTR,#devStartMode
   \   000030   12....       LCALL   ?Subroutine11 & 0xFFFF
   1034                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1035              }
   \                     ??CrossCallReturnLabel_43:
   \   000033   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000036   8002         SJMP    ??ZDApp_RestoreNetworkState_3
   1036              else
   1037                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000038   7E09         MOV     R6,#0x9
   1038          
   1039              if ( ZG_SECURE_ENABLED )
   1040              {
   1041                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   00003A   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
   1042          
   1043                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1044                {
   1045                  ZDApp_RestoreNwkKey( TRUE );
   1046                }
   1047              }
   1048          
   1049              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1050              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1051              // other than default.
   1052            }
   1053          
   1054            if ( nvStat == ZSUCCESS )
   \   000041   EE           MOV     A,R6
   \   000042   7004         JNZ     ??ZDApp_RestoreNetworkState_0
   1055              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000044   7900         MOV     R1,#0x0
   \   000046   8002         SJMP    ??ZDApp_RestoreNetworkState_4
   1056            else
   1057              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000048   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_4:
   \   00004A   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   1058          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine36_0
   \   000002                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
   1059          #endif // NV_RESTORE
   1060          
   1061          /*********************************************************************
   1062           * @fn      ZDApp_InitUserDesc()
   1063           *
   1064           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1065           *          when needed.  If you want to initialize the User descriptor to
   1066           *          something other than all zero, do it here.
   1067           *
   1068           * @param   none
   1069           *
   1070           * @return  none
   1071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1073          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1074            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1075          
   1076            // Initialize the User Descriptor, the descriptor is read from NV
   1077            // when needed.  If you want to initialize the User descriptor to something
   1078            // other than all zero, do it here.
   1079            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1080            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1081                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   7033         JNZ     ??ZDApp_InitUserDesc_0
   1082            {
   1083              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1084                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV     ?V0,#0x11
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A81         MOV     R2,#-0x7f
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   7010         JNZ     ??ZDApp_InitUserDesc_0
   1085              {
   1086                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6007         JZ      ??ZDApp_InitUserDesc_0
   1087                {
   1088                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   D2E4         SETB    0xE0 /* A   */.4
   \   000069   F0           MOVX    @DPTR,A
   1089                }
   1090              }
   1091            }
   1092          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV     A,#0x11
   \   00006C   02....       LJMP    ??Subroutine38_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1093          
   1094          /*********************************************************************
   1095           * @fn      ZDAppCheckForHoldKey()
   1096           *
   1097           * @brief   Check for key to set the device into Hold Auto Start
   1098           *
   1099           * @param   none
   1100           *
   1101           * @return  none
   1102           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1103          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1104          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1105          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1106          
   1107            // Get Keypad directly to see if a HOLD is needed
   1108            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1109          
   1110            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1111            // while booting to avoid starting up the device.
   1112            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7005         JNZ     ??ZDAppCheckForHoldKey_0
   1113            {
   1114              // Change the device state to HOLD on start up
   1115              devState = DEV_HOLD;
   \   000010   90....       MOV     DPTR,#devState
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1116            }
   1117          #endif // HAL_KEY
   1118          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   1119          
   1120          /*********************************************************************
   1121           * @fn      ZDApp_ProcessOSALMsg()
   1122           *
   1123           * @brief   Process the incoming task message.
   1124           *
   1125           * @param   msgPtr - message to process
   1126           *
   1127           * @return  none
   1128           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1129          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1130          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1131            // Data Confirmation message fields
   1132            uint8 sentEP;       // This should always be 0
   1133            uint8 sentStatus;
   1134            afDataConfirm_t *afDataConfirm;
   1135            uint8 tmp;
   1136          
   1137            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   603B         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   600B         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   600D         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   24D6         ADD     A,#-0x2a
   \   000028   600F         JZ      ??ZDApp_ProcessOSALMsg_5
   \   00002A   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1138            {
   1139              // Incoming ZDO Message
   1140              case AF_INCOMING_MSG_CMD:
   1141                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002D                ; Setup parameters for call to function ZDP_IncomingData
   \   00002D   12....       LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1142                break;
   \   000030   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1143          
   1144              case ZDO_CB_MSG:
   1145                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000033                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000033   12....       LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1146                break;
   \   000036   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1147          
   1148              case AF_DATA_CONFIRM_CMD:
   1149                // This message is received as a confirmation of a data packet sent.
   1150                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1151                // The message fields are defined in AF.h
   1152                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1153                sentEP = afDataConfirm->endpoint;
   1154                sentStatus = afDataConfirm->hdr.status;
   1155          
   1156                // Action taken when confirmation is received.
   1157          #if defined ( ZIGBEE_FREQ_AGILITY )
   1158                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000039   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00003C   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00003F   7003         JNZ     $+5
   \   000041   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1159                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000044                ; Setup parameters for indirect call
   \   000044   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000047   12....       LCALL   ?CALL_IND
   \   00004A   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1160          #endif
   1161                (void)sentEP;
   1162                (void)sentStatus;
   1163                break;
   1164          
   1165              case ZDO_NWK_DISC_CNF:
   1166                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00004D   90....       MOV     DPTR,#devState
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6402         XRL     A,#0x2
   \   000053   6003         JZ      $+5
   \   000055   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1167                  break;
   1168          
   1169                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000058   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6401         XRL     A,#0x1
   \   00005E   6008         JZ      ??ZDApp_ProcessOSALMsg_8
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6402         XRL     A,#0x2
   \   000063   6003         JZ      $+5
   \   000065   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1170                {
   1171                  // Process the network discovery scan results and choose a parent
   1172                  // device to join/rejoin itself
   1173                  networkDesc_t *pChosenNwk;
   1174                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000068                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000068   12....       LCALL   `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
   \   00006B   8A..         MOV     ?V0,R2
   \   00006D   8B..         MOV     ?V1,R3
   \   00006F   EA           MOV     A,R2
   \   000070   45..         ORL     A,?V1
   \   000072   7003         JNZ     $+5
   \   000074   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   \   000077   90....       MOV     DPTR,#zdoDiscCounter
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   C3           CLR     C
   \   00007C   9403         SUBB    A,#0x3
   \   00007E   5003         JNC     $+5
   \   000080   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   1175                  {
   1176                    if ( devStartMode == MODE_JOIN )
   \   000083   EA           MOV     A,R2
   \   000084   2402         ADD     A,#0x2
   \   000086   F8           MOV     R0,A
   \   000087   E4           CLR     A
   \   000088   35..         ADDC    A,?V1
   \   00008A   F9           MOV     R1,A
   \   00008B   E8           MOV     A,R0
   \   00008C   FE           MOV     R6,A
   \   00008D   E9           MOV     A,R1
   \   00008E   FF           MOV     R7,A
   \   00008F   90....       MOV     DPTR,#devStartMode
   \   000092   E0           MOVX    A,@DPTR
   \   000093   706E         JNZ     ??ZDApp_ProcessOSALMsg_10
   1177                    {
   1178                      ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000095                ; Setup parameters for call to function ZDApp_ChangeState
   \   000095   7903         MOV     R1,#0x3
   \   000097   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1179          
   1180                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   00009A                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00009A   85..82       MOV     DPL,?V0
   \   00009D   85..83       MOV     DPH,?V1
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1181          
   1182                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1183                                            pChosenNwk->logicalChannel,
   1184                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1185                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   0000AB                ; Setup parameters for call to function NLME_JoinRequest
   \   0000AB   85..82       MOV     DPL,?V0
   \   0000AE   85..83       MOV     DPH,?V1
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F5..         MOV     ?V2,A
   \   0000BE   78..         MOV     R0,#?V2
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C3   85..82       MOV     DPL,?V0
   \   0000C6   85..83       MOV     DPH,?V1
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000D3   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F5..         MOV     ?V2,A
   \   0000D9   78..         MOV     R0,#?V2
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DE   8E82         MOV     DPL,R6
   \   0000E0   8F83         MOV     DPH,R7
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F9           MOV     R1,A
   \   0000E4   85..82       MOV     DPL,?V0
   \   0000E7   85..83       MOV     DPH,?V1
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   FC           MOV     R4,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   FD           MOV     R5,A
   \   0000EF   E5..         MOV     A,?V0
   \   0000F1   240B         ADD     A,#0xb
   \   0000F3   FA           MOV     R2,A
   \   0000F4   E4           CLR     A
   \   0000F5   35..         ADDC    A,?V1
   \   0000F7   FB           MOV     R3,A
   \   0000F8   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   0000FB   7404         MOV     A,#0x4
   \   0000FD   12....       LCALL   ?DEALLOC_XSTACK8
   \   000100   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1186                      {
   1187                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1188                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1189                      }
   1190                    } // if ( devStartMode == MODE_JOIN )
   1191                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   000103   6403         XRL     A,#0x3
   \   000105   6003         JZ      $+5
   \   000107   02....       LJMP    ??ZDApp_ProcessOSALMsg_12 & 0xFFFF
   1192                    {
   1193                      ZStatus_t rejoinStatus;
   1194          
   1195                      // Transition state machine to correct rejoin state based on previous state before network discovery
   1196                      if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   00010A                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00010A   7900         MOV     R1,#0x0
   \   00010C   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00010F   E9           MOV     A,R1
   \   000110   6401         XRL     A,#0x1
   \   000112   90....       MOV     DPTR,#prevDevState
   \   000115   700D         JNZ     ??ZDApp_ProcessOSALMsg_13
   1197                      {
   1198                        if ( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   000117   E0           MOVX    A,@DPTR
   \   000118   6404         XRL     A,#0x4
   \   00011A   7004         JNZ     ??ZDApp_ProcessOSALMsg_14
   1199                        {
   1200                          ZDApp_ChangeState(DEV_NWK_SEC_REJOIN_ALL_CHANNEL);
   \   00011C                ; Setup parameters for call to function ZDApp_ChangeState
   \   00011C   790D         MOV     R1,#0xd
   \   00011E   800F         SJMP    ??ZDApp_ProcessOSALMsg_15
   1201                        }
   1202                        else
   1203                        {
   1204                          ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   000120                ; Setup parameters for call to function ZDApp_ChangeState
   \   000120   7904         MOV     R1,#0x4
   \   000122   800B         SJMP    ??ZDApp_ProcessOSALMsg_15
   1205                        }
   1206                      }
   1207                      else
   1208                      {
   1209                        if( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   000124   E0           MOVX    A,@DPTR
   \   000125   640D         XRL     A,#0xd
   \   000127   7004         JNZ     ??ZDApp_ProcessOSALMsg_16
   1210                        {
   1211                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \   000129                ; Setup parameters for call to function ZDApp_ChangeState
   \   000129   790E         MOV     R1,#0xe
   \   00012B   8002         SJMP    ??ZDApp_ProcessOSALMsg_15
   1212                        }
   1213                        else
   1214                        {
   1215                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_ALL_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   00012D                ; Setup parameters for call to function ZDApp_ChangeState
   \   00012D   790F         MOV     R1,#0xf
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   00012F   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1216                        }
   1217                      }
   1218          
   1219                      // Before trying to do rejoin, check if the device has a valid short address
   1220                      // If not, generate a random short address for itself
   1221                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000132   90....       MOV     DPTR,#_NIB + 20
   \   000135   E0           MOVX    A,@DPTR
   \   000136   64FE         XRL     A,#0xfe
   \   000138   7003         JNZ     ??ZDApp_ProcessOSALMsg_17
   \   00013A   A3           INC     DPTR
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   00013D   7065         JNZ     ??ZDApp_ProcessOSALMsg_18
   1222                      {
   1223                        uint16 commNwkAddr;
   1224          
   1225                        // Verify if the Network address has been commissioned by external tool
   1226                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1227                                           sizeof(commNwkAddr),
   1228                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1229                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   00013F                ; Setup parameters for call to function osal_nv_read
   \   00013F   7401         MOV     A,#0x1
   \   000141   12....       LCALL   ?XSTACK_DISP100_8
   \   000144   88..         MOV     ?V2,R0
   \   000146   89..         MOV     ?V3,R1
   \   000148   78..         MOV     R0,#?V2
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014D   75..02       MOV     ?V2,#0x2
   \   000150   75..00       MOV     ?V3,#0x0
   \   000153   78..         MOV     R0,#?V2
   \   000155   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000158   7C00         MOV     R4,#0x0
   \   00015A   7D00         MOV     R5,#0x0
   \   00015C   7A49         MOV     R2,#0x49
   \   00015E   7B00         MOV     R3,#0x0
   \   000160   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000163   7404         MOV     A,#0x4
   \   000165   12....       LCALL   ?DEALLOC_XSTACK8
   \   000168   E9           MOV     A,R1
   \   000169   7025         JNZ     ??ZDApp_ProcessOSALMsg_19
   \   00016B   7401         MOV     A,#0x1
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   E0           MOVX    A,@DPTR
   \   000171   64FE         XRL     A,#0xfe
   \   000173   7003         JNZ     ??ZDApp_ProcessOSALMsg_20
   \   000175   A3           INC     DPTR
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   000178   6016         JZ      ??ZDApp_ProcessOSALMsg_19
   1230                        {
   1231                          _NIB.nwkDevAddress = commNwkAddr;
   \   00017A   7401         MOV     A,#0x1
   \   00017C   12....       LCALL   ?XSTACK_DISP0_8
   \   00017F   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000182   90....       MOV     DPTR,#_NIB + 20
   \   000185   12....       LCALL   ?Subroutine16 & 0xFFFF
   1232          
   1233                          // clear Allocate address bit because device has a commissioned address
   1234                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \                     ??CrossCallReturnLabel_3:
   \   000188   90....       MOV     DPTR,#_NIB + 14
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   C2E7         CLR     0xE0 /* A   */.7
   \   00018E   800A         SJMP    ??ZDApp_ProcessOSALMsg_21
   1235                        }
   1236                        else
   1237                        {
   1238                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   000190                ; Setup parameters for call to function osal_rand
   \   000190   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000193   90....       MOV     DPTR,#_NIB + 20
   \   000196   EA           MOV     A,R2
   \   000197   F0           MOVX    @DPTR,A
   \   000198   A3           INC     DPTR
   \   000199   EB           MOV     A,R3
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   00019A   F0           MOVX    @DPTR,A
   1239                        }
   1240          
   1241                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   00019B                ; Setup parameters for call to function ZMacSetReq
   \   00019B   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   00019D   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   00019F   7953         MOV     R1,#0x53
   \   0001A1   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1242                      }
   1243          
   1244                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1245                      if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   0001A4   90....       MOV     DPTR,#_NIB + 33
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F4           CPL     A
   \   0001A9   7003         JNZ     ??ZDApp_ProcessOSALMsg_22
   \   0001AB   A3           INC     DPTR
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   0001AE   7018         JNZ     ??ZDApp_ProcessOSALMsg_23
   1246                      {
   1247                        _NIB.nwkPanId = pChosenNwk->panId;
   \   0001B0   85..82       MOV     DPL,?V0
   \   0001B3   85..83       MOV     DPH,?V1
   \   0001B6   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0001B9   90....       MOV     DPTR,#_NIB + 33
   \   0001BC   12....       LCALL   ?Subroutine16 & 0xFFFF
   1248                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \                     ??CrossCallReturnLabel_4:
   \   0001BF                ; Setup parameters for call to function ZMacSetReq
   \   0001BF   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   0001C1   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   0001C3   7950         MOV     R1,#0x50
   \   0001C5   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1249                      }
   1250          
   1251                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   0001C8   85..82       MOV     DPL,?XSP + 0
   \   0001CB   85..83       MOV     DPH,?XSP + 1
   \   0001CE   12....       LCALL   ?Subroutine12 & 0xFFFF
   1252                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \                     ??CrossCallReturnLabel_79:
   \   0001D1   7952         MOV     R1,#0x52
   \   0001D3   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1253          
   1254                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1255                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \   0001D6                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0001D6   7901         MOV     R1,#0x1
   \   0001D8   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0001DB   E9           MOV     A,R1
   \   0001DC   6401         XRL     A,#0x1
   \   0001DE   8E82         MOV     DPL,R6
   \   0001E0   8F83         MOV     DPH,R7
   \   0001E2   700B         JNZ     ??ZDApp_ProcessOSALMsg_24
   1256                      {
   1257                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \   0001E4                ; Setup parameters for call to function NLME_ReJoinRequest
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   F9           MOV     R1,A
   \   0001E6   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001E8   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001EA   12....       LCALL   `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   0001ED   8009         SJMP    ??ZDApp_ProcessOSALMsg_11
   1258                      }
   1259                      else
   1260                      {
   1261                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   0001EF                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   F9           MOV     R1,A
   \   0001F1   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001F3   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001F5   12....       LCALL   `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001F8   E9           MOV     A,R1
   1262                      }
   1263          
   1264                      if ( rejoinStatus != ZSuccess )
   \   0001F9   6009         JZ      ??ZDApp_ProcessOSALMsg_12
   1265                      {
   1266                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1267                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001FB                ; Setup parameters for call to function osal_rand
   \   0001FB   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001FE                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001FE   12....       LCALL   ?Subroutine29 & 0xFFFF
   1268                      }
   1269                    } // else if ( devStartMode == MODE_REJOIN )
   \                     ??CrossCallReturnLabel_27:
   \   000201   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1270          
   1271                    // The receiver is on, turn network layer polling off.
   1272                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000204   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000207   E0           MOVX    A,@DPTR
   \   000208   A2E3         MOV     C,0xE0 /* A   */.3
   \   00020A   5034         JNC     ??ZDApp_ProcessOSALMsg_25
   1273                    {
   1274                      // for an End Device with NO Child Table Management process or for a Router
   1275                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1276                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   00020C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   6015         JZ      ??ZDApp_ProcessOSALMsg_26
   \   000212   6401         XRL     A,#0x1
   \   000214   6011         JZ      ??ZDApp_ProcessOSALMsg_26
   \   000216   E0           MOVX    A,@DPTR
   \   000217   6402         XRL     A,#0x2
   \   000219   6003         JZ      $+5
   \   00021B   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   00021E   90....       MOV     DPTR,#zgChildAgingEnable
   \   000221   E0           MOVX    A,@DPTR
   \   000222   6003         JZ      $+5
   \   000224   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1277                      {
   1278                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_26:
   \   000227                ; Setup parameters for call to function NLME_SetPollRate
   \   000227   90....       MOV     DPTR,#__Constant_0
   \   00022A   12....       LCALL   ?XLOAD_R2345
   \   00022D   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1279                        NLME_SetQueuedPollRate( 0 );
   \   000230                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000230   7A00         MOV     R2,#0x0
   \   000232   7B00         MOV     R3,#0x0
   \   000234   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1280                        NLME_SetResponseRate( 0 );
   \   000237                ; Setup parameters for call to function NLME_SetResponseRate
   \   000237   7A00         MOV     R2,#0x0
   \   000239   7B00         MOV     R3,#0x0
   \   00023B   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   00023E   807C         SJMP    ??ZDApp_ProcessOSALMsg_7
   1281                      }
   1282                    }
   1283                    else
   1284                    {
   1285                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??ZDApp_ProcessOSALMsg_25:
   \   000240   90....       MOV     DPTR,#devStartMode
   \   000243   E0           MOVX    A,@DPTR
   \   000244   7076         JNZ     ??ZDApp_ProcessOSALMsg_7
   1286                      {
   1287                        ZDApp_SavedPollRate = zgPollRate;
   \   000246   90....       MOV     DPTR,#zgPollRate
   \   000249   12....       LCALL   ?XLOAD_R0123
   \   00024C   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00024F   12....       LCALL   ?XSTORE_R0123
   1288                        NLME_SetPollRate( zgRejoinPollRate );
   \   000252                ; Setup parameters for call to function NLME_SetPollRate
   \   000252   90....       MOV     DPTR,#zgRejoinPollRate
   \   000255   E0           MOVX    A,@DPTR
   \   000256   F5..         MOV     ?V0,A
   \   000258   A3           INC     DPTR
   \   000259   E0           MOVX    A,@DPTR
   \   00025A   AA..         MOV     R2,?V0
   \   00025C   FB           MOV     R3,A
   \   00025D   E4           CLR     A
   \   00025E   FC           MOV     R4,A
   \   00025F   FD           MOV     R5,A
   \   000260   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000263   8057         SJMP    ??ZDApp_ProcessOSALMsg_7
   1289                      }
   1290                    }
   1291                  }
   1292                  else
   1293                  {
   1294                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000265   90....       MOV     DPTR,#continueJoining
   \   000268   E0           MOVX    A,@DPTR
   \   000269   6051         JZ      ??ZDApp_ProcessOSALMsg_7
   1295                    {
   1296          #if defined ( MANAGED_SCAN )
   1297                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1298          #else
   1299                      zdoDiscCounter++;
   \   00026B   90....       MOV     DPTR,#zdoDiscCounter
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   04           INC     A
   \   000270   F0           MOVX    @DPTR,A
   1300                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1301                                                  + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000271                ; Setup parameters for call to function osal_rand
   \   000271   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000274                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000274   EA           MOV     A,R2
   \   000275   2464         ADD     A,#0x64
   \   000277   FA           MOV     R2,A
   \   000278   E4           CLR     A
   \   000279   3400         ADDC    A,#0x0
   \   00027B   FB           MOV     R3,A
   \   00027C   8036         SJMP    ??ZDApp_ProcessOSALMsg_27
   1302          #endif
   1303                    }
   1304                  }
   1305                }
   1306                break;
   1307          
   1308              case ZDO_NWK_JOIN_IND:
   1309                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   00027E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000281   E0           MOVX    A,@DPTR
   \   000282   6401         XRL     A,#0x1
   \   000284   6005         JZ      ??ZDApp_ProcessOSALMsg_28
   \   000286   E0           MOVX    A,@DPTR
   \   000287   6402         XRL     A,#0x2
   \   000289   7031         JNZ     ??ZDApp_ProcessOSALMsg_7
   1310                {
   1311                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_28:
   \   00028B                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00028B   12....       LCALL   `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   00028E   802C         SJMP    ??ZDApp_ProcessOSALMsg_7
   1312                }
   1313                break;
   1314          
   1315              case ZDO_NWK_JOIN_REQ:
   1316                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000290   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000293   E0           MOVX    A,@DPTR
   \   000294   6401         XRL     A,#0x1
   \   000296   6005         JZ      ??ZDApp_ProcessOSALMsg_29
   \   000298   E0           MOVX    A,@DPTR
   \   000299   6402         XRL     A,#0x2
   \   00029B   701F         JNZ     ??ZDApp_ProcessOSALMsg_7
   1317                {
   1318                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_29:
   \   00029D   90....       MOV     DPTR,#retryCnt
   \   0002A0   E4           CLR     A
   \   0002A1   12....       LCALL   ?Subroutine15 & 0xFFFF
   1319                  devStartMode = MODE_RESUME;
   1320                  _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_0:
   \   0002A4   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   1321                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_45:
   \   0002A7   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1322                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   0002AA   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   0002AD   7402         MOV     A,#0x2
   \   0002AF   F0           MOVX    @DPTR,A
   1323                  ZDApp_NetworkInit( 0 );
   \   0002B0                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0002B0   7A00         MOV     R2,#0x0
   \   0002B2   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_27:
   \   0002B4   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   0002B7   8003         SJMP    ??ZDApp_ProcessOSALMsg_7
   1324                }
   1325                break;
   1326          
   1327              default:
   1328                if ( ZG_SECURE_ENABLED )
   1329                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   0002B9                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   0002B9   12....       LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1330                break;
   1331            }
   1332          
   1333          }
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   0002BC   7403         MOV     A,#0x3
   \   0002BE   02....       LJMP    ??Subroutine50_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EA           MOV     A,R2
   \   000001   547F         ANL     A,#0x7f
   \   000003   2464         ADD     A,#0x64
   \   000005   FA           MOV     R2,A
   \   000006   7B00         MOV     R3,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#devStartMode
   \   000004   04           INC     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   90....       MOV     DPTR,#_tmpRejoinState
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for call to function NLME_LeaveRsp
   \   000001   AA..         MOV     R2,?XSP + 0
   \   000003   AB..         MOV     R3,?XSP + 1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1334          
   1335          /*********************************************************************
   1336           * @fn      ZDApp_ProcessMsgCBs()
   1337           *
   1338           * @brief   Process response messages
   1339           *
   1340           * @param   none
   1341           *
   1342           * @return  none
   1343           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1344          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1345          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1346            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F5..         MOV     ?V1,A
   \   000017   85..82       MOV     DPL,?V0
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   78..         MOV     R0,#?V2
   \   000025   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000028   0200         DW        2
   \   00002A   2100         DW        33
   \   00002C   2200         DW        34
   \   00002E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000030   0080         DW        32768
   \   000032   0180         DW        32769
   \   000034   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000036   0000         DW        0
   \   000038   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1347            {
   1348          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1349              case NWK_addr_rsp:
   1350              case IEEE_addr_rsp:
   1351                {
   1352                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1353          
   1354                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00003A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00003A   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00003D   8A..         MOV     ?V2,R2
   \   00003F   8B..         MOV     ?V3,R3
   1355                  if ( pAddrRsp )
   \   000041   EA           MOV     A,R2
   \   000042   45..         ORL     A,?V3
   \   000044   604B         JZ      ??ZDApp_ProcessMsgCBs_2
   1356                  {
   1357                    if ( pAddrRsp->status == ZSuccess )
   \   000046   EA           MOV     A,R2
   \   000047   2403         ADD     A,#0x3
   \   000049   FE           MOV     R6,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V3
   \   00004D   FF           MOV     R7,A
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   700B         JNZ     ??ZDApp_ProcessMsgCBs_3
   1358                    {
   1359                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000055                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000055   EE           MOV     A,R6
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   FD           MOV     R5,A
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1360                    }
   \                     ??CrossCallReturnLabel_57:
   \   00005D   12....       LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1361          
   1362          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1363                    // look for pending bind entry for NWK_addr_rsp Only
   1364                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   000060   85..82       MOV     DPL,?V0
   \   000063   85..83       MOV     DPH,?V1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   7004         JNZ     ??ZDApp_ProcessMsgCBs_4
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00006D   7007         JNZ     ??ZDApp_ProcessMsgCBs_5
   1365                    {
   1366          #if defined ( REFLECTOR )
   1367                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   00006F                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   00006F   EE           MOV     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   EF           MOV     A,R7
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1368          #endif
   1369                    }
   1370          #endif
   1371          
   1372                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000076                ; Setup parameters for call to function osal_mem_free
   \   000076   AA..         MOV     R2,?V2
   \   000078   AB..         MOV     R3,?V3
   \   00007A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00007D   8012         SJMP    ??ZDApp_ProcessMsgCBs_2
   1373                  }
   1374                }
   1375                break;
   1376          #endif
   1377          
   1378          #if defined ( REFLECTOR )
   1379              case Bind_req:
   1380              case Unbind_req:
   1381                {
   1382                  ZDO_BindUnbindReq_t bindReq;
   1383                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00007F                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00007F   AC..         MOV     R4,?XSP + 0
   \   000081   AD..         MOV     R5,?XSP + 1
   \   000083   12....       LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1384                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000086                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000086   AC..         MOV     R4,?XSP + 0
   \   000088   AD..         MOV     R5,?XSP + 1
   \   00008A   EE           MOV     A,R6
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   FB           MOV     R3,A
   \   00008E   12....       LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1385                }
   1386                break;
   1387          #endif
   1388          
   1389          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1390              case Bind_rsp:
   1391              case Unbind_rsp:
   1392                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1393                {
   1394                  ZDMatchSendState(
   1395                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1396                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1397                }
   1398                break;
   1399          
   1400              case End_Device_Bind_req:
   1401                if (ZG_DEVICE_COORDINATOR_TYPE)
   1402                {
   1403                  ZDEndDeviceBind_t bindReq;
   1404                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1405                  ZDO_MatchEndDeviceBind( &bindReq );
   1406          
   1407                  // Freeing the cluster lists - if allocated.
   1408                  if ( bindReq.numInClusters )
   1409                    osal_mem_free( bindReq.inClusters );
   1410                  if ( bindReq.numOutClusters )
   1411                    osal_mem_free( bindReq.outClusters );
   1412                }
   1413                break;
   1414          #endif
   1415            }
   1416          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000091   7415         MOV     A,#0x15
   \   000093   02....       LJMP    ?Subroutine1 & 0xFFFF
   1417          
   1418          /*********************************************************************
   1419           * @fn      ZDApp_RegisterCBs()
   1420           *
   1421           * @brief   Process response messages
   1422           *
   1423           * @param   none
   1424           *
   1425           * @return  none
   1426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1427          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1428          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1429          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1430            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1431          #endif
   1432          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1433            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1434          #endif
   1435          #if ZG_BUILD_COORDINATOR_TYPE
   1436            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1437            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1438            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1439          #endif
   1440          #if defined ( REFLECTOR )
   1441            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1442            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1443          #endif
   1444          }
   \   000034   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   1445          
   1446          /*********************************************************************
   1447           * @fn      ZDApp_ProcessSecMsg()
   1448           *
   1449           * @brief   Process the incoming security message.
   1450           *
   1451           * @param   msgPtr - message to process
   1452           *
   1453           * @return  none
   1454           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1455          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1456          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1457            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FC         ADD     A,#-0x4
   \   00000B   600A         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FE         ADD     A,#-0x2
   \   00000F   6018         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   24FE         ADD     A,#-0x2
   \   000013   6021         JZ      ??ZDApp_ProcessSecMsg_2
   \   000015   802F         SJMP    ??ZDApp_ProcessSecMsg_3
   1458            {
   1459              case ZDO_TRANSPORT_KEY_IND:
   1460                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000017   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6401         XRL     A,#0x1
   \   00001D   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   7022         JNZ     ??ZDApp_ProcessSecMsg_3
   1461                {
   1462                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000024                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000024   12....       LCALL   `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000027   801D         SJMP    ??ZDApp_ProcessSecMsg_3
   1463                }
   1464                break;
   1465          
   1466              case ZDO_UPDATE_DEVICE_IND:
   1467                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1468                {
   1469                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1470                }
   1471                break;
   1472          
   1473              case ZDO_REMOVE_DEVICE_IND:
   1474                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000029   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6401         XRL     A,#0x1
   \   00002F   7015         JNZ     ??ZDApp_ProcessSecMsg_3
   1475                {
   1476                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   \   000031                ; Setup parameters for call to function ZDSecMgrRemoveDeviceInd
   \   000031   12....       LCALL   `??ZDSecMgrRemoveDeviceInd::?relay`; Banked call to: ZDSecMgrRemoveDeviceInd
   \   000034   8010         SJMP    ??ZDApp_ProcessSecMsg_3
   1477                }
   1478                break;
   1479          
   1480              case ZDO_REQUEST_KEY_IND:
   1481                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1482                {
   1483                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1484                  {
   1485                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1486                  }
   1487                }
   1488                break;
   1489          
   1490              case ZDO_SWITCH_KEY_IND:
   1491                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000036   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6401         XRL     A,#0x1
   \   00003C   6005         JZ      ??ZDApp_ProcessSecMsg_5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6402         XRL     A,#0x2
   \   000041   7003         JNZ     ??ZDApp_ProcessSecMsg_3
   1492                {
   1493                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000043                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000043   12....       LCALL   `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1494                }
   1495                break;
   1496          
   1497              default:
   1498                // Unsupported messages
   1499                break;
   1500            }
   1501          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000046   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   1502          
   1503          /*********************************************************************
   1504           * @fn      ZDApp_ProcessNetworkJoin()
   1505           *
   1506           * @brief
   1507           *
   1508           *   Save off the Network key information.
   1509           *
   1510           * @param   none
   1511           *
   1512           * @return  none
   1513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1514          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1516            if ( (devState == DEV_NWK_JOINING) ||
   1517                ((devState == DEV_NWK_ORPHAN)  &&
   1518                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1519            {
   1520              // Result of a Join attempt by this device.
   1521              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   704D         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1522              {
   1523                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1524          
   1525          #if defined ( POWER_SAVING )
   1526                osal_pwrmgr_device( PWRMGR_BATTERY );
   1527          #endif
   1528          
   1529                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   000039                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000039   7901         MOV     R1,#0x1
   \   00003B   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00003E   E9           MOV     A,R1
   \   00003F   7003         JNZ     $+5
   \   000041   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1530                {
   1531                  // wait for auth from trust center
   1532                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   1533          
   1534                  // Start the reset timer for MAX UNAUTH time
   1535                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1536                }
   1537                else
   1538                {
   1539                  if ( ZSTACK_ROUTER_BUILD )
   1540                  {
   1541                    if ( devState == DEV_NWK_ORPHAN
   1542                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000044   90....       MOV     DPTR,#devState
   \   000047   E0           MOVX    A,@DPTR
   \   000048   640A         XRL     A,#0xa
   \   00004A   700D         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   00004C   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00004F   6010         JZ      ??ZDApp_ProcessNetworkJoin_6
   1543                    {
   1544                      // Change NIB state to router for restore
   1545                      _NIB.nwkState = NWK_ROUTER;
   \   000051   90....       MOV     DPTR,#_NIB + 35
   \   000054   7408         MOV     A,#0x8
   \   000056   F0           MOVX    @DPTR,A
   \   000057   8008         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1546                    }
   1547                  }
   1548          
   1549                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6403         XRL     A,#0x3
   \   00005C   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1550                  {
   1551                    ZDApp_AnnounceNewAddress();
   \   00005E                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00005E   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1552                  }
   1553          
   1554                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   000061                ; Setup parameters for call to function ZDApp_ChangeState
   \   000061   7906         MOV     R1,#0x6
   \   000063   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1555          
   1556                  if ( ZSTACK_ROUTER_BUILD )
   1557                  {
   1558                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1559                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000066   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000069   7003         JNZ     $+5
   \   00006B   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1560                    {
   1561                      NLME_StartRouterRequest( 0, 0, false );
   \   00006E                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   7A00         MOV     R2,#0x0
   \   000072   7900         MOV     R1,#0x0
   \   000074   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000077   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1562                    }
   1563                  }
   1564                }
   1565              }
   1566              else
   1567              {
   1568                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00007A   90....       MOV     DPTR,#devStartMode
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6401         XRL     A,#0x1
   \   000080   7026         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000082   90....       MOV     DPTR,#retryCnt
   \   000085   E0           MOVX    A,@DPTR
   \   000086   04           INC     A
   \   000087   F0           MOVX    @DPTR,A
   \   000088   C3           CLR     C
   \   000089   9403         SUBB    A,#0x3
   \   00008B   401B         JC      ??ZDApp_ProcessNetworkJoin_8
   1569                {
   1570                  if ( _NIB.nwkPanId == 0xFFFF )
   \   00008D   90....       MOV     DPTR,#_NIB + 33
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F4           CPL     A
   \   000092   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000097   90....       MOV     DPTR,#devStartMode
   \   00009A   7003         JNZ     ??ZDApp_ProcessNetworkJoin_10
   1571                    devStartMode = MODE_JOIN;
   \   00009C   E4           CLR     A
   \   00009D   8008         SJMP    ??ZDApp_ProcessNetworkJoin_11
   1572                  else
   1573                  {
   1574                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   00009F   7403         MOV     A,#0x3
   \   0000A1   F0           MOVX    @DPTR,A
   1575                    _tmpRejoinState = true;
   \   0000A2   90....       MOV     DPTR,#_tmpRejoinState
   \   0000A5   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000A7   F0           MOVX    @DPTR,A
   1576                  }
   1577                }
   1578          
   1579                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1580                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0000A8                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000A8   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000AB   8A..         MOV     ?V0,R2
   \   0000AD   8B..         MOV     ?V1,R3
   \   0000AF   74FE         MOV     A,#-0x2
   \   0000B1   65..         XRL     A,?V0
   \   0000B3   7004         JNZ     ??ZDApp_ProcessNetworkJoin_12
   \   0000B5   74FF         MOV     A,#-0x1
   \   0000B7   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000B9   700D         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000BB   90....       MOV     DPTR,#_NIB + 20
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   64FE         XRL     A,#0xfe
   \   0000C1   7003         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000C6   601B         JZ      ??ZDApp_ProcessNetworkJoin_15
   1581                {
   1582                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000C8   85..82       MOV     DPL,?XSP + 0
   \   0000CB   85..83       MOV     DPH,?XSP + 1
   \   0000CE   74FE         MOV     A,#-0x2
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   04           INC     A
   \   0000D3   F0           MOVX    @DPTR,A
   1583                  // Invalidate nwk addr so end device does not use in its data reqs.
   1584                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000D4   90....       MOV     DPTR,#_NIB + 20
   \   0000D7   14           DEC     A
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   04           INC     A
   \   0000DB   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   1585                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   1586                }
   \                     ??CrossCallReturnLabel_81:
   \   0000DE   7953         MOV     R1,#0x53
   \   0000E0   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1587          
   1588                // Clear the neighbor Table and network discovery tables.
   1589                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000E3                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000E3   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1590                NLME_NwkDiscTerm();
   \   0000E6                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000E6   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1591          
   1592                zdoDiscCounter = 1;
   \   0000E9   90....       MOV     DPTR,#zdoDiscCounter
   \   0000EC   7401         MOV     A,#0x1
   \   0000EE   F0           MOVX    @DPTR,A
   1593          
   1594                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1595                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000EF                ; Setup parameters for call to function osal_rand
   \   0000EF   02....       LJMP    ??ZDApp_ProcessNetworkJoin_16 & 0xFFFF
   1596              }
   1597            }
   1598            else if ( devState == DEV_NWK_ORPHAN ||
   1599                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1600                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1601                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1602                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   6404         XRL     A,#0x4
   \   0000F5   6012         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   640E         XRL     A,#0xe
   \   0000FA   600D         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   640F         XRL     A,#0xf
   \   0000FF   6008         JZ      ??ZDApp_ProcessNetworkJoin_2
   \   000101   E0           MOVX    A,@DPTR
   \   000102   640D         XRL     A,#0xd
   \   000104   6003         JZ      $+5
   \   000106   02....       LJMP    ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
   1603            {
   1604              // results of an orphaning attempt by this device
   1605              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000109   90....       MOV     DPTR,#nwkStatus
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   707E         JNZ     ??ZDApp_ProcessNetworkJoin_18
   1606              {
   1607                //When the device has successfully rejoined then reset retryCnt
   1608                retryCnt = 0;
   \   00010F   90....       MOV     DPTR,#retryCnt
   \   000112   E4           CLR     A
   \   000113   F0           MOVX    @DPTR,A
   1609          
   1610                // Verify NWK key is available before sending Device_annce
   1611                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   000114                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000114   7901         MOV     R1,#0x1
   \   000116   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000119   E9           MOV     A,R1
   \   00011A   700F         JNZ     ??ZDApp_ProcessNetworkJoin_19
   1612                {
   1613                  // wait for auth from trust center
   1614                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00011C                ; Setup parameters for call to function ZDApp_ChangeState
   \   00011C   7905         MOV     R1,#0x5
   \   00011E   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1615          
   1616                  // Start the reset timer for MAX UNAUTH time
   1617                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000121                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000121   7A10         MOV     R2,#0x10
   \   000123   7B27         MOV     R3,#0x27
   \   000125   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   000128   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1618                }
   1619                else
   1620                {
   1621                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   00012B                ; Setup parameters for call to function ZDApp_ChangeState
   \   00012B   7906         MOV     R1,#0x6
   \   00012D   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1622          
   1623                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   000130                ; Setup parameters for call to function osal_stop_timerEx
   \   000130   7A00         MOV     R2,#0x0
   \   000132   7B20         MOV     R3,#0x20
   \   000134   90....       MOV     DPTR,#ZDAppTaskID
   \   000137   E0           MOVX    A,@DPTR
   \   000138   F9           MOV     R1,A
   \   000139   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1624          
   1625                  // setup Power Manager Device
   1626          #if defined ( POWER_SAVING )
   1627                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1628          #endif
   1629          
   1630                  // The receiver is on, turn network layer polling off.
   1631                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   00013C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   A2E3         MOV     C,0xE0 /* A   */.3
   \   000142   501D         JNC     ??ZDApp_ProcessNetworkJoin_20
   1632                  {
   1633                    // if Child Table Management process is not enabled
   1634                    if ( zgChildAgingEnable == FALSE )
   \   000144   90....       MOV     DPTR,#zgChildAgingEnable
   \   000147   E0           MOVX    A,@DPTR
   \   000148   7017         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1635                    {
   1636                      NLME_SetPollRate( 0 );
   \   00014A                ; Setup parameters for call to function NLME_SetPollRate
   \   00014A   90....       MOV     DPTR,#__Constant_0
   \   00014D   12....       LCALL   ?XLOAD_R2345
   \   000150   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1637                      NLME_SetQueuedPollRate( 0 );
   \   000153                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000153   7A00         MOV     R2,#0x0
   \   000155   7B00         MOV     R3,#0x0
   \   000157   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1638                      NLME_SetResponseRate( 0 );
   \   00015A                ; Setup parameters for call to function NLME_SetResponseRate
   \   00015A   7A00         MOV     R2,#0x0
   \   00015C   7B00         MOV     R3,#0x0
   \   00015E   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1639                    }
   1640                  }
   1641          
   1642                  if ( ZSTACK_ROUTER_BUILD )
   1643                  {
   1644                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1645                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000161   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000164   6009         JZ      ??ZDApp_ProcessNetworkJoin_21
   1646                    {
   1647                      NLME_StartRouterRequest( 0, 0, false );
   \   000166                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000166   7B00         MOV     R3,#0x0
   \   000168   7A00         MOV     R2,#0x0
   \   00016A   7900         MOV     R1,#0x0
   \   00016C   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   1648                    }
   1649                  }
   1650          
   1651                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   00016F                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00016F   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1652          
   1653                  if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1654                      || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1655                        && (zgChildAgingEnable == TRUE) ) )
   \   000172   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000175   E0           MOVX    A,@DPTR
   \   000176   A2E3         MOV     C,0xE0 /* A   */.3
   \   000178   5008         JNC     ??ZDApp_ProcessNetworkJoin_22
   \   00017A   90....       MOV     DPTR,#zgChildAgingEnable
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   6401         XRL     A,#0x1
   \   000180   706D         JNZ     ??ZDApp_ProcessNetworkJoin_7
   1656                  {
   1657                    NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000182                ; Setup parameters for call to function NLME_SetPollRate
   \   000182   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000185   12....       LCALL   ?XLOAD_R2345
   \   000188   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   00018B   8062         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1658                  }
   1659                }
   1660              }
   1661              else
   1662              {
   1663                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00018D   90....       MOV     DPTR,#devStartMode
   \   000190   E0           MOVX    A,@DPTR
   \   000191   6401         XRL     A,#0x1
   \   000193   7037         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1664                {
   1665                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000195   90....       MOV     DPTR,#retryCnt
   \   000198   E0           MOVX    A,@DPTR
   \   000199   04           INC     A
   \   00019A   F0           MOVX    @DPTR,A
   \   00019B   C3           CLR     C
   \   00019C   9404         SUBB    A,#0x4
   \   00019E   501F         JNC     ??ZDApp_ProcessNetworkJoin_24
   1666                  {
   1667                    if ( _NIB.nwkPanId == 0xFFFF )
   \   0001A0   90....       MOV     DPTR,#_NIB + 33
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   F4           CPL     A
   \   0001A5   7003         JNZ     ??ZDApp_ProcessNetworkJoin_25
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   0001AA   601B         JZ      ??ZDApp_ProcessNetworkJoin_26
   1668                      devStartMode = MODE_JOIN;
   1669                    else
   1670                    {
   1671                      devStartMode = MODE_REJOIN;
   \   0001AC   90....       MOV     DPTR,#devStartMode
   \   0001AF   7403         MOV     A,#0x3
   \   0001B1   F0           MOVX    @DPTR,A
   1672                      _tmpRejoinState = true;
   \   0001B2   90....       MOV     DPTR,#_tmpRejoinState
   \   0001B5   7401         MOV     A,#0x1
   \   0001B7   F0           MOVX    @DPTR,A
   1673                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   0001B8   90....       MOV     DPTR,#prevDevState
   \   0001BB   7404         MOV     A,#0x4
   \   0001BD   800C         SJMP    ??ZDApp_ProcessNetworkJoin_27
   1674                    }
   1675                  }
   1676                  // Do a normal join to the network after certain times of rejoin retries
   1677                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   0001BF   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   6401         XRL     A,#0x1
   \   0001C5   7005         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1678                  {
   1679                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   0001C7   90....       MOV     DPTR,#devStartMode
   \   0001CA   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   0001CB   F0           MOVX    @DPTR,A
   1680                  }
   1681                }
   1682                else if(devStartMode == MODE_REJOIN)
   1683                {
   1684                  if ( ZSTACK_END_DEVICE_BUILD )
   1685                  {
   1686                    devStartMode = MODE_REJOIN;
   1687                    _tmpRejoinState = true;
   1688                    _NIB.nwkState = NWK_INIT;
   1689          
   1690                    if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   1691                    {
   1692                      runtimeChannel = MAX_CHANNELS_24GHZ;
   1693                      prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
   1694                    }
   1695                    else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
   1696                    {
   1697                      // Set the flag that will ask the device to do trust center network layer rejoin.
   1698                      _NIB.nwkKeyLoaded = FALSE;
   1699                      ZDApp_ResetNwkKey(); // Clear up the old network key.
   1700                      runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   1701                      prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
   1702                    }
   1703                    else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
   1704                    {
   1705                      runtimeChannel = MAX_CHANNELS_24GHZ;
   1706                      prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
   1707                    }
   1708          
   1709                  }
   1710                }
   1711          
   1712                // Clear the neighbor Table and network discovery tables.
   1713                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   0001CC                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001CC   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1714                NLME_NwkDiscTerm();
   \   0001CF                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001CF   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1715          
   1716                // setup a retry for later...
   1717                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1718                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   0001D2                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0001D2   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001D5                ; Setup parameters for call to function ZDApp_NetworkInit
   1719              }
   1720            }
   \   0001D5   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001D8   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   0001DB   8012         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1721          #if defined ( ZIGBEEPRO )
   1722            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   600F         JZ      ??ZDApp_ProcessNetworkJoin_7
   1723            {
   1724              // Assume from address conflict
   1725          
   1726              // Notify the network
   1727              ZDApp_AnnounceNewAddress();
   \   0001E0                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001E0   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1728          
   1729              // Notify apps
   1730              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001E3                ; Setup parameters for call to function osal_set_event
   \   0001E3   7A10         MOV     R2,#0x10
   \   0001E5   7B00         MOV     R3,#0x0
   \   0001E7   90....       MOV     DPTR,#ZDAppTaskID
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   F9           MOV     R1,A
   \   0001EC   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1731            }
   1732          #endif
   1733          }
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   0001EF                REQUIRE ?Subroutine8
   \   0001EF                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1734          
   1735          /*********************************************************************
   1736           * @fn      ZDApp_SaveNwkKey()
   1737           *
   1738           * @brief   Save off the Network key information.
   1739           *
   1740           * @param   none
   1741           *
   1742           * @return  none
   1743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1744          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1745          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1746            nwkActiveKeyItems keyItems;
   1747          
   1748            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1749          
   1750            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1751                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1752          
   1753            nwkFrameCounterChanges = 0;
   \   000039   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
   1754          
   1755            // Clear copy in RAM before return.
   1756            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C15         MOV     R4,#0x15
   \   000042   FD           MOV     R5,A
   \   000043   F9           MOV     R1,A
   \   000044   AA..         MOV     R2,?XSP + 0
   \   000046   AB..         MOV     R3,?XSP + 1
   \   000048   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1757          
   1758          }
   \   00004B                REQUIRE ?Subroutine9
   \   00004B                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine38_0 & 0xFFFF
   1759          
   1760          /*********************************************************************
   1761           * @fn      ZDApp_ForceConcentratorChange()
   1762           *
   1763           * @brief   Force a network concentrator change by resetting
   1764           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1765           *          from NV and set nwk event.
   1766           *
   1767           * @param   none
   1768           *
   1769           * @return  none
   1770           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1771          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1772          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1773            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   1774            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A33         MOV     R2,#0x33
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1775          
   1776            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV     DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6401         XRL     A,#0x1
   \   000057   7019         JNZ     ??ZDApp_ForceConcentratorChange_0
   1777            {
   1778              // Start next event
   1779              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#__Constant_64
   \   00005C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B08         MOV     R3,#0x8
   \   000063   90....       MOV     DPTR,#NWK_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   800C         SJMP    ??ZDApp_ForceConcentratorChange_1
   1780            }
   1781            else
   1782            {
   1783              // Stop the next event
   1784              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B08         MOV     R3,#0x8
   \   000076   90....       MOV     DPTR,#NWK_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1785            }
   1786          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   02....       LJMP    ??Subroutine39_0 & 0xFFFF
   1787          
   1788          /*********************************************************************
   1789           * @fn      ZDApp_ResetNwkKey()
   1790           *
   1791           * @brief   Reset the Network key information in NV.
   1792           *
   1793           * @param   none
   1794           *
   1795           * @return  none
   1796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1797          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1798          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1799            nwkActiveKeyItems keyItems;
   1800          
   1801            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1802            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1803                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1804          }
   \   00003F   02....       LJMP    ?Subroutine9 & 0xFFFF
   1805          
   1806          /*********************************************************************
   1807           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1808           *
   1809           * @brief
   1810           *
   1811           *   Save off the Network key information.
   1812           *
   1813           * @param   incrFrmCnt - set to true if we want to increment the network
   1814                      frame counter, else set to false
   1815           *
   1816           * @return  true if restored from NV, false if not
   1817           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1818          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1819          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   1820            nwkActiveKeyItems keyItems;
   1821            uint8 ret = FALSE;
   \   00000C   7F00         MOV     R7,#0x0
   1822          
   1823            // Restore the key information
   1824            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1825                == ZSUCCESS )
   \   00000E                ; Setup parameters for call to function osal_nv_read
   \   00000E   A8..         MOV     R0,?XSP + 0
   \   000010   A9..         MOV     R1,?XSP + 1
   \   000012   88..         MOV     ?V0,R0
   \   000014   89..         MOV     ?V1,R1
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   75..15       MOV     ?V0,#0x15
   \   00001E   8F..         MOV     ?V1,R7
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   7C00         MOV     R4,#0x0
   \   000027   7D00         MOV     R5,#0x0
   \   000029   7A82         MOV     R2,#-0x7e
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000030   7404         MOV     A,#0x4
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   E9           MOV     A,R1
   \   000036   6003         JZ      $+5
   \   000038   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1826            {
   1827              uint8 nullKey[SEC_KEY_LEN];
   1828          
   1829              // initialize default value to compare to
   1830              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7C10         MOV     R4,#0x10
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7900         MOV     R1,#0x0
   \   000041   7415         MOV     A,#0x15
   \   000043   12....       LCALL   ?XSTACK_DISP101_8
   \   000046   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1831          
   1832              // if stored key is different than default value, then a key has been established
   1833              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000049                ; Setup parameters for call to function osal_memcmp
   \   000049   7415         MOV     A,#0x15
   \   00004B   12....       LCALL   ?XSTACK_DISP100_8
   \   00004E   88..         MOV     ?V0,R0
   \   000050   89..         MOV     ?V1,R1
   \   000052   8F..         MOV     ?V2,R7
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C10         MOV     R4,#0x10
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   A982         MOV     R1,DPL
   \   000064   AA83         MOV     R2,DPH
   \   000066   7B00         MOV     R3,#0x0
   \   000068   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00006B   7403         MOV     A,#0x3
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   E9           MOV     A,R1
   \   000071   7060         JNZ     ??ZDApp_RestoreNwkKey_0
   1834              {
   1835                if ( incrFrmCnt )
   \   000073   EE           MOV     A,R6
   \   000074   604E         JZ      ??ZDApp_RestoreNwkKey_1
   1836                {
   1837                  // Increment the frame counter stored in NV
   1838                  keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1839                                            NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000076   90....       MOV     DPTR,#__Constant_4e2
   \   000079   78..         MOV     R0,#?V0
   \   00007B   12....       LCALL   ?L_MOV_X
   \   00007E   7411         MOV     A,#0x11
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   78..         MOV     R0,#?V0
   \   000085   12....       LCALL   ?L_ADD_TO_X
   1840          
   1841                  nwkFrameCounter = keyItems.frameCounter;
   \   000088   7411         MOV     A,#0x11
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?XLOAD_R0123
   \   000090   90....       MOV     DPTR,#nwkFrameCounter
   \   000093   12....       LCALL   ?XSTORE_R0123
   1842          
   1843                  // Save the updated Frame Counter right away
   1844                  osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1845                                (void *)&keyItems );
   \   000096                ; Setup parameters for call to function osal_nv_write
   \   000096   A8..         MOV     R0,?XSP + 0
   \   000098   A9..         MOV     R1,?XSP + 1
   \   00009A   88..         MOV     ?V0,R0
   \   00009C   89..         MOV     ?V1,R1
   \   00009E   78..         MOV     R0,#?V0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   75..15       MOV     ?V0,#0x15
   \   0000A6   8F..         MOV     ?V1,R7
   \   0000A8   78..         MOV     R0,#?V0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   7C00         MOV     R4,#0x0
   \   0000AF   7D00         MOV     R5,#0x0
   \   0000B1   7A82         MOV     R2,#-0x7e
   \   0000B3   7B00         MOV     R3,#0x0
   \   0000B5   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B8   7404         MOV     A,#0x4
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   1846          
   1847                  nwkFrameCounterChanges = 0;
   \   0000BD   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   F0           MOVX    @DPTR,A
   1848                }
   1849          
   1850                ret = TRUE;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   0000C4   7F01         MOV     R7,#0x1
   1851          
   1852                // Clear copy in RAM before return.
   1853                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C6                ; Setup parameters for call to function osal_memset
   \   0000C6   7C15         MOV     R4,#0x15
   \   0000C8   7D00         MOV     R5,#0x0
   \   0000CA   7900         MOV     R1,#0x0
   \   0000CC   AA..         MOV     R2,?XSP + 0
   \   0000CE   AB..         MOV     R3,?XSP + 1
   \   0000D0   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1854              }
   1855            }
   1856          
   1857            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000D3   EF           MOV     A,R7
   \   0000D4   F9           MOV     R1,A
   \   0000D5   7425         MOV     A,#0x25
   \   0000D7   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   1858          }
   1859          
   1860          /*********************************************************************
   1861           * @fn      ZDApp_ResetTimerStart
   1862           *
   1863           * @brief   Start the reset timer.
   1864           *
   1865           * @param   delay - delay time(ms) before reset
   1866           *
   1867           * @return  none
   1868           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1869          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1870          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1871            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1872            {
   1873              // Start the rest timer
   1874              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1875            }
   1876          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   1877          
   1878          /*********************************************************************
   1879           * @fn      ZDApp_ResetTimerCancel
   1880           *
   1881           * @brief   Cancel the reset timer.
   1882           *
   1883           * @param   none
   1884           *
   1885           * @return  none
   1886           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1887          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1888          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1889            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1890            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1891          }
   \   00001C   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   1892          
   1893          /*********************************************************************
   1894           * @fn      ZDApp_LeaveCtrlInit
   1895           *
   1896           * @brief   Initialize the leave control logic.
   1897           *
   1898           * @param   none
   1899           *
   1900           * @return  none
   1901           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1902          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1903          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1904            uint8 status;
   1905          
   1906          
   1907            // Initialize control state
   1908            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1909          
   1910            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1911                                        sizeof(ZDApp_LeaveCtrl),
   1912                                        &ZDApp_LeaveCtrl );
   1913          
   1914            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1915            {
   1916              // Read saved control
   1917              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1918                            0,
   1919                            sizeof( uint8 ),
   1920                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0,#0x1
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1921            }
   1922          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine39_0 & 0xFFFF
   1923          
   1924          /*********************************************************************
   1925           * @fn      ZDApp_LeaveCtrlSet
   1926           *
   1927           * @brief   Set the leave control logic.
   1928           *
   1929           * @param   ra - reassociate flag
   1930           *
   1931           * @return  none
   1932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1933          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1934          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1935            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1936          
   1937            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1938            {
   1939              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1940            }
   1941          
   1942            // Write the leave control
   1943            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1944                           0,
   1945                           sizeof( uint8 ),
   1946                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine4 & 0xFFFF
   1947          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine38_0
   \   000023                ; // Fall through to label ??Subroutine38_0
   1948          
   1949          /*********************************************************************
   1950           * @fn      ZDApp_LeaveCtrlReset
   1951           *
   1952           * @brief   Re-initialize the leave control logic.
   1953           *
   1954           * @param   none
   1955           *
   1956           * @return  none
   1957           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1958          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1959          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1960            // Set leave control to initialized state
   1961            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1962          
   1963            // Write initialized control
   1964            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1965                          0,
   1966                          sizeof( uint8 ),
   1967                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine4 & 0xFFFF
   1968          }
   1969          
   1970          /*********************************************************************
   1971           * @fn      ZDApp_LeaveCtrlBypass
   1972           *
   1973           * @brief   Check if NV restore should be skipped during a leave reset.
   1974           *
   1975           * @param   none
   1976           *
   1977           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1978           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1979          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1980          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1981            uint8 bypass;
   1982          
   1983            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1984            {
   1985              bypass = TRUE;
   1986            }
   1987            else
   1988            {
   1989              bypass = FALSE;
   1990            }
   1991          
   1992            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine37_0
   1993          }
   1994          
   1995          /*********************************************************************
   1996           * @fn      ZDApp_LeaveCtrlStartup
   1997           *
   1998           * @brief   Check for startup conditions during a leave reset.
   1999           *
   2000           * @param   state      - devState_t determined by leave control logic
   2001           * @param   startDelay - startup delay
   2002           *
   2003           * @return  none
   2004           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2005          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2006          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2007            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   2008          
   2009            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   2010            {
   2011              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   2012              {
   2013                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   2014              }
   2015              else
   2016              {
   2017                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   2018              }
   2019          
   2020              // Reset leave control logic
   2021              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2022            }
   2023          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine37_0
   2024          
   2025          /*********************************************************************
   2026           * @fn      ZDApp_LeaveReset
   2027           *
   2028           * @brief   Setup a device reset due to a leave indication/confirm.
   2029           *
   2030           * @param   ra - reassociate flag
   2031           *
   2032           * @return  none
   2033           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2034          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2035          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2036            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2037          
   2038            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV     R2,#-0x78
   \   00000C   7B13         MOV     R3,#0x13
   \   00000E   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2039          
   2040            if ( ZSTACK_ROUTER_BUILD )
   2041            {
   2042              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   \   000011                ; Setup parameters for call to function osal_stop_timerEx
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B01         MOV     R3,#0x1
   \   000015   90....       MOV     DPTR,#NWK_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2043              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   \   00001D                ; Setup parameters for call to function osal_clear_event
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   7B01         MOV     R3,#0x1
   \   000021   90....       MOV     DPTR,#NWK_TaskID
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   2044            }
   2045          
   2046            if (ZG_DEVICE_ENDDEVICE_TYPE)
   \   000029   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6402         XRL     A,#0x2
   \   00002F   7040         JNZ     ??ZDApp_LeaveReset_0
   2047            {
   2048              // Save polling values to be restored after rejoin
   2049              if ( ra == TRUE )
   \   000031   7401         MOV     A,#0x1
   \   000033   6E           XRL     A,R6
   \   000034   7024         JNZ     ??CrossCallReturnLabel_6
   2050              {
   2051                 ZDApp_SavedPollRate = zgPollRate;
   \   000036   90....       MOV     DPTR,#zgPollRate
   \   000039   12....       LCALL   ?XLOAD_R0123
   \   00003C   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00003F   12....       LCALL   ?XSTORE_R0123
   2052                 savedResponseRate = zgResponsePollRate;
   \   000042   90....       MOV     DPTR,#zgResponsePollRate
   \   000045   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000048   90....       MOV     DPTR,#savedResponseRate
   \   00004B   12....       LCALL   ?Subroutine16 & 0xFFFF
   2053                 savedQueuedPollRate = zgQueuedPollRate;
   \                     ??CrossCallReturnLabel_5:
   \   00004E   90....       MOV     DPTR,#zgQueuedPollRate
   \   000051   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   2054              }
   \                     ??CrossCallReturnLabel_49:
   \   000054   90....       MOV     DPTR,#savedQueuedPollRate
   \   000057   12....       LCALL   ?Subroutine16 & 0xFFFF
   2055          
   2056              // Disable polling
   2057              NLME_SetPollRate(0);
   \                     ??CrossCallReturnLabel_6:
   \   00005A                ; Setup parameters for call to function NLME_SetPollRate
   \   00005A   90....       MOV     DPTR,#__Constant_0
   \   00005D   12....       LCALL   ?XLOAD_R2345
   \   000060   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2058              NLME_SetResponseRate(0);
   \   000063                ; Setup parameters for call to function NLME_SetResponseRate
   \   000063   7A00         MOV     R2,#0x0
   \   000065   7B00         MOV     R3,#0x0
   \   000067   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   2059              NLME_SetQueuedPollRate(0);
   \   00006A                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00006A   7A00         MOV     R2,#0x0
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   2060            }
   2061          
   2062            if ( ra == TRUE )
   \                     ??ZDApp_LeaveReset_0:
   \   000071   7401         MOV     A,#0x1
   \   000073   6E           XRL     A,R6
   \   000074   7027         JNZ     ??ZDApp_LeaveReset_1
   2063            {
   2064              devState = DEV_NWK_DISC;
   \   000076   90....       MOV     DPTR,#devState
   \   000079   7402         MOV     A,#0x2
   \   00007B   12....       LCALL   ?Subroutine15 & 0xFFFF
   2065              devStartMode = MODE_REJOIN;
   2066              _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_1:
   \   00007E   12....       LCALL   ?Subroutine11 & 0xFFFF
   2067          
   2068              // For rejoin, specify the extended PANID to look for
   2069              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_44:
   \   000081   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2070          
   2071              _NIB.nwkState = NWK_DISC;
   \   000084   90....       MOV     DPTR,#_NIB + 35
   \   000087   7402         MOV     A,#0x2
   \   000089   F0           MOVX    @DPTR,A
   2072          
   2073              zdoDiscCounter = 3;
   \   00008A   90....       MOV     DPTR,#zdoDiscCounter
   \   00008D   04           INC     A
   \   00008E   F0           MOVX    @DPTR,A
   2074              NLME_NwkDiscTerm();
   \   00008F                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00008F   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   2075          
   2076              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   \   000092                ; Setup parameters for call to function osal_rand
   \   000092   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000095                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000095   12....       LCALL   ?Subroutine29 & 0xFFFF
   2077            }
   \                     ??CrossCallReturnLabel_29:
   \   000098   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   00009B   8007         SJMP    ??ZDApp_LeaveReset_2
   2078            else
   2079            {
   2080              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_1:
   \   00009D                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00009D   7A88         MOV     R2,#-0x78
   \   00009F   7B13         MOV     R3,#0x13
   \   0000A1   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2081            }
   2082          }
   \                     ??ZDApp_LeaveReset_2:
   \   0000A4   02....       LJMP    ??Subroutine39_0 & 0xFFFF
   2083          
   2084          /*********************************************************************
   2085           * @fn      ZDApp_LeaveUpdate
   2086           *
   2087           * @brief   Update local device data related to leaving device.
   2088           *
   2089           * @param   nwkAddr        - NWK address of leaving device
   2090           * @param   extAddr        - EXT address of leaving device
   2091           * @param   removeChildren - remove children of leaving device
   2092           *
   2093           * @return  none
   2094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2095          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2096                                  uint8 removeChildren )
   2097          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
   2098            // Remove Apps Key for leaving device
   2099            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2100          
   2101            // Clear SECURITY bit from Address Manager
   2102            ZDSecMgrAddrClear( extAddr );
   \   00001B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   2103          
   2104            if ( pbindRemoveDev )
   \   000022   90....       MOV     DPTR,#pbindRemoveDev
   \   000025   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000028   6033         JZ      ??ZDApp_LeaveUpdate_0
   2105            {
   2106              zAddrType_t devAddr;
   2107          
   2108              // Remove bind entry and all related data
   2109              devAddr.addrMode = Addr64Bit;
   \   00002A   7410         MOV     A,#0x10
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7403         MOV     A,#0x3
   \   000031   F0           MOVX    @DPTR,A
   2110              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   8E..         MOV     ?V4,R6
   \   000034   8F..         MOV     ?V5,R7
   \   000036   75..00       MOV     ?V6,#0x0
   \   000039   78..         MOV     R0,#?V4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV     R4,#0x8
   \   000040   7D00         MOV     R5,#0x0
   \   000042   740B         MOV     A,#0xb
   \   000044   12....       LCALL   ?XSTACK_DISP101_8
   \   000047   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   2111          
   2112              pbindRemoveDev(&devAddr);
   \   00004F                ; Setup parameters for indirect call
   \   00004F   7408         MOV     A,#0x8
   \   000051   12....       LCALL   ?XSTACK_DISP101_8
   \   000054   90....       MOV     DPTR,#pbindRemoveDev
   \   000057   12....       LCALL   ?Subroutine25 & 0xFFFF
   2113            }
   \                     ??CrossCallReturnLabel_98:
   \   00005A   12....       LCALL   ?CALL_IND
   2114          
   2115            // Remove if child
   2116            if ( ZSTACK_ROUTER_BUILD )
   2117            {
   2118              // Router shall notify the Trust Center that a child End Device or
   2119              // a neighbor Router (within radius=1) has left the network
   2120              APSME_UpdateDeviceReq_t req;
   2121          
   2122              // forward authorization to the Trust Center
   2123              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   F0           MOVX    @DPTR,A
   2124              req.devAddr    = nwkAddr;
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   2125              req.devExtAddr = extAddr;
   \                     ??CrossCallReturnLabel_92:
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   EE           MOV     A,R6
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   EF           MOV     A,R7
   \   000078   F0           MOVX    @DPTR,A
   2126              req.status = APSME_UD_DEVICE_LEFT;
   \   000079   7406         MOV     A,#0x6
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   7402         MOV     A,#0x2
   \   000080   F0           MOVX    @DPTR,A
   2127          
   2128              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2129              {
   2130                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2131                // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2132                // with legacy Coordinator devices which can only handle one or the other.
   2133                if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   \   000081   90....       MOV     DPTR,#zgApsLinkKeyType
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6401         XRL     A,#0x1
   \   000087   700C         JNZ     ??ZDApp_LeaveUpdate_1
   2134                {
   2135                  req.apsSecure = FALSE;
   \   000089   7407         MOV     A,#0x7
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E4           CLR     A
   \   00008F   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   2136          
   2137                  // send and APSME_UPDATE_DEVICE request to the trust center
   2138                  APSME_UpdateDeviceReq( &req );
   2139                }
   \                     ??CrossCallReturnLabel_82:
   \   000092   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   2140          
   2141                // send the message APS encrypted
   2142                req.apsSecure = TRUE;
   \                     ??ZDApp_LeaveUpdate_1:
   \   000095   7407         MOV     A,#0x7
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   12....       LCALL   ?Subroutine12 & 0xFFFF
   2143          
   2144                // send and APSME_UPDATE_DEVICE request to the trust center
   2145                APSME_UpdateDeviceReq( &req );
   2146              }
   \                     ??CrossCallReturnLabel_80:
   \   00009D   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   2147              else
   2148              {
   2149                req.apsSecure = FALSE;
   2150          
   2151                // send and APSME_UPDATE_DEVICE request to the trust center
   2152                APSME_UpdateDeviceReq( &req );
   2153              }
   2154          
   2155              NLME_RemoveChild( extAddr, removeChildren );
   \   0000A0                ; Setup parameters for call to function NLME_RemoveChild
   \   0000A0   A9..         MOV     R1,?V2
   \   0000A2   EE           MOV     A,R6
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   FB           MOV     R3,A
   \   0000A6   12....       LCALL   `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
   2156            }
   2157          
   2158            // Remove Routing table related entry
   2159            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \   0000A9                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000A9   7900         MOV     R1,#0x0
   \   0000AB   AA..         MOV     R2,?V0
   \   0000AD   AB..         MOV     R3,?V1
   \   0000AF   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2160          
   2161            // Remove entry from neighborTable
   2162            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000B2                ; Setup parameters for call to function nwkNeighborRemove
   \   0000B2   90....       MOV     DPTR,#_NIB + 33
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   FC           MOV     R4,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FD           MOV     R5,A
   \   0000BA   AA..         MOV     R2,?V0
   \   0000BC   AB..         MOV     R3,?V1
   \   0000BE   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2163          
   2164            // Schedule to save data to NV
   2165            ZDApp_NwkWriteNVRequest();
   \   0000C1                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   0000C1   12....       LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2166          }
   \   0000C4   7411         MOV     A,#0x11
   \   0000C6                REQUIRE ?Subroutine6
   \   0000C6                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0
   2167          
   2168          /*********************************************************************
   2169           * @fn      ZDApp_NetworkDiscoveryReq
   2170           *
   2171           * @brief   Request a network discovery.
   2172           *
   2173           * @param  scanChannels -
   2174           * @param  scanDuration -
   2175           *
   2176           * @return  ZStatus_t
   2177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2178          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2179          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2180            // Setup optional filters - tbd
   2181          
   2182            // Request NLME network discovery
   2183            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   2184          }
   2185          
   2186          /*********************************************************************
   2187           * @fn      ZDApp_JoinReq
   2188           *
   2189           * @brief   Request the device to join a parent in a network.
   2190           *
   2191           * @param   channel -
   2192           * @param   panID -
   2193           *
   2194           * @return  ZStatus_t
   2195           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2196          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2197                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2198          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   2199            // Sync up the node with the stack profile (In the case where a pro device
   2200            // joins a non-pro network, or verse versa)
   2201            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV     A,#0xf
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2202          
   2203            // Request NLME Join Request
   2204            return NLME_JoinRequest(extendedPanID, panID,channel,
   2205                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2206                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV     A,#0xe
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V3,A
   \   000021   78..         MOV     R0,#?V3
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV     R1,?V2
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   02....       LJMP    ?Subroutine5 & 0xFFFF
   2207          
   2208          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine50_0
   \   000002                ; // Fall through to label ??Subroutine50_0
   2209          
   2210          /*********************************************************************
   2211           * @fn      ZDApp_DeviceConfigured
   2212           *
   2213           * @brief   Check to see if the local device is configured (i.e., part
   2214           *          of a network).
   2215           *
   2216           * @param   none
   2217           *
   2218           * @return  TRUE if configured. FALSE, otherwise.
   2219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2220          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2221          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2222            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   2223          
   2224            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2225                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV     R0,?XSP + 0
   \   000018   A9..         MOV     R1,?XSP + 1
   \   00001A   88..         MOV     ?V0,R0
   \   00001C   89..         MOV     ?V1,R1
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV     ?V0,#0x2
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV     R4,#0x14
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A21         MOV     R2,#0x21
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   2226          
   2227            // Does the NIB have anything more than default?
   2228            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054   02....       LJMP    ?Subroutine8 & 0xFFFF
   2229          }
   2230          
   2231          /*********************************************************************
   2232           * CALLBACK FUNCTIONS
   2233           */
   2234          
   2235          
   2236          /*********************************************************************
   2237           * @fn      ZDApp_SendEventMsg()
   2238           *
   2239           * @brief
   2240           *
   2241           *   Sends a Network Join message
   2242           *
   2243           * @param  cmd - command ID
   2244           * @param  len - length (in bytes) of the buf field
   2245           * @param  buf - buffer for the rest of the message.
   2246           *
   2247           * @return  none
   2248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2249          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2250          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   2251            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2252          }
   \   000013   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   2253          
   2254          /*********************************************************************
   2255           * @fn      ZDApp_SendMsg()
   2256           *
   2257           * @brief   Sends a OSAL message
   2258           *
   2259           * @param  taskID - Where to send the message
   2260           * @param  cmd - command ID
   2261           * @param  len - length (in bytes) of the buf field
   2262           * @param  buf - buffer for the rest of the message.
   2263           *
   2264           * @return  none
   2265           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2266          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   2268            osal_event_hdr_t *msgPtr;
   2269          
   2270            // Send the address to the task
   2271            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV     R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
   2272            if ( msgPtr )
   \   00001C   EA           MOV     A,R2
   \   00001D   45..         ORL     A,?V1
   \   00001F   6035         JZ      ??ZDApp_SendMsg_0
   2273            {
   2274              if ( (len > 0) && (buf != NULL) )
   \   000021   EE           MOV     A,R6
   \   000022   6020         JZ      ??ZDApp_SendMsg_1
   \   000024   E5..         MOV     A,?V2
   \   000026   45..         ORL     A,?V3
   \   000028   601A         JZ      ??ZDApp_SendMsg_1
   2275                osal_memcpy( msgPtr, buf, len );
   \   00002A                ; Setup parameters for call to function osal_memcpy
   \   00002A   85....       MOV     ?V8,?V2
   \   00002D   85....       MOV     ?V9,?V3
   \   000030   75..00       MOV     ?V10,#0x0
   \   000033   78..         MOV     R0,#?V8
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   2276          
   2277              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000044   85..82       MOV     DPL,?V0
   \   000047   85..83       MOV     DPH,?V1
   \   00004A   E5..         MOV     A,?V6
   \   00004C   F0           MOVX    @DPTR,A
   2278              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004D                ; Setup parameters for call to function osal_msg_send
   \   00004D   AA..         MOV     R2,?V0
   \   00004F   AB..         MOV     R3,?V1
   \   000051   A9..         MOV     R1,?V4
   \   000053   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2279            }
   2280          }
   \                     ??ZDApp_SendMsg_0:
   \   000056   7F0B         MOV     R7,#0xb
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
   2281          
   2282          /*********************************************************************
   2283           * Call Back Functions from NWK  - API
   2284           */
   2285          
   2286          /*********************************************************************
   2287           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2288           *
   2289           * @brief       This function returns a choice of PAN to join.
   2290           *
   2291           * @param       status - return status of the nwk discovery confirm
   2292           *
   2293           * @return      ZStatus_t
   2294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine37_0
   \   000003                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2295          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2296          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2297            osal_event_hdr_t msg;
   2298          
   2299            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2300            // Send ZDO_MGMT_NWK_DISC_RSP back
   2301          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2302            if ( zdappMgmtNwkDiscReqInProgress )
   2303            {
   2304              zdappMgmtNwkDiscReqInProgress = false;
   2305              ZDO_FinishProcessingMgmtNwkDiscReq();
   2306            }
   2307            else
   2308          #endif
   2309            {
   2310              // Pass the confirm to another task if it registers the callback
   2311              // Otherwise, pass the confirm to ZDApp.
   2312              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000017   6009         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2313              {
   2314                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   \   000020   8017         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2315              }
   2316              else
   2317              {
   2318                // Otherwise, send scan confirm to ZDApp task to proceed
   2319                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   2320                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000029                ; Setup parameters for call to function ZDApp_SendMsg
   \   000029   04           INC     A
   \   00002A   12....       LCALL   ?XSTACK_DISP102_8
   \   00002D   7B02         MOV     R3,#0x2
   \   00002F   7A01         MOV     R2,#0x1
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2321              }
   2322            }
   2323            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000039   7900         MOV     R1,#0x0
   \   00003B   7403         MOV     A,#0x3
   \   00003D   02....       LJMP    ?Subroutine3 & 0xFFFF
   2324          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E582         MOV     A,DPL
   \   00000B   4583         ORL     A,DPH
   \   00000D   22           RET
   2325          
   2326          /*********************************************************************
   2327           * @fn          ZDApp_NwkDescListProcessing
   2328           *
   2329           * @brief       This function process the network discovery result and select
   2330           *              a parent device to join itself.
   2331           *
   2332           * @param       none
   2333           *
   2334           * @return      ZStatus_t
   2335           */
   2336          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2337          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2338          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2339            networkDesc_t *pNwkDesc;
   2340            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2341            uint8 stackProfile;
   2342            uint8 stackProfilePro;
   2343            uint8 selected;
   2344          
   2345            // Count the number of nwk descriptors in the list
   2346            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_88
   2347            while (pNwkDesc)
   2348            {
   2349              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V1
   2350              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine23 & 0xFFFF
   2351            }
   \                     ??CrossCallReturnLabel_88:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2352          
   2353            // process discovery results
   2354            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0,#0x0
   2355            selected = FALSE;
   2356          
   2357          
   2358            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V2,#0x0
   2359            {
   2360              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AE..         MOV     R6,?V4
   \   00002D   AF..         MOV     R7,?V5
   2361              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V3,#0x0
   \   000032   8019         SJMP    ??CrossCallReturnLabel_89
   2362              {
   2363                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2364                {
   2365                  // If the extended Pan ID is commissioned to a non zero value
   2366                  // Only join the Pan that has match EPID
   2367                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2368                    continue;
   2369          
   2370                }
   2371                else if ( zgConfigPANID != 0xFFFF )
   2372                {
   2373                  // PAN Id is preconfigured. check if it matches
   2374                  if ( pNwkDesc->panId != zgConfigPANID )
   2375                    continue;
   2376                }
   2377          
   2378                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2379                {
   2380                  // check that network is allowing joining
   2381                  if ( ZSTACK_ROUTER_BUILD )
   2382                  {
   2383                    if ( stackProfilePro == FALSE )
   2384                    {
   2385                      if ( !pNwkDesc->routerCapacity )
   2386                      {
   2387                        continue;
   2388                      }
   2389                    }
   2390                    else
   2391                    {
   2392                      if ( !pNwkDesc->deviceCapacity )
   2393                      {
   2394                        continue;
   2395                      }
   2396                    }
   2397                  }
   2398                  else if ( ZSTACK_END_DEVICE_BUILD )
   2399                  {
   2400                    if ( !pNwkDesc->deviceCapacity )
   2401                    {
   2402                      continue;
   2403                    }
   2404                  }
   2405                }
   2406          
   2407                // check version of zigbee protocol
   2408                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2409                  continue;
   2410          
   2411                // check version of stack profile
   2412                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2413                {
   2414                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2415                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7008         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV     A,#0x1
   \   00003B   68           XRL     A,R0
   \   00003C   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2416                  {
   2417                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV     ?V0,#0x1
   2418                  }
   2419          
   2420                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV     A,?V2
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC     ?V3
   \   00004A   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00004D   E5..         MOV     A,?V3
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V1
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV     A,R1
   \   00005F   6401         XRL     A,#0x1
   \   000061   7013         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV     A,R6
   \   000064   240B         ADD     A,#0xb
   \   000066   FC           MOV     R4,A
   \   000067   E4           CLR     A
   \   000068   3F           ADDC    A,R7
   \   000069   FD           MOV     R5,A
   \   00006A   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000071   E9           MOV     A,R1
   \   000072   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV     DPTR,#zgConfigPANID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F4           CPL     A
   \   00007B   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   000082   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000085   90....       MOV     DPTR,#zgConfigPANID
   \   000088   E0           MOVX    A,@DPTR
   \   000089   68           XRL     A,R0
   \   00008A   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00008F   70B7         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000091   90....       MOV     DPTR,#_NIB + 23
   \   000094   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   68           XRL     A,R0
   \   0000A4   7003         JNZ     ??ZDApp_NwkDescListProcessing_12
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000A9   700A         JNZ     ??ZDApp_NwkDescListProcessing_13
   \   0000AB   74FE         MOV     A,#-0x2
   \   0000AD   68           XRL     A,R0
   \   0000AE   7003         JNZ     ??ZDApp_NwkDescListProcessing_14
   \   0000B0   74FF         MOV     A,#-0x1
   \   0000B2   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000B3   7017         JNZ     ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000B5   E5..         MOV     A,?V0
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   7005         JNZ     ??ZDApp_NwkDescListProcessing_16
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   7009         JNZ     ??ZDApp_NwkDescListProcessing_15
   \   0000C3   8083         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   7003         JNZ     $+5
   \   0000C9   02....       LJMP    ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F8           MOV     R0,A
   \   0000D7   90....       MOV     DPTR,#_NIB + 17
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   68           XRL     A,R0
   \   0000DC   6003         JZ      $+5
   \   0000DE   02....       LJMP    ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \   0000E1   8E82         MOV     DPL,R6
   \   0000E3   8F83         MOV     DPH,R7
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   90....       MOV     DPTR,#zgStackProfile
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   68           XRL     A,R0
   \   0000F2   6032         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   6401         XRL     A,#0x1
   \   0000F7   6003         JZ      $+5
   \   0000F9   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000FC   7402         MOV     A,#0x2
   \   0000FE   68           XRL     A,R0
   \   0000FF   6003         JZ      $+5
   \   000101   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   000104   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2421                  {
   2422                    continue;
   2423                  }
   2424                }
   2425          
   2426                break;
   2427              }
   2428          
   2429              if (i < ResultCount)
   2430              {
   2431               selected = TRUE;
   2432                break;
   2433              }
   2434          
   2435              // break if selected or stack profile pro wasn't found
   2436              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   000107   E5..         MOV     A,?V0
   \   000109   600C         JZ      ??ZDApp_NwkDescListProcessing_17
   2437              {
   2438                break;
   2439              }
   2440            }
   \   00010B   05..         INC     ?V2
   \   00010D   E5..         MOV     A,?V2
   \   00010F   C3           CLR     C
   \   000110   9402         SUBB    A,#0x2
   \   000112   5003         JNC     $+5
   \   000114   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2441          
   2442            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000117   E5..         MOV     A,?V1
   \   000119   65..         XRL     A,?V3
   \   00011B   7009         JNZ     ??ZDApp_NwkDescListProcessing_5
   2443            {
   2444              nwk_desc_list_free();
   \   00011D                ; Setup parameters for call to function nwk_desc_list_free
   \   00011D   12....       LCALL   `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2445              return (NULL);   // couldn't find appropriate PAN to join !
   \   000120   7A00         MOV     R2,#0x0
   \   000122   7B00         MOV     R3,#0x0
   \   000124   8004         SJMP    ??ZDApp_NwkDescListProcessing_18
   2446            }
   2447            else
   2448            {
   2449              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   000126   EE           MOV     A,R6
   \   000127   FA           MOV     R2,A
   \   000128   EF           MOV     A,R7
   \   000129   FB           MOV     R3,A
   2450            }
   \                     ??ZDApp_NwkDescListProcessing_18:
   \   00012A   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   2451          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine40_0
   \   000004                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009                REQUIRE ??Subroutine45_0
   \   000009                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
   2452          
   2453          /*********************************************************************
   2454           * @fn          ZDO_NetworkFormationConfirmCB
   2455           *
   2456           * @brief       This function reports the results of the request to
   2457           *              initialize a coordinator in a network.
   2458           *
   2459           * @param       Status - Result of NLME_NetworkFormationRequest()
   2460           *
   2461           * @return      none
   2462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2463          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2464          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2465            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2466          
   2467            if ( Status == ZSUCCESS )
   \   00000A   702A         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2468            {
   2469              // LED on shows Coordinator started
   2470              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2471          		UART_DebugPrint(HAL_UART_PORT_0, "Coordinator started");
   \   000013                ; Setup parameters for call to function UART_DebugPrint
   \   000013   7A..         MOV     R2,#`?<Constant "Coordinator started">` & 0xff
   \   000015   7B..         MOV     R3,#(`?<Constant "Coordinator started">` >> 8) & 0xff
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
   2472          		FLAG_JOIN_CONFIRM = TRUE;
   \   00001C   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   00001F   7401         MOV     A,#0x1
   \   000021   F0           MOVX    @DPTR,A
   2473          
   2474              // LED off forgets HOLD_AUTO_START
   2475              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000022                ; Setup parameters for call to function HalLedSet
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7908         MOV     R1,#0x8
   \   000026   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2476          
   2477          #if defined ( ZBIT )
   2478              SIM_SetColor(0xd0ffd0);
   2479          #endif
   2480          
   2481              if ( devState == DEV_HOLD )
   \   000029   90....       MOV     DPTR,#devState
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   701C         JNZ     ??ZDO_NetworkFormationConfirmCB_1
   2482              {
   2483                // Began with HOLD_AUTO_START
   2484                ZDApp_ChangeState( DEV_COORD_STARTING );
   \   00002F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00002F   7908         MOV     R1,#0x8
   \   000031   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000034   8015         SJMP    ??ZDO_NetworkFormationConfirmCB_1
   2485              }
   2486            }
   2487          #if defined(BLINK_LEDS)
   2488            else
   2489            {
   2490              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure    
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000036                ; Setup parameters for call to function HalLedSet
   \   000036   7A04         MOV     R2,#0x4
   \   000038   7904         MOV     R1,#0x4
   \   00003A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2491          		UART_DebugPrint(HAL_UART_PORT_0, "NetworkFormationConfirm failure");
   \   00003D                ; Setup parameters for call to function UART_DebugPrint
   \   00003D   7A..         MOV     R2,#`?<Constant "NetworkFormationConfi...">` & 0xff
   \   00003F   7B..         MOV     R3,#(`?<Constant "NetworkFormationConfi...">` >> 8) & 0xff
   \   000041   7900         MOV     R1,#0x0
   \   000043   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
   2492          		FLAG_JOIN_CONFIRM = FALSE;
   \   000046   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   2493            }
   2494          #endif
   2495          
   2496            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00004B                ; Setup parameters for call to function osal_set_event
   \   00004B   7A02         MOV     R2,#0x2
   \   00004D   02....       LJMP    ?Subroutine0 & 0xFFFF
   2497          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine44_0
   \   00000A                ; // Fall through to label ??Subroutine44_0
   2498          
   2499          /****************************************************************************
   2500           * @fn          ZDApp_beaconIndProcessing
   2501           *
   2502           * @brief       This function processes the incoming beacon indication.
   2503           *
   2504           *              When another task (MT or App) is registered to process
   2505           *              beacon indication themselves, this function will parse the
   2506           *              beacon payload and pass the beacon descriptor to that task
   2507           *              If no other tasks registered, this function will process
   2508           *              the beacon payload and generate the network descriptor link
   2509           *              list.
   2510           *
   2511           * @param
   2512           *
   2513           * @return      none
   2514           *
   2515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2516          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2517          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2518            // Pass the beacon Indication to another task if it registers the callback
   2519            // Otherwise, process the beacon notification here.
   2520            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000F   6006         JZ      ??ZDO_beaconNotifyIndCB_0
   2521            {
   2522              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ?CALL_IND
   \   000014   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2523            }
   2524            else
   2525            {
   2526              networkDesc_t *pNwkDesc;
   2527              networkDesc_t *pLastNwkDesc;
   2528              uint8 found = false;
   2529          
   2530              // Add the network to the Network Descriptor List
   2531              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV     DPTR,#NwkDescList
   \   00001A   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2532              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_85:
   \   00001D   90....       MOV     DPTR,#NwkDescList
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V3,A
   \   000027   EA           MOV     A,R2
   \   000028   2404         ADD     A,#0x4
   \   00002A   F5..         MOV     ?V6,A
   \   00002C   E4           CLR     A
   \   00002D   35..         ADDC    A,?V1
   \   00002F   F5..         MOV     ?V7,A
   \   000031   EA           MOV     A,R2
   \   000032   2402         ADD     A,#0x2
   \   000034   F5..         MOV     ?V4,A
   \   000036   E4           CLR     A
   \   000037   35..         ADDC    A,?V1
   \   000039   F5..         MOV     ?V5,A
   \   00003B   802B         SJMP    ??CrossCallReturnLabel_90
   2533              while (pNwkDesc)
   2534              {
   2535                if ((pNwkDesc->panId == pBeacon->panID) &&
   2536                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00003D   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000040   85..82       MOV     DPL,?V4
   \   000043   85..83       MOV     DPH,?V5
   \   000046   E0           MOVX    A,@DPTR
   \   000047   68           XRL     A,R0
   \   000048   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00004D   7012         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   85..82       MOV     DPL,?V6
   \   00005A   85..83       MOV     DPH,?V7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   68           XRL     A,R0
   \   00005F   6067         JZ      ??ZDO_beaconNotifyIndCB_5
   2537                {
   2538                  found = true;
   2539                  break;
   2540                }
   2541                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   8E..         MOV     ?V2,R6
   \   000063   8F..         MOV     ?V3,R7
   2542                pNwkDesc = pNwkDesc->nextDesc;
   \   000065   12....       LCALL   ?Subroutine23 & 0xFFFF
   2543              }
   \                     ??CrossCallReturnLabel_90:
   \   000068   EE           MOV     A,R6
   \   000069   4F           ORL     A,R7
   \   00006A   70D1         JNZ     ??ZDO_beaconNotifyIndCB_2
   2544          
   2545              // If no existing descriptor found, make a new one and add to the list
   2546              if (found == false)
   2547              {
   2548                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00006C                ; Setup parameters for call to function osal_mem_alloc
   \   00006C   7A16         MOV     R2,#0x16
   \   00006E   7B00         MOV     R3,#0x0
   \   000070   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000073   8A..         MOV     ?V8,R2
   \   000075   8B..         MOV     ?V9,R3
   \   000077   AE..         MOV     R6,?V8
   \   000079   AF..         MOV     R7,?V9
   2549                if ( !pNwkDesc )
   \   00007B   EE           MOV     A,R6
   \   00007C   4F           ORL     A,R7
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2550                {
   2551                  // Memory alloc failed, discard this beacon
   2552                  return;
   2553                }
   2554          
   2555                // Clear the network descriptor
   2556                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000082                ; Setup parameters for call to function osal_memset
   \   000082   7C16         MOV     R4,#0x16
   \   000084   7D00         MOV     R5,#0x0
   \   000086   7900         MOV     R1,#0x0
   \   000088   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2557          
   2558                // Initialize the descriptor
   2559                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   74FE         MOV     A,#-0x2
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   04           INC     A
   \   00009B   F0           MOVX    @DPTR,A
   2560                pNwkDesc->chosenRouterDepth = 0xFF;
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   F0           MOVX    @DPTR,A
   2561          
   2562                // Save new entry into the descriptor list
   2563                if ( !NwkDescList )
   \   0000AB   90....       MOV     DPTR,#NwkDescList
   \   0000AE   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000B1   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2564                {
   2565                  NwkDescList = pNwkDesc;
   \   0000B3   90....       MOV     DPTR,#NwkDescList
   \   0000B6   800B         SJMP    ??ZDO_beaconNotifyIndCB_7
   2566                }
   2567                else
   2568                {
   2569                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B8   E5..         MOV     A,?V2
   \   0000BA   2414         ADD     A,#0x14
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V3
   \   0000C1   F583         MOV     DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   EF           MOV     A,R7
   \   0000C7   F0           MOVX    @DPTR,A
   2570                }
   2571              }
   2572          
   2573              // Update the descriptor with the incoming beacon
   2574              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C8   85..82       MOV     DPL,?V0
   \   0000CB   85..83       MOV     DPH,?V1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000DA   A3           INC     DPTR
   \   0000DB   F0           MOVX    @DPTR,A
   2575              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000DC   E5..         MOV     A,?V0
   \   0000DE   2408         ADD     A,#0x8
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E4           CLR     A
   \   0000E2   35..         ADDC    A,?V1
   \   0000E4   F9           MOV     R1,A
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000EC   F0           MOVX    @DPTR,A
   2576              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000ED   85..82       MOV     DPL,?V6
   \   0000F0   85..83       MOV     DPH,?V7
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   F0           MOVX    @DPTR,A
   2577              pNwkDesc->panId          = pBeacon->panID;
   \   0000FB   85..82       MOV     DPL,?V4
   \   0000FE   85..83       MOV     DPH,?V5
   \   000101   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   2578              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_101:
   \   00010B   E5..         MOV     A,?V0
   \   00010D   240C         ADD     A,#0xc
   \   00010F   F582         MOV     DPL,A
   \   000111   E4           CLR     A
   \   000112   35..         ADDC    A,?V1
   \   000114   F583         MOV     DPH,A
   \   000116   E0           MOVX    A,@DPTR
   \   000117   C0E0         PUSH    A
   \   000119   EE           MOV     A,R6
   \   00011A   2413         ADD     A,#0x13
   \   00011C   F582         MOV     DPL,A
   \   00011E   E4           CLR     A
   \   00011F   3F           ADDC    A,R7
   \   000120   F583         MOV     DPH,A
   \   000122   D0E0         POP     A
   \   000124   F0           MOVX    @DPTR,A
   2579          
   2580              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2581              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000125   EE           MOV     A,R6
   \   000126   240B         ADD     A,#0xb
   \   000128   FA           MOV     R2,A
   \   000129   E4           CLR     A
   \   00012A   3F           ADDC    A,R7
   \   00012B   FB           MOV     R3,A
   \   00012C   8882         MOV     DPL,R0
   \   00012E   8983         MOV     DPH,R1
   \   000130   E0           MOVX    A,@DPTR
   \   000131   6401         XRL     A,#0x1
   \   000133   600E         JZ      ??ZDO_beaconNotifyIndCB_8
   2582              {
   2583                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000135                ; Setup parameters for call to function sAddrExtCpy
   \   000135   E5..         MOV     A,?V0
   \   000137   240D         ADD     A,#0xd
   \   000139   FC           MOV     R4,A
   \   00013A   E4           CLR     A
   \   00013B   35..         ADDC    A,?V1
   \   00013D   FD           MOV     R5,A
   \   00013E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000141   8009         SJMP    ??ZDO_beaconNotifyIndCB_9
   2584              }
   2585              else
   2586              {
   2587                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000143                ; Setup parameters for call to function osal_memset
   \   000143   7C08         MOV     R4,#0x8
   \   000145   7D00         MOV     R5,#0x0
   \   000147   79FF         MOV     R1,#-0x1
   \   000149   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2588              }
   2589          
   2590              // check if this device is a better choice to join...
   2591              // ...dont bother checking assocPermit flag is doing a rejoin
   2592              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2593                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00014C   E5..         MOV     A,?V0
   \   00014E   240A         ADD     A,#0xa
   \   000150   F8           MOV     R0,A
   \   000151   E4           CLR     A
   \   000152   35..         ADDC    A,?V1
   \   000154   F9           MOV     R1,A
   \   000155   8882         MOV     DPL,R0
   \   000157   8983         MOV     DPH,R1
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F5..         MOV     ?V4,A
   \   00015C   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   C3           CLR     C
   \   000161   95..         SUBB    A,?V4
   \   000163   4003         JC      $+5
   \   000165   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000168   85..82       MOV     DPL,?V0
   \   00016B   85..83       MOV     DPH,?V1
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   E0           MOVX    A,@DPTR
   \   000174   6401         XRL     A,#0x1
   \   000176   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   000178   90....       MOV     DPTR,#_tmpRejoinState
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   7003         JNZ     $+5
   \   00017E   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2594              {
   2595                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000181   75..00       MOV     ?V6,#0x0
   2596                uint8 capacity = FALSE;
   2597          
   2598          #if defined ( ZIGBEEPRO )
   2599                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2600                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2601                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2602                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000184   EE           MOV     A,R6
   \   000185   2409         ADD     A,#0x9
   \   000187   FA           MOV     R2,A
   \   000188   E4           CLR     A
   \   000189   3F           ADDC    A,R7
   \   00018A   FB           MOV     R3,A
   \   00018B   8A82         MOV     DPL,R2
   \   00018D   8B83         MOV     DPH,R3
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F5..         MOV     ?V5,A
   \   000192   EE           MOV     A,R6
   \   000193   240A         ADD     A,#0xa
   \   000195   FC           MOV     R4,A
   \   000196   E4           CLR     A
   \   000197   3F           ADDC    A,R7
   \   000198   FD           MOV     R5,A
   \   000199   E5..         MOV     A,?V0
   \   00019B   240B         ADD     A,#0xb
   \   00019D   F5..         MOV     ?V2,A
   \   00019F   E4           CLR     A
   \   0001A0   35..         ADDC    A,?V1
   \   0001A2   F5..         MOV     ?V3,A
   \   0001A4   E5..         MOV     A,?V5
   \   0001A6   C3           CLR     C
   \   0001A7   95..         SUBB    A,?V4
   \   0001A9   500E         JNC     ??ZDO_beaconNotifyIndCB_11
   \   0001AB   85..82       MOV     DPL,?V2
   \   0001AE   85..83       MOV     DPH,?V3
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   C3           CLR     C
   \   0001B3   9414         SUBB    A,#0x14
   \   0001B5   401B         JC      ??ZDO_beaconNotifyIndCB_12
   \   0001B7   801C         SJMP    ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001B9   E5..         MOV     A,?V5
   \   0001BB   65..         XRL     A,?V4
   \   0001BD   7016         JNZ     ??ZDO_beaconNotifyIndCB_13
   \   0001BF   8C82         MOV     DPL,R4
   \   0001C1   8D83         MOV     DPH,R5
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   F5..         MOV     ?V4,A
   \   0001C6   85..82       MOV     DPL,?V2
   \   0001C9   85..83       MOV     DPH,?V3
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   C3           CLR     C
   \   0001CE   95..         SUBB    A,?V4
   \   0001D0   5003         JNC     ??ZDO_beaconNotifyIndCB_13
   2603                {
   2604                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001D2   75..01       MOV     ?V6,#0x1
   2605                }
   2606          #else
   2607                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2608                {
   2609                  selected = TRUE;
   2610                }
   2611          #endif
   2612          
   2613                if ( ZSTACK_ROUTER_BUILD )
   2614                {
   2615                  capacity = pBeacon->routerCapacity;
   2616                }
   2617                else if ( ZSTACK_END_DEVICE_BUILD )
   2618                {
   2619                  capacity = pBeacon->deviceCapacity;
   2620                }
   2621          
   2622                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001D5   E5..         MOV     A,?V0
   \   0001D7   2406         ADD     A,#0x6
   \   0001D9   F5..         MOV     ?V4,A
   \   0001DB   E4           CLR     A
   \   0001DC   35..         ADDC    A,?V1
   \   0001DE   F5..         MOV     ?V5,A
   \   0001E0   85..82       MOV     DPL,?V4
   \   0001E3   F583         MOV     DPH,A
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   701B         JNZ     ??ZDO_beaconNotifyIndCB_14
   \   0001E8   85..82       MOV     DPL,?V0
   \   0001EB   85..83       MOV     DPH,?V1
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   F5..         MOV     ?V8,A
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   F5..         MOV     ?V9,A
   \   0001F5   90....       MOV     DPTR,#_NIB + 23
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   65..         XRL     A,?V8
   \   0001FB   7004         JNZ     ??ZDO_beaconNotifyIndCB_15
   \   0001FD   A3           INC     DPTR
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   65..         XRL     A,?V9
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   000201   703B         JNZ     ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000203   E5..         MOV     A,?V6
   \   000205   A2E0         MOV     C,0xE0 /* A   */.0
   \   000207   5035         JNC     ??ZDO_beaconNotifyIndCB_16
   2623                {
   2624                  // this is the new chosen router for joining...
   2625                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   000209   85..82       MOV     DPL,?V0
   \   00020C   85..83       MOV     DPH,?V1
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   F5..         MOV     ?V6,A
   \   000212   A3           INC     DPTR
   \   000213   E0           MOVX    A,@DPTR
   \   000214   F5..         MOV     ?V7,A
   \   000216   8E82         MOV     DPL,R6
   \   000218   8F83         MOV     DPH,R7
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   A3           INC     DPTR
   \   000221   E5..         MOV     A,?V6
   \   000223   F0           MOVX    @DPTR,A
   \   000224   A3           INC     DPTR
   \   000225   E5..         MOV     A,?V7
   \   000227   F0           MOVX    @DPTR,A
   2626                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   000228   8882         MOV     DPL,R0
   \   00022A   8983         MOV     DPH,R1
   \   00022C   E0           MOVX    A,@DPTR
   \   00022D   8A82         MOV     DPL,R2
   \   00022F   8B83         MOV     DPH,R3
   \   000231   F0           MOVX    @DPTR,A
   2627                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   000232   85..82       MOV     DPL,?V2
   \   000235   85..83       MOV     DPH,?V3
   \   000238   E0           MOVX    A,@DPTR
   \   000239   8C82         MOV     DPL,R4
   \   00023B   8D83         MOV     DPH,R5
   \   00023D   F0           MOVX    @DPTR,A
   2628                }
   2629          
   2630                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   00023E   85..82       MOV     DPL,?V0
   \   000241   85..83       MOV     DPH,?V1
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   A3           INC     DPTR
   \   00024A   A3           INC     DPTR
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   600B         JZ      ??ZDO_beaconNotifyIndCB_17
   2631                  pNwkDesc->deviceCapacity = 1;
   \   00024E   8E82         MOV     DPL,R6
   \   000250   8F83         MOV     DPH,R7
   \   000252   A3           INC     DPTR
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   A3           INC     DPTR
   \   000256   7401         MOV     A,#0x1
   \   000258   F0           MOVX    @DPTR,A
   2632          
   2633                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000259   85..82       MOV     DPL,?V4
   \   00025C   85..83       MOV     DPH,?V5
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2634                  pNwkDesc->routerCapacity = 1;
   \   000262   8E82         MOV     DPL,R6
   \   000264   8F83         MOV     DPH,R7
   \   000266   A3           INC     DPTR
   \   000267   A3           INC     DPTR
   \   000268   A3           INC     DPTR
   \   000269   7401         MOV     A,#0x1
   \   00026B   F0           MOVX    @DPTR,A
   2635              }
   2636            }
   2637          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00026C   7F0A         MOV     R7,#0xa
   \   00026E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET
   2638          
   2639          /*********************************************************************
   2640           * @fn          ZDO_StartRouterConfirmCB
   2641           *
   2642           * @brief       This function reports the results of the request to
   2643           *              start functioning as a router in a network.
   2644           *
   2645           * @param       Status - Result of NLME_StartRouterRequest()
   2646           *
   2647           * @return      none
   2648           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2649          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2650          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2651            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2652          
   2653            if ( Status == ZSUCCESS )
   \   00000A   702A         JNZ     ??ZDO_StartRouterConfirmCB_0
   2654            {
   2655              // LED on shows Router started
   2656              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2657          		UART_DebugPrint(HAL_UART_PORT_0, "Router started");
   \   000013                ; Setup parameters for call to function UART_DebugPrint
   \   000013   7A..         MOV     R2,#`?<Constant "Router started">` & 0xff
   \   000015   7B..         MOV     R3,#(`?<Constant "Router started">` >> 8) & 0xff
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
   2658          		FLAG_JOIN_CONFIRM = TRUE;
   \   00001C   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   00001F   7401         MOV     A,#0x1
   \   000021   F0           MOVX    @DPTR,A
   2659          		
   2660              // LED off forgets HOLD_AUTO_START
   2661              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000022                ; Setup parameters for call to function HalLedSet
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7908         MOV     R1,#0x8
   \   000026   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2662              if ( devState == DEV_HOLD )
   \   000029   90....       MOV     DPTR,#devState
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   701C         JNZ     ??ZDO_StartRouterConfirmCB_1
   2663              {
   2664                // Began with HOLD_AUTO_START
   2665                ZDApp_ChangeState( DEV_END_DEVICE );
   \   00002F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00002F   7906         MOV     R1,#0x6
   \   000031   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000034   8015         SJMP    ??ZDO_StartRouterConfirmCB_1
   2666              }
   2667            }
   2668          #if defined(BLINK_LEDS)
   2669            else
   2670            {
   2671              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000036                ; Setup parameters for call to function HalLedSet
   \   000036   7A04         MOV     R2,#0x4
   \   000038   7904         MOV     R1,#0x4
   \   00003A   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2672              UART_DebugPrint(HAL_UART_PORT_0, "StartRouterConfirm failure");
   \   00003D                ; Setup parameters for call to function UART_DebugPrint
   \   00003D   7A..         MOV     R2,#`?<Constant "StartRouterConfirm fa...">` & 0xff
   \   00003F   7B..         MOV     R3,#(`?<Constant "StartRouterConfirm fa...">` >> 8) & 0xff
   \   000041   7900         MOV     R1,#0x0
   \   000043   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
   2673          		FLAG_JOIN_CONFIRM = FALSE;
   \   000046   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   2674            }
   2675          #endif
   2676          
   2677            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00004B                ; Setup parameters for call to function osal_set_event
   \   00004B   7A20         MOV     R2,#0x20
   \   00004D   02....       LJMP    ?Subroutine0 & 0xFFFF
   2678          }
   2679          
   2680          /*********************************************************************
   2681           * @fn          ZDO_JoinConfirmCB
   2682           *
   2683           * @brief       This function allows the next higher layer to be notified
   2684           *              of the results of its request to join itself or another
   2685           *              device to a network.
   2686           *
   2687           * @param       Status - Result of NLME_JoinRequest()
   2688           *
   2689           * @return      none
   2690           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2691          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2692          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   2693            (void)PanId;  // remove if this parameter is used.
   2694          
   2695            nwkStatus = (byte)Status;
   \   00000C   90....       MOV     DPTR,#nwkStatus
   \   00000F   F0           MOVX    @DPTR,A
   2696          
   2697            if ( Status == ZSUCCESS )
   \   000010   702A         JNZ     ??ZDO_JoinConfirmCB_0
   2698            {
   2699              if ( ZSTACK_END_DEVICE_BUILD
   2700                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2701              {
   2702                neighborEntry_t *pItem;
   2703          
   2704                // We don't need the neighbor table entries.
   2705                // Clear the neighbor Table to remove beacon information
   2706                nwkNeighborInitTable();
   2707          
   2708                // Force a neighbor table entry for the parent
   2709                pItem = nwkNeighborFindEmptySlot();
   2710                if ( pItem != NULL )
   2711                {
   2712                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   2713                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   2714                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   2715                  pItem->panId = _NIB. nwkPanId;
   2716                  pItem->linkInfo.rxLqi = DEF_LQI;
   2717                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   2718                  pItem->linkInfo.txCost = DEF_LINK_COST;
   2719                }
   2720              }
   2721          
   2722              // LED on shows device joined
   2723              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   000012                ; Setup parameters for call to function HalLedSet
   \   000012   7A01         MOV     R2,#0x1
   \   000014   7904         MOV     R1,#0x4
   \   000016   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2724          		UART_DebugPrint(HAL_UART_PORT_0, "JoinConfirm device joined");
   \   000019                ; Setup parameters for call to function UART_DebugPrint
   \   000019   7A..         MOV     R2,#`?<Constant "JoinConfirm device jo...">` & 0xff
   \   00001B   7B..         MOV     R3,#(`?<Constant "JoinConfirm device jo...">` >> 8) & 0xff
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
   2725          		FLAG_JOIN_CONFIRM = TRUE;
   \   000022   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
   2726          		
   2727              // LED off forgets HOLD_AUTO_START
   2728              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000028                ; Setup parameters for call to function HalLedSet
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7908         MOV     R1,#0x8
   \   00002C   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2729              if ( (devState == DEV_HOLD) )
   \   00002F   90....       MOV     DPTR,#devState
   \   000032   E0           MOVX    A,@DPTR
   \   000033   701C         JNZ     ??ZDO_JoinConfirmCB_1
   2730              {
   2731                // Began with HOLD_AUTO_START
   2732                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000035                ; Setup parameters for call to function ZDApp_ChangeState
   \   000035   7903         MOV     R1,#0x3
   \   000037   12....       LCALL   `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   00003A   8015         SJMP    ??ZDO_JoinConfirmCB_1
   2733              }
   2734          
   2735              if ( !ZG_SECURE_ENABLED )
   2736              {
   2737                // Notify to save info into NV
   2738                ZDApp_NVUpdate();
   2739              }
   2740            }
   2741            else
   2742            {
   2743          #if defined(BLINK_LEDS)
   2744              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A04         MOV     R2,#0x4
   \   00003E   7904         MOV     R1,#0x4
   \   000040   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2745              UART_DebugPrint(HAL_UART_PORT_0, "JoinConfirm failure");
   \   000043                ; Setup parameters for call to function UART_DebugPrint
   \   000043   7A..         MOV     R2,#`?<Constant "JoinConfirm failure">` & 0xff
   \   000045   7B..         MOV     R3,#(`?<Constant "JoinConfirm failure">` >> 8) & 0xff
   \   000047   7900         MOV     R1,#0x0
   \   000049   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
   2746          		FLAG_JOIN_CONFIRM = FALSE;
   \   00004C   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   00004F   E4           CLR     A
   \   000050   F0           MOVX    @DPTR,A
   2747          #endif
   2748            }
   2749          
   2750            // Pass the join confirm to higher layer if callback registered
   2751            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_1:
   \   000051   90....       MOV     DPTR,#zdoCBFunc + 8
   \   000054   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000057   602F         JZ      ??ZDO_JoinConfirmCB_2
   2752            {
   2753              zdoJoinCnf_t joinCnf;
   2754          
   2755              joinCnf.status = Status;
   \   000059   EE           MOV     A,R6
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   F0           MOVX    @DPTR,A
   2756              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000061   90....       MOV     DPTR,#_NIB + 20
   \   000064   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   2757              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_102:
   \   00006F   90....       MOV     DPTR,#_NIB + 23
   \   000072   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   2758          
   2759              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   2760            }
   \                     ??CrossCallReturnLabel_60:
   \   000075   7403         MOV     A,#0x3
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   EA           MOV     A,R2
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   EB           MOV     A,R3
   \   00007E   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000081   8882         MOV     DPL,R0
   \   000083   8983         MOV     DPH,R1
   \   000085   12....       LCALL   ?CALL_IND
   2761          
   2762            // Notify ZDApp
   2763            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_2:
   \   000088                ; Setup parameters for call to function ZDApp_SendMsg
   \   000088   7C00         MOV     R4,#0x0
   \   00008A   7D00         MOV     R5,#0x0
   \   00008C   7B02         MOV     R3,#0x2
   \   00008E   7A02         MOV     R2,#0x2
   \   000090   90....       MOV     DPTR,#ZDAppTaskID
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F9           MOV     R1,A
   \   000095   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2764          
   2765          }
   \   000098   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7405         MOV     A,#0x5
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0
   2766          
   2767          /*********************************************************************
   2768           * @fn          ZDO_PermitJoinCB
   2769           *
   2770           * @brief      This function is called when there is a change in the
   2771           *             device's permit join status.
   2772           *
   2773           * @param       duration - the new duration
   2774           *
   2775           * @return      none
   2776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2777          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2778          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2779            // Pass the Permit Join status to higher layer if callback registered
   2780            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000017   6007         JZ      ??ZDO_PermitJoinCB_0
   2781            {
   2782              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV     R2,?XSP + 0
   \   00001B   AB..         MOV     R3,?XSP + 1
   \   00001D   12....       LCALL   ?CALL_IND
   2783            }
   2784          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV     A,#0x1
   \   000022   02....       LJMP    ?Subroutine3 & 0xFFFF
   2785          
   2786          /*********************************************************************
   2787           * @fn          ZDO_AddrChangeIndicationCB
   2788           *
   2789           * @brief       This function notifies the application that this
   2790           *              device's address has changed.  Could happen in
   2791           *              a network with stochastic addressing (PRO).
   2792           *
   2793           * @param       newAddr - the new address
   2794           *
   2795           * @return      none
   2796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2797          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2798          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2799            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2800            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2801          
   2802            // Notify to save info into NV
   2803            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_86:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2804          
   2805            // Notify the applications
   2806            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#ZDAppTaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001E   8041         SJMP    ??CrossCallReturnLabel_87
   2807          
   2808            while (pItem != NULL)
   2809            {
   2810              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000020   EE           MOV     A,R6
   \   000021   2402         ADD     A,#0x2
   \   000023   F8           MOV     R0,A
   \   000024   E4           CLR     A
   \   000025   3F           ADDC    A,R7
   \   000026   F9           MOV     R1,A
   \   000027   88..         MOV     ?V2,R0
   \   000029   89..         MOV     ?V3,R1
   \   00002B   8882         MOV     DPL,R0
   \   00002D   F583         MOV     DPH,A
   \   00002F   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000032   6026         JZ      ??ZDO_AddrChangeIndicationCB_1
   2811              {
   2812                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000034                ; Setup parameters for call to function osal_msg_allocate
   \   000034   7A04         MOV     R2,#0x4
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2813                if (pZDOAddrChangeMsg != NULL)
   \   00003B   EA           MOV     A,R2
   \   00003C   4B           ORL     A,R3
   \   00003D   601B         JZ      ??ZDO_AddrChangeIndicationCB_1
   2814                {
   2815                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   74D6         MOV     A,#-0x2a
   \   000045   F0           MOVX    @DPTR,A
   2816                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000046   12....       LCALL   ?Subroutine13 & 0xFFFF
   2817                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \                     ??CrossCallReturnLabel_93:
   \   000049                ; Setup parameters for call to function osal_msg_send
   \   000049   85..82       MOV     DPL,?V2
   \   00004C   85..83       MOV     DPH,?V3
   \   00004F   12....       LCALL   ?Subroutine25 & 0xFFFF
   2818                }
   2819              }
   \                     ??CrossCallReturnLabel_99:
   \   000052   A3           INC     DPTR
   \   000053   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2820              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2821            }
   \                     ??CrossCallReturnLabel_87:
   \   000061   EE           MOV     A,R6
   \   000062   4F           ORL     A,R7
   \   000063   70BB         JNZ     ??ZDO_AddrChangeIndicationCB_0
   2822          
   2823            // Send out a device announce
   2824            ZDApp_AnnounceNewAddress();
   \   000065                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000065   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2825          }
   \   000068   02....       LJMP    ??Subroutine35_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine46_0
   \   000002                ; // Fall through to label ??Subroutine46_0
   2826          
   2827          /*********************************************************************
   2828           * @fn          ZDO_JoinIndicationCB
   2829           *
   2830           * @brief       This function allows the next higher layer of a
   2831           *              coordinator to be notified of a remote join request.
   2832           *
   2833           * @param       ShortAddress - 16-bit address
   2834           * @param       ExtendedAddress - IEEE (64-bit) address
   2835           * @param       CapabilityFlags - Association Capability Flags
   2836           * @param       type - of joining -
   2837           *                          NWK_ASSOC_JOIN
   2838           *                          NWK_ASSOC_REJOIN_UNSECURE
   2839           *                          NWK_ASSOC_REJOIN_SECURE
   2840           *
   2841           * @return      ZStatus_t
   2842           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2843          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2844                                          uint8 CapabilityFlags, uint8 type)
   2845          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2846            (void)ExtendedAddress;
   2847            //check if the device is leaving before responding to rejoin request
   2848            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   6005         JZ      ??ZDO_JoinIndicationCB_0
   2849            {
   2850              return ZFailure; // device leaving , hence do not allow rejoin
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2851            }
   2852          
   2853          #if ZDO_NV_SAVE_RFDs
   2854              (void)CapabilityFlags;
   2855          
   2856          #else  // if !ZDO_NV_SAVE_RFDs
   2857              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2858          #endif
   2859              {
   2860                ZDApp_NVUpdate();  // Notify to save info into NV.
   \                     ??ZDO_JoinIndicationCB_0:
   \   000020                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000020   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000023   7410         MOV     A,#0x10
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   2861              }
   2862          
   2863              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2864              {
   2865                if ( type == NWK_ASSOC_JOIN ||
   2866                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   2867                      type == NWK_ASSOC_REJOIN_SECURE )
   \   00002A   600D         JZ      ??ZDO_JoinIndicationCB_2
   \   00002C   7401         MOV     A,#0x1
   \   00002E   68           XRL     A,R0
   \   00002F   6008         JZ      ??ZDO_JoinIndicationCB_2
   \   000031   7402         MOV     A,#0x2
   \   000033   68           XRL     A,R0
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2868                {
   2869                  uint16 timeToFire;
   2870                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2871          
   2872                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000039                ; Setup parameters for call to function osal_mem_alloc
   \   000039   7A06         MOV     R2,#0x6
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000040   8A..         MOV     ?V2,R2
   \   000042   8B..         MOV     ?V3,R3
   \   000044   AE..         MOV     R6,?V2
   \   000046   AF..         MOV     R7,?V3
   2873          
   2874                  if ( pNewDevice == NULL )
   \   000048   EE           MOV     A,R6
   \   000049   4F           ORL     A,R7
   \   00004A   7005         JNZ     ??ZDO_JoinIndicationCB_4
   2875                  {
   2876                    // Memory alloc failed
   2877                    return ZMemError;
   \   00004C   7910         MOV     R1,#0x10
   \   00004E   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2878                  }
   2879          
   2880                  // Add the new device to the New Device List
   2881                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   000051   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000054   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000057   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00005A   7006         JNZ     ??ZDO_JoinIndicationCB_5
   2882                  {
   2883                    // The list is empty, add the first element
   2884                    ZDApp_NewDeviceList = pNewDevice;
   \   00005C   EE           MOV     A,R6
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   EF           MOV     A,R7
   \   000060   801F         SJMP    ??ZDO_JoinIndicationCB_6
   2885                  }
   2886                  else
   2887                  {
   2888                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   8003         SJMP    ??ZDO_JoinIndicationCB_7
   2889          
   2890                    // Walk the list to last element
   2891                    while ( pDeviceList->next )
   2892                    {
   2893                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000068   E8           MOV     A,R0
   \   000069   FA           MOV     R2,A
   \   00006A   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   00006B   FB           MOV     R3,A
   2894                    }
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000073   70F3         JNZ     ??ZDO_JoinIndicationCB_8
   2895          
   2896                    // Add new device at the end
   2897                    pDeviceList->next = pNewDevice;
   \   000075   EE           MOV     A,R6
   \   000076   F8           MOV     R0,A
   \   000077   EF           MOV     A,R7
   \   000078   F9           MOV     R1,A
   \   000079   8A82         MOV     DPL,R2
   \   00007B   8B83         MOV     DPH,R3
   \   00007D   E8           MOV     A,R0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_6:
   \   000081   F0           MOVX    @DPTR,A
   2898                  }
   2899          
   2900                  // get the remaining time of the timer
   2901                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   000082                ; Setup parameters for call to function osal_get_timeoutEx
   \   000082   7A40         MOV     R2,#0x40
   \   000084   7B00         MOV     R3,#0x0
   \   000086   90....       MOV     DPTR,#ZDAppTaskID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00008E   8A..         MOV     ?V4,R2
   \   000090   8B..         MOV     ?V5,R3
   2902          
   2903                  pNewDevice->next = NULL;
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   E4           CLR     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   A3           INC     DPTR
   \   000099   F0           MOVX    @DPTR,A
   2904                  pNewDevice->shortAddr = ShortAddress;
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   12....       LCALL   ?Subroutine13 & 0xFFFF
   2905                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \                     ??CrossCallReturnLabel_94:
   \   0000A1   7458         MOV     A,#0x58
   \   0000A3   C3           CLR     C
   \   0000A4   95..         SUBB    A,?V4
   \   0000A6   F8           MOV     R0,A
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   95..         SUBB    A,?V5
   \   0000AB   F9           MOV     R1,A
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   12....       LCALL   ?Subroutine16 & 0xFFFF
   2906          
   2907                  // Start the timer only if there is no pending timer
   2908                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \                     ??CrossCallReturnLabel_7:
   \   0000B7   7458         MOV     A,#0x58
   \   0000B9   68           XRL     A,R0
   \   0000BA   7003         JNZ     ??ZDO_JoinIndicationCB_9
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   69           XRL     A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000BF   7017         JNZ     ??ZDO_JoinIndicationCB_3
   2909                  {
   2910                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000C1                ; Setup parameters for call to function osal_start_timerEx
   \   0000C1   90....       MOV     DPTR,#__Constant_258
   \   0000C4   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000C7   7A40         MOV     R2,#0x40
   \   0000C9   7B00         MOV     R3,#0x0
   \   0000CB   90....       MOV     DPTR,#ZDAppTaskID
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F9           MOV     R1,A
   \   0000D0   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000D3   7404         MOV     A,#0x4
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   2911                  }
   2912                }
   2913              }
   2914          
   2915              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000D8   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000DA                REQUIRE ?Subroutine2
   \   0000DA                ; // Fall through to label ?Subroutine2
   2916          
   2917          }
   2918          
   2919          /*********************************************************************
   2920           * @fn          ZDO_ConcentratorIndicationCB
   2921           *
   2922           * @brief       This function allows the next higher layer of a
   2923           *              device to be notified of existence of the concentrator.
   2924           *
   2925           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2926           * @param       extAddr - pointer to extended Address
   2927           *                        NULL if not available
   2928           * @param       pktCost - PktCost from RREQ
   2929           *
   2930           * @return      void
   2931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2932          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2933          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2934            zdoConcentratorInd_t conInd;
   2935          
   2936            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   2937            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_105:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2938            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2939          
   2940            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000024   6007         JZ      ??ZDO_ConcentratorIndicationCB_0
   2941            {
   2942              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ?CALL_IND
   2943            }
   2944          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine49_0
   \   000006                ; // Fall through to label ??Subroutine49_0
   2945          
   2946          /*********************************************************************
   2947           * @fn          ZDO_LeaveCnf
   2948           *
   2949           * @brief       This function allows the next higher layer to be
   2950           *              notified of the results of its request for this or
   2951           *              a child device to leave the network.
   2952           *
   2953           * @param       cnf - NLME_LeaveCnf_t
   2954           *
   2955           * @return      none
   2956           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine41_0
   \   000004                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2957          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2958          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2959            // Check for this device
   2960            if ( osal_ExtAddrEqual( cnf->extAddr,
   2961                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014   EE           MOV     A,R6
   \   000015   2402         ADD     A,#0x2
   \   000017   F5..         MOV     ?V0,A
   \   000019   E4           CLR     A
   \   00001A   3F           ADDC    A,R7
   \   00001B   F5..         MOV     ?V1,A
   \   00001D                ; Setup parameters for call to function sAddrExtCmp
   \   00001D   AA..         MOV     R2,?V0
   \   00001F   FB           MOV     R3,A
   \   000020   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000023   E9           MOV     A,R1
   \   000024   6401         XRL     A,#0x1
   \   000026   701F         JNZ     ??ZDO_LeaveCnf_0
   2962            {
   2963              // Pass the leave confirm to higher layer if callback registered
   2964              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2965                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000028   90....       MOV     DPTR,#zdoCBFunc + 10
   \   00002B   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00002E   600E         JZ      ??ZDO_LeaveCnf_1
   \   000030                ; Setup parameters for indirect call
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   ?CALL_IND
   \   000037   8B..         MOV     ?V1,R3
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V1
   \   00003C   7023         JNZ     ??ZDO_LeaveCnf_2
   2966              {
   2967                // Prepare to leave with reset
   2968                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   00003E                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00003E   12....       LCALL   ?Subroutine30 & 0xFFFF
   2969              }
   2970            }
   \                     ??CrossCallReturnLabel_30:
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000045   801A         SJMP    ??ZDO_LeaveCnf_2
   2971            else if ( ZSTACK_ROUTER_BUILD )
   2972            {
   2973              // Remove device address(optionally descendents) from data
   2974              ZDApp_LeaveUpdate( cnf->dstAddr,
   2975                                 cnf->extAddr,
   2976                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_0:
   \   000047                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F9           MOV     R1,A
   \   000057   AC..         MOV     R4,?V0
   \   000059   AD..         MOV     R5,?V1
   \   00005B   12....       LCALL   ?Subroutine20 & 0xFFFF
   2977            }
   \                     ??CrossCallReturnLabel_62:
   \   00005E   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2978          }
   \                     ??ZDO_LeaveCnf_2:
   \   000061   02....       LJMP    ??Subroutine39_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   2979          
   2980          /*********************************************************************
   2981           * @fn          ZDO_LeaveInd
   2982           *
   2983           * @brief       This function allows the next higher layer of a
   2984           *              device to be notified of a remote leave request or
   2985           *              indication.
   2986           *
   2987           * @param       ind - NLME_LeaveInd_t
   2988           *
   2989           * @return      none
   2990           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2991          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2992          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2993            uint8 leave;
   2994          
   2995          
   2996            // Parent is requesting the leave - NWK layer filters out illegal
   2997            // requests
   2998            if ( ind->request == TRUE )
   \   00000E   EE           MOV     A,R6
   \   00000F   240B         ADD     A,#0xb
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   F9           MOV     R1,A
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   EE           MOV     A,R6
   \   00001A   240C         ADD     A,#0xc
   \   00001C   08           INC     R0
   \   00001D   E4           CLR     A
   \   00001E   3F           ADDC    A,R7
   \   00001F   F9           MOV     R1,A
   \   000020   88..         MOV     ?V2,R0
   \   000022   89..         MOV     ?V3,R1
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6401         XRL     A,#0x1
   \   000035   7023         JNZ     ??ZDO_LeaveInd_0
   2999            {
   3000              // Only respond if we are not rejoining the network
   3001              if ( ind->rejoin == FALSE )
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   704B         JNZ     ??ZDO_LeaveInd_1
   3002              {
   3003                // Notify network of leave
   3004                NLME_LeaveRsp_t rsp;
   3005                rsp.rejoin = ind->rejoin;
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E4           CLR     A
   \   000044   F0           MOVX    @DPTR,A
   3006          
   3007                if ( ZSTACK_ROUTER_BUILD )
   3008                {
   3009                  rsp.removeChildren = ind->removeChildren;
   \   000045   85..82       MOV     DPL,?V0
   \   000048   85..83       MOV     DPH,?V1
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   3010                }
   3011                else if ( ZSTACK_END_DEVICE_BUILD )
   3012                {
   3013                  NLME_SetResponseRate(0);
   3014                  NLME_SetQueuedPollRate(0);
   3015                  rsp.removeChildren = 0;
   3016                }
   3017          
   3018                NLME_LeaveRsp( &rsp );
   3019              }
   3020          
   3021              if ( ZSTACK_END_DEVICE_BUILD )
   3022              {
   3023                // Stop polling and get ready to reset
   3024                NLME_SetPollRate( 0 );
   3025              }
   3026          
   3027              // Prepare to leave with reset
   3028              ZDApp_LeaveReset( ind->rejoin );
   3029            }
   \                     ??CrossCallReturnLabel_84:
   \   000055   12....       LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   \   000058   802F         SJMP    ??ZDO_LeaveInd_1
   3030            else
   3031            {
   3032              leave = FALSE;
   3033          
   3034              // Check if this device needs to leave as a child or descendent
   3035              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   00005A                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00005A   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00005D   8A..         MOV     ?V4,R2
   \   00005F   8B..         MOV     ?V5,R3
   \   000061   85..82       MOV     DPL,?V0
   \   000064   85..83       MOV     DPH,?V1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00006C   E5..         MOV     A,?V4
   \   00006E   6A           XRL     A,R2
   \   00006F   7003         JNZ     ??ZDO_LeaveInd_2
   \   000071   E5..         MOV     A,?V5
   \   000073   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_2:
   \   000074   7020         JNZ     ??ZDO_LeaveInd_3
   3036              {
   3037                if ( ( ind->removeChildren == TRUE )   )
   \   000076   7401         MOV     A,#0x1
   \   000078   69           XRL     A,R1
   \   000079   600E         JZ      ??ZDO_LeaveInd_1
   3038                {
   3039                  leave = TRUE;
   3040                }
   3041                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \   00007B   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00007E   7016         JNZ     ??ZDO_LeaveInd_3
   3042                {
   3043                  // old parents is leaving the network, child needs to search for a new parent
   3044                  ind->rejoin = TRUE;
   \   000080   85..82       MOV     DPL,?V2
   \   000083   85..83       MOV     DPH,?V3
   \   000086   7401         MOV     A,#0x1
   \   000088   F0           MOVX    @DPTR,A
   3045                  leave = TRUE;
   3046                }
   3047          
   3048              }
   3049              else if ( ind->removeChildren == TRUE )
   3050              {
   3051                // Check NWK address allocation algorithm
   3052                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3053              }
   3054          
   3055              if ( leave == TRUE )
   3056              {
   3057                // Prepare to leave with reset
   3058                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   000089                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000089   85..82       MOV     DPL,?V2
   \   00008C   85..83       MOV     DPH,?V3
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000094   800A         SJMP    ??ZDO_LeaveInd_4
   3059              }
   3060              else
   3061              {
   3062                // Remove device address(optionally descendents) from data
   3063                ZDApp_LeaveUpdate( ind->srcAddr,
   3064                                   ind->extAddr,
   3065                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_3:
   \   000096                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000096   EE           MOV     A,R6
   \   000097   2402         ADD     A,#0x2
   \   000099   FC           MOV     R4,A
   \   00009A   E4           CLR     A
   \   00009B   3F           ADDC    A,R7
   \   00009C   FD           MOV     R5,A
   \   00009D   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   3066              }
   3067            }
   3068          
   3069            // Pass the leave indication to higher layer if callback registered.
   3070            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_4:
   \   0000A0   90....       MOV     DPTR,#zdoCBFunc + 12
   \   0000A3   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000A6   6007         JZ      ??ZDO_LeaveInd_5
   3071            {
   3072              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000A8                ; Setup parameters for indirect call
   \   0000A8   EE           MOV     A,R6
   \   0000A9   FA           MOV     R2,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   FB           MOV     R3,A
   \   0000AC   12....       LCALL   ?CALL_IND
   3073            }
   3074          }
   \                     ??ZDO_LeaveInd_5:
   \   0000AF   7402         MOV     A,#0x2
   \   0000B1   02....       LJMP    ?Subroutine1 & 0xFFFF
   3075          
   3076          /*********************************************************************
   3077           * @fn          ZDO_SyncIndicationCB
   3078           *
   3079           * @brief       This function allows the next higher layer of a
   3080           *              coordinator to be notified of a loss of synchronization
   3081           *                          with the parent/child device.
   3082           *
   3083           * @param       type: 0 - child; 1 - parent
   3084           *
   3085           *
   3086           * @return      none
   3087           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3088          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3089          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3090            (void)shortAddr;  // Remove this line if this parameter is used.
   3091          
   3092            if ( ZSTACK_END_DEVICE_BUILD
   3093              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3094            {
   3095              if ( type == 1 && retryCnt == 0 )
   3096              {
   3097                // We lost contact with our parent.  Clear the neighbor Table.
   3098                nwkNeighborInitTable();
   3099          
   3100                runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   3101          
   3102                // Start the rejoin process.
   3103                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   3104              }
   3105            }
   3106          }
   \   000000   02....       LJMP    ?BRET
   3107          
   3108          /*********************************************************************
   3109           * @fn          ZDO_ManytoOneFailureIndicationCB
   3110           *
   3111           * @brief       This function allows the next higher layer of a
   3112           *              concentrator to be notified of a many-to-one route
   3113           *              failure.
   3114           *
   3115           * @param       none
   3116           *
   3117           *
   3118           * @return      none
   3119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3120          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3121          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3122            // By default, the concentrator automatically redo many-to-one route
   3123            // discovery to update all many-to-one routes in the network
   3124            // If you want anything processing other than the default,
   3125            // please replace the following code.
   3126          
   3127            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3128          }
   \   000007   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3129          
   3130          /*********************************************************************
   3131           * @fn          ZDO_PollConfirmCB
   3132           *
   3133           * @brief       This function allows the next higher layer to be
   3134           *              notified of a Poll Confirm.
   3135           *
   3136           * @param       none
   3137           *
   3138           * @return      none
   3139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3140          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3141          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3142            (void)status;  // Remove this line if this parameter is used.
   3143            return;
   \   000000   02....       LJMP    ?BRET
   3144          }
   3145          
   3146          /*********************************************************************
   3147           * @fn          ZDO_NetworkStatusCB
   3148           *
   3149           * @brief       Network Status Callback function
   3150           *
   3151           * @param       nwkDstAddr - message's destination address- used to determine
   3152           *                           if the message was intended for this device or
   3153           *                           a sleeping end device.
   3154           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3155           * @param       dstAddr - the destination address related to the status code
   3156           *
   3157           * @return      none
   3158           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3159          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3160          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3161            (void)dstAddr;     // Remove this line if this parameter is used.
   3162          
   3163            if ( (nwkDstAddr == NLME_GetShortAddr())
   3164                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3165            {
   3166              // Routing error for dstAddr, this is informational and a Route
   3167              // Request should happen automatically.
   3168            }
   3169          }
   \   000007   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3170          
   3171          /******************************************************************************
   3172           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3173           *
   3174           * @brief       Stub routine implemented by NHLE. NHLE should call
   3175           *              <AddrMgrWriteNV> when appropriate.
   3176           *
   3177           * @param       none
   3178           *
   3179           * @return      none
   3180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3181          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3182          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3183          #if defined ( NV_RESTORE )
   3184            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??AddrMgrWriteNVRequest_0
   3185            {
   3186              // Trigger to save info into NV
   3187              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3188            }
   3189          #endif
   3190          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000019   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3191          
   3192          /*********************************************************************
   3193           * Call Back Functions from Security  - API
   3194           */
   3195          
   3196           /*********************************************************************
   3197           * @fn          ZDO_UpdateDeviceIndication
   3198           *
   3199           * @brief       This function notifies the "Trust Center" of a
   3200           *              network when a device joins or leaves the network.
   3201           *
   3202           * @param       extAddr - pointer to 64 bit address of new device
   3203           * @param       status  - 0 if a new device joined securely
   3204           *                      - 1 if a new device joined un-securely
   3205           *                      - 2 if a device left the network
   3206           *
   3207           * @return      true if newly joined device should be allowed to
   3208           *                                              remain on network
   3209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3210          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3211          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3212            // can implement a network access policy based on the
   3213            // IEEE address of newly joining devices...
   3214            (void)extAddr;
   3215            (void)status;
   3216          
   3217            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   3218          }
   3219          
   3220          /*********************************************************************
   3221           * @fn          ZDApp_InMsgCB
   3222           *
   3223           * @brief       This function is called to pass up any message that is
   3224           *              not yet supported.  This allows for the developer to
   3225           *              support features themselves..
   3226           *
   3227           * @return      none
   3228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3229          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3230          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3231            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000015   5480         ANL     A,#0x80
   \   000017   704B         JNZ     ??ZDApp_InMsgCB_0
   3232            {
   3233              // Handle the response message
   3234            }
   3235            else
   3236            {
   3237              // Handle the request message by sending a generic "not supported".
   3238              // Device Announce doesn't have a response.
   3239              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000019   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00001C   7046         JNZ     ??ZDApp_InMsgCB_0
   \   00001E   7413         MOV     A,#0x13
   \   000020   68           XRL     A,R0
   \   000021   7001         JNZ     ??ZDApp_InMsgCB_1
   \   000023   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000024   603E         JZ      ??ZDApp_InMsgCB_0
   3240              {
   3241                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3242                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   E8           MOV     A,R0
   \   000027   F5..         MOV     ?V0,A
   \   000029   E9           MOV     A,R1
   \   00002A   4480         ORL     A,#0x80
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   E4           CLR     A
   \   000034   F5..         MOV     ?V0,A
   \   000036   F5..         MOV     ?V1,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   EE           MOV     A,R6
   \   00003E   240E         ADD     A,#0xe
   \   000040   F582         MOV     DPL,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F583         MOV     DPH,A
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FD           MOV     R5,A
   \   000048   7C84         MOV     R4,#-0x7c
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FA           MOV     R2,A
   \   00004E   E4           CLR     A
   \   00004F   3F           ADDC    A,R7
   \   000050   FB           MOV     R3,A
   \   000051   EE           MOV     A,R6
   \   000052   240F         ADD     A,#0xf
   \   000054   F582         MOV     DPL,A
   \   000056   E4           CLR     A
   \   000057   3F           ADDC    A,R7
   \   000058   F583         MOV     DPH,A
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   00005F   7404         MOV     A,#0x4
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   3243              }
   3244            }
   3245          }
   \                     ??ZDApp_InMsgCB_0:
   \   000064   02....       LJMP    ??Subroutine39_0 & 0xFFFF
   3246          
   3247          
   3248          /*********************************************************************
   3249           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3250           *
   3251           * @brief   Changes the Match Descriptor Response permission.
   3252           *
   3253           * @param   endpoint - endpoint to allow responses
   3254           * @param   action - true to allow responses, false to not
   3255           *
   3256           * @return  none
   3257           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3258          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3259          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3260            // Store the action
   3261            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   3262          }
   \   000008   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3263          
   3264          /*********************************************************************
   3265           * @fn      ZDApp_NetworkInit()
   3266           *
   3267           * @brief   Used to start the network joining process
   3268           *
   3269           * @param   delay - mSec delay to wait before starting
   3270           *
   3271           * @return  none
   3272           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3273          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3274          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3275            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3276            {
   3277              // Wait awhile before starting the device
   3278              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V2,A
   \   000010   F5..         MOV     ?V3,A
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3279            }
   3280            else
   3281            {
   3282              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3283            }
   3284          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   3285          
   3286          /*********************************************************************
   3287           * @fn      ZDApp_NwkStateUpdateCB()
   3288           *
   3289           * @brief   This function notifies that this device's network
   3290           *          state info has been changed.
   3291           *
   3292           * @param   none
   3293           *
   3294           * @return  none
   3295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3296          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3297          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3298            // Notify to save info into NV
   3299            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   3300            {
   3301              // Trigger to save info into NV
   3302              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3303            }
   3304          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3305          
   3306          /*********************************************************************
   3307           * @fn      ZDApp_NodeProfileSync()
   3308           *
   3309           * @brief   Sync node with stack profile.
   3310           *
   3311           * @param   stackProfile - stack profile of the network to join
   3312           *
   3313           * @return  none
   3314           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3315          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3316          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3317            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501B         JNC     ??ZDApp_NodeProfileSync_0
   3318            {
   3319              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6014         JZ      ??ZDApp_NodeProfileSync_0
   3320              {
   3321                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   4402         ORL     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
   3322                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   740C         MOV     A,#0xc
   \   000025   F0           MOVX    @DPTR,A
   3323                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000026                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3324              }
   3325            }
   3326          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   00002A   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3327          
   3328          /*********************************************************************
   3329           * @fn      ZDApp_StartJoiningCycle()
   3330           *
   3331           * @brief   Starts the joining cycle of a device.  This will only
   3332           *          continue an already started (or stopped) joining cycle.
   3333           *
   3334           * @param   none
   3335           *
   3336           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3338          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3339          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3340            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3341            {
   3342              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   3343              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3344          
   3345              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3346            }
   3347            else
   3348              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3349          }
   3350          
   3351          /*********************************************************************
   3352           * @fn      ZDApp_StopJoiningCycle()
   3353           *
   3354           * @brief   Stops the joining or rejoining process of a device.
   3355           *
   3356           * @param   none
   3357           *
   3358           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3359           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3360          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3361          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3362            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   600A         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX    A,@DPTR
   \   000012   640C         XRL     A,#0xc
   \   000014   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3363            {
   3364              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV     DPTR,#continueJoining
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
   3365              return ( TRUE );
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3366            }
   3367            else
   3368              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3369          }
   3370          
   3371          /*********************************************************************
   3372           * @fn      ZDApp_AnnounceNewAddress()
   3373           *
   3374           * @brief   Send Device Announce and hold all transmissions for
   3375           *          new address timeout.
   3376           *
   3377           * @param   none
   3378           *
   3379           * @return  none
   3380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3381          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3382          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3383          #if defined ( ZIGBEEPRO )
   3384            // Turn off data request hold
   3385            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3386          #endif
   3387          
   3388            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3389                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   AE..         MOV     R6,?V0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0,#0x0
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V1
   \   000029   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   3390          
   3391          #if defined ( ZIGBEEPRO )
   3392            // Setup the timeout
   3393            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3394          #endif
   3395          
   3396            if ( ZSTACK_END_DEVICE_BUILD )
   3397            {
   3398              if ( zgChildAgingEnable == TRUE )
   3399              {
   3400                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3401          
   3402                // Send the message to parent
   3403                NLME_GetCoordExtAddr( coordExtAddr );
   3404                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3405                                           zgEndDeviceTimeoutValue,
   3406                                           zgEndDeviceConfiguration );
   3407              }
   3408            }
   3409          }
   \   000038   02....       LJMP    ??Subroutine39_0 & 0xFFFF
   3410          
   3411          /*********************************************************************
   3412           * @fn      ZDApp_SendParentAnnce()
   3413           *
   3414           * @brief   Send Parent Announce message.
   3415           *
   3416           * @param   none
   3417           *
   3418           * @return  none
   3419           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3420          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3421          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3422            uint8 count;
   3423            uint8 *childInfo;
   3424          
   3425            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV     ?V0,R2
   \   000013   8B..         MOV     ?V1,R3
   3426          
   3427            if ( childInfo != NULL )
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V1
   \   000018   6054         JZ      ??ZDApp_SendParentAnnce_0
   3428            {
   3429              if ( count > 0 )
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6044         JZ      ??ZDApp_SendParentAnnce_1
   3430              {
   3431                zAddrType_t dstAddr;
   3432          
   3433                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000023   7409         MOV     A,#0x9
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   740F         MOV     A,#0xf
   \   00002A   F0           MOVX    @DPTR,A
   3434                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   74FC         MOV     A,#-0x4
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74FF         MOV     A,#-0x1
   \   000036   F0           MOVX    @DPTR,A
   3435          
   3436                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000037                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000037   75..00       MOV     ?V2,#0x0
   \   00003A   78..         MOV     R0,#?V2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   75..1F       MOV     ?V2,#0x1f
   \   000042   75..00       MOV     ?V3,#0x0
   \   000045   78..         MOV     R0,#?V2
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   7405         MOV     A,#0x5
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   7406         MOV     A,#0x6
   \   000058   12....       LCALL   ?XSTACK_DISP102_8
   \   00005B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00005D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00005F   12....       LCALL   `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000062   7405         MOV     A,#0x5
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   3437              }
   3438          
   3439              // Free the list after the message has been sent
   3440              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000067                ; Setup parameters for call to function osal_mem_free
   \   000067   AA..         MOV     R2,?V0
   \   000069   AB..         MOV     R3,?V1
   \   00006B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3441            }
   3442          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006E   740A         MOV     A,#0xa
   \   000070   02....       LJMP    ??Subroutine50_0 & 0xFFFF
   3443          
   3444          /*********************************************************************
   3445           * @fn          ZDApp_NVUpdate
   3446           *
   3447           * @brief       Set the NV Update Timer.
   3448           *
   3449           * @param       none
   3450           *
   3451           * @return      none
   3452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3453          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3454          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3455          #if defined ( NV_RESTORE )
   3456            if ( (ZSTACK_END_DEVICE_BUILD)
   3457                 || (ZSTACK_ROUTER_BUILD
   3458                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   \   000004   90....       MOV     DPTR,#_NIB + 14
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000A   400E         JC      ??ZDApp_NVUpdate_0
   3459            {
   3460              // No need to wait, set the event to save the state
   3461              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A00         MOV     R2,#0x0
   \   00000E   7B01         MOV     R3,#0x1
   \   000010   90....       MOV     DPTR,#ZDAppTaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000018   8017         SJMP    ??ZDApp_NVUpdate_1
   3462            }
   3463            else
   3464            {
   3465              // To allow for more changes to the network state before saving
   3466              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \                     ??ZDApp_NVUpdate_0:
   \   00001A                ; Setup parameters for call to function osal_start_timerEx
   \   00001A   90....       MOV     DPTR,#__Constant_2bc
   \   00001D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B01         MOV     R3,#0x1
   \   000024   90....       MOV     DPTR,#ZDAppTaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   3467            }
   3468          #endif
   3469          }
   \                     ??ZDApp_NVUpdate_1:
   \   000031   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3470          
   3471          /*********************************************************************
   3472           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3473           *
   3474           * @brief   Returns a PAN ID for the network layer to use during
   3475           *          a coordinator start and there is another network with
   3476           *          the intended PANID.
   3477           *
   3478           * @param   panid - the intended PAN ID
   3479           *
   3480           * @return  PANID to try
   3481           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3482          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3483          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3484            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3485          }
   3486          
   3487          /*********************************************************************
   3488           * @fn          ZDO_SrcRtgIndCB
   3489           *
   3490           * @brief       This function notifies the ZDO available src route record received.
   3491           *
   3492           * @param       srcAddr - source address of the source route
   3493           * @param       relayCnt - number of devices in the relay list
   3494           * @param       relayList - relay list of the source route
   3495           *
   3496           * @return      none
   3497           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3498          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3499          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3500            zdoSrcRtg_t srcRtg;
   3501          
   3502            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   3503            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_106:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3504            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3505          
   3506            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000024   600A         JZ      ??ZDO_SrcRtgIndCB_0
   3507            {
   3508              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV     R2,?XSP + 0
   \   000028   AB..         MOV     R3,?XSP + 1
   \   00002A   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   3509            }
   \                     ??CrossCallReturnLabel_97:
   \   00002D   12....       LCALL   ?CALL_IND
   3510          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030                REQUIRE ?Subroutine7
   \   000030                ; // Fall through to label ?Subroutine7
   3511          
   3512          /*********************************************************************
   3513           * @fn          ZDApp_InitZdoCBFunc
   3514           *
   3515           * @brief       Call this function to initialize zdoCBFunc[]
   3516           *
   3517           * @param       none
   3518           *
   3519           * @return      none
   3520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3521          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3522          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3523            uint8 i;
   3524          
   3525            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3526            {
   3527              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   25E0         ADD     A,0xE0 /* A   */
   \   000009   12....       LCALL   ?Subroutine33 & 0xFFFF
   3528            }
   \                     ??CrossCallReturnLabel_37:
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   0A           INC     R2
   \   000011   EA           MOV     A,R2
   \   000012   C3           CLR     C
   \   000013   9409         SUBB    A,#0x9
   \   000015   40EF         JC      ??ZDApp_InitZdoCBFunc_0
   3529          }
   \   000017   02....       LJMP    ??Subroutine37_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#zdoCBFunc & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
   3530          
   3531          /*********************************************************************
   3532           * @fn          ZDO_RegisterForZdoCB
   3533           *
   3534           * @brief       Call this function to register the higher layer (for
   3535           *              example, the Application layer or MT layer) with ZDO
   3536           *              callbacks to get notified of some ZDO indication like
   3537           *              existence of a concentrator or receipt of a source
   3538           *              route record.
   3539           *
   3540           * @param       indID - ZDO Indication ID
   3541           * @param       pFn   - Callback function pointer
   3542           *
   3543           * @return      ZSuccess - successful, ZInvalidParameter if not
   3544           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3545          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3546          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3547            // Check the range of the indication ID
   3548            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_RegisterForZdoCB_0
   3549            {
   3550              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00000F   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   3551              return ZSuccess;
   \                     ??CrossCallReturnLabel_103:
   \   000012   7900         MOV     R1,#0x0
   \   000014   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3552            }
   3553          
   3554            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3555          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   29           ADD     A,R1
   \   000001   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000004   22           RET
   3556          
   3557          /*********************************************************************
   3558           * @fn          ZDO_DeregisterForZdoCB
   3559           *
   3560           * @brief       Call this function to de-register the higher layer (for
   3561           *              example, the Application layer or MT layer) with ZDO
   3562           *              callbacks to get notified of some ZDO indication like
   3563           *              existence of a concentrator or receipt of a source
   3564           *              route record.
   3565           *
   3566           * @param       indID - ZDO Indication ID
   3567           *
   3568           * @return      ZSuccess - successful, ZInvalidParameter if not
   3569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3570          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3571          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3572            // Check the range of the indication ID
   3573            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500B         JNC     ??ZDO_DeregisterForZdoCB_0
   3574            {
   3575              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV     A,R2
   \   00000C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
   3576              return ZSuccess;
   \   000013   F9           MOV     R1,A
   \   000014   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3577            }
   3578          
   3579            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3580          }
   3581          
   3582          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3583          #if defined ( REFLECTOR )
   3584          /*********************************************************************
   3585           * @fn          ZDApp_SetPendingBindDefault
   3586           *
   3587           * @brief       This function initializes a specific entry of pending
   3588           *              Bind Request.
   3589           *
   3590           * @param       pendBindReq - pointer to the entry in the table
   3591           *
   3592           * @return      none
   3593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3594          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3595          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3596            // Set it to an initial value
   3597            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3598          
   3599            // We are checking for age 0 for aged-out records
   3600            pendBindReq->age = 0;
   \   000012   EE           MOV     A,R6
   \   000013   2420         ADD     A,#0x20
   \   000015   F582         MOV     DPL,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F583         MOV     DPH,A
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   3601          }
   \   00001D   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3602          
   3603          /*********************************************************************
   3604           * @fn          ZDApp_InitPendingBind
   3605           *
   3606           * @brief       This function initializes the buffer that holds
   3607           *              pending Bind Request messages if no valid NWK address
   3608           *              exists in Address Manager and a Network Address Req
   3609           *              has been sent out.
   3610           *
   3611           * @param       none
   3612           *
   3613           * @return      none
   3614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3615          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3616          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3617            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000008   7030         JNZ     ??ZDApp_InitPendingBind_0
   3618            {
   3619              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV     R2,#0x63
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000017   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00001A   601E         JZ      ??ZDApp_InitPendingBind_0
   3620              {
   3621                uint8 i;
   3622          
   3623                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV     R6,#0x0
   3624                {
   3625                  // Set to default values
   3626                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV     A,R6
   \   00001F   75F021       MOV     B,#0x21
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3627                }
   \   000033   0E           INC     R6
   \   000034   EE           MOV     A,R6
   \   000035   C3           CLR     C
   \   000036   9403         SUBB    A,#0x3
   \   000038   40E4         JC      ??ZDApp_InitPendingBind_1
   3628              }
   3629            }
   3630          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3631          
   3632          /*********************************************************************
   3633           * @fn          ZDApp_GetEmptyPendingBindReq
   3634           *
   3635           * @brief       This function looks for an empty entry.
   3636           *
   3637           * @param       none
   3638           *
   3639           * @return      Pointer to entry
   3640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3641          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3642          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3643            uint8 i;
   3644          
   3645            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000007   6027         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3646            {
   3647              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7C00         MOV     R4,#0x0
   3648              {
   3649                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EC           MOV     A,R4
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   A4           MUL     AB
   \   000010   F8           MOV     R0,A
   \   000011   A9F0         MOV     R1,B
   \   000013   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000016   E0           MOVX    A,@DPTR
   \   000017   28           ADD     A,R0
   \   000018   FA           MOV     R2,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   39           ADDC    A,R1
   \   00001C   FB           MOV     R3,A
   \   00001D   EA           MOV     A,R2
   \   00001E   2420         ADD     A,#0x20
   \   000020   F582         MOV     DPL,A
   \   000022   E4           CLR     A
   \   000023   3B           ADDC    A,R3
   \   000024   F583         MOV     DPH,A
   \   000026   E0           MOVX    A,@DPTR
   \   000027   600B         JZ      ??ZDApp_GetEmptyPendingBindReq_2
   3650                {
   3651                  return ( &ZDAppPendingBindReq[i] );
   3652                }
   3653              }
   \   000029   0C           INC     R4
   \   00002A   EC           MOV     A,R4
   \   00002B   C3           CLR     C
   \   00002C   9403         SUBB    A,#0x3
   \   00002E   40DB         JC      ??ZDApp_GetEmptyPendingBindReq_1
   3654            }
   3655          
   3656            // No empty entry was found
   3657            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000030   7A00         MOV     R2,#0x0
   \   000032   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   000034   02....       LJMP    ??Subroutine37_0 & 0xFFFF
   3658          }
   3659          
   3660          /*********************************************************************
   3661           * @fn          ZDApp_ProcessPendingBindReq
   3662           *
   3663           * @brief       Process pending entry based on EXT address.
   3664           *
   3665           * @param       extAddr - of device to look up
   3666           *
   3667           * @return      none
   3668           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3669          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3670          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   3671            uint8 i;
   3672          
   3673            // Loop through all the pending entries for that Ext Address
   3674            // to create Bind Entries and send Bind Rsp
   3675            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3676            {
   3677              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV     ?V0,#0x0
   3678              {
   3679                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3680                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019   E5..         MOV     A,?V0
   \   00001B   75F021       MOV     B,#0x21
   \   00001E   A4           MUL     AB
   \   00001F   FE           MOV     R6,A
   \   000020   AFF0         MOV     R7,B
   \   000022                ; Setup parameters for call to function osal_memcmp
   \   000022   85....       MOV     ?V4,?V2
   \   000025   85....       MOV     ?V5,?V3
   \   000028   75..00       MOV     ?V6,#0x0
   \   00002B   78..         MOV     R0,#?V4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000030   7C08         MOV     R4,#0x8
   \   000032   7D00         MOV     R5,#0x0
   \   000034   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000037   240B         ADD     A,#0xb
   \   000039   F5..         MOV     ?V4,A
   \   00003B   E4           CLR     A
   \   00003C   39           ADDC    A,R1
   \   00003D   A9..         MOV     R1,?V4
   \   00003F   FA           MOV     R2,A
   \   000040   7B00         MOV     R3,#0x0
   \   000042   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   E9           MOV     A,R1
   \   00004B   6401         XRL     A,#0x1
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3681                {
   3682                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   748C         MOV     A,#-0x74
   \   00005A   F0           MOVX    @DPTR,A
   3683          
   3684                  // Add Bind entry
   3685                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3686                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3687                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3688                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   00005B   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   2E           ADD     A,R6
   \   000060   F5..         MOV     ?V4,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   3F           ADDC    A,R7
   \   000065   F5..         MOV     ?V5,A
   \   000067                ; Setup parameters for call to function APSME_BindRequest
   \   000067   E5..         MOV     A,?V4
   \   000069   2414         ADD     A,#0x14
   \   00006B   F582         MOV     DPL,A
   \   00006D   E4           CLR     A
   \   00006E   35..         ADDC    A,?V5
   \   000070   F583         MOV     DPH,A
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V1,A
   \   000075   78..         MOV     R0,#?V1
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   E5..         MOV     A,?V4
   \   00007C   240B         ADD     A,#0xb
   \   00007E   FC           MOV     R4,A
   \   00007F   E4           CLR     A
   \   000080   35..         ADDC    A,?V5
   \   000082   FD           MOV     R5,A
   \   000083   85..82       MOV     DPL,?V4
   \   000086   85..83       MOV     DPH,?V5
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000095   85..82       MOV     DPL,?V4
   \   000098   85..83       MOV     DPH,?V5
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000A8   7401         MOV     A,#0x1
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD   E9           MOV     A,R1
   \   0000AE   700B         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3689                  {
   3690                    // valid entry
   3691                    bindStat = ZDP_SUCCESS;
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   E4           CLR     A
   \   0000B7   F0           MOVX    @DPTR,A
   3692          
   3693                    // Notify to save info into NV
   3694                    ZDApp_NVUpdate();
   \   0000B8                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000B8   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3695                  }
   3696          
   3697                  // Send back a response message
   3698                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3699                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000BB   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000BE   F5..         MOV     ?V1,A
   \   0000C0   78..         MOV     R0,#?V1
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C5   7401         MOV     A,#0x1
   \   0000C7   12....       LCALL   ?XSTACK_DISP100_8
   \   0000CA   88..         MOV     ?V4,R0
   \   0000CC   89..         MOV     ?V5,R1
   \   0000CE   78..         MOV     R0,#?V4
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D3   75..21       MOV     ?V4,#0x21
   \   0000D6   75..80       MOV     ?V5,#-0x80
   \   0000D9   78..         MOV     R0,#?V4
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DE   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000E1   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   0000E3   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   0000E4   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000E7   7405         MOV     A,#0x5
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
   3700          
   3701                  // Set the pending request entry to default values
   3702                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000EC                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000EC   12....       LCALL   ?Subroutine32 & 0xFFFF
   3703                }
   3704              }
   \                     ??CrossCallReturnLabel_34:
   \   0000EF   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000F2   05..         INC     ?V0
   \   0000F4   E5..         MOV     A,?V0
   \   0000F6   C3           CLR     C
   \   0000F7   9403         SUBB    A,#0x3
   \   0000F9   5003         JNC     $+5
   \   0000FB   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3705            }
   3706          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000FE   7401         MOV     A,#0x1
   \   000100   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EA           MOV     A,R2
   \   000003   2415         ADD     A,#0x15
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3B           ADDC    A,R3
   \   000008   FD           MOV     R5,A
   \   000009   EA           MOV     A,R2
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003   EA           MOV     A,R2
   \   000004   241E         ADD     A,#0x1e
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   3B           ADDC    A,R3
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET
   3707          
   3708          /*********************************************************************
   3709           * @fn          ZDApp_AgeOutPendingBindEntry
   3710           *
   3711           * @brief       Age out pending Bind Req entries.
   3712           *
   3713           * @param       none
   3714           *
   3715           * @return      none
   3716           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3717          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3718          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3719            uint8 i;
   3720            bool entryFound = FALSE;
   \   00000A   75..00       MOV     ?V0,#0x0
   3721          
   3722            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3723            {
   3724              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV     ?V1,#0x0
   3725              {
   3726                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV     A,?V1
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   FE           MOV     R6,A
   \   00001F   AFF0         MOV     R7,B
   \   000021   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000024   2420         ADD     A,#0x20
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   39           ADDC    A,R1
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   C3           CLR     C
   \   00002F   9402         SUBB    A,#0x2
   \   000031   4009         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3727                {
   3728                  ZDAppPendingBindReq[i].age--;
   \   000033   E0           MOVX    A,@DPTR
   \   000034   14           DEC     A
   \   000035   F0           MOVX    @DPTR,A
   3729          
   3730                  entryFound = TRUE;
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3731                }
   3732                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   00003C   7401         MOV     A,#0x1
   \   00003E   6A           XRL     A,R2
   \   00003F   707F         JNZ     ??ZDApp_AgeOutPendingBindEntry_3
   3733                {
   3734                  // The record has aged out and has valid data
   3735                  AddrMgrEntry_t entry;
   3736                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   748C         MOV     A,#-0x74
   \   000049   F0           MOVX    @DPTR,A
   3737          
   3738                  entry.user = ADDRMGR_USER_BINDING;
   \   00004A   7401         MOV     A,#0x1
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   7404         MOV     A,#0x4
   \   000051   F0           MOVX    @DPTR,A
   3739          
   3740                  // Remove the entry in address manager so we do not keep entries
   3741                  // with invalid addresses
   3742                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000052                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000052   E8           MOV     A,R0
   \   000053   240B         ADD     A,#0xb
   \   000055   FC           MOV     R4,A
   \   000056   E4           CLR     A
   \   000057   39           ADDC    A,R1
   \   000058   FD           MOV     R5,A
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3743          
   3744                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000065                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000065   7401         MOV     A,#0x1
   \   000067   12....       LCALL   ?XSTACK_DISP101_8
   \   00006A   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00006D   E9           MOV     A,R1
   \   00006E   6401         XRL     A,#0x1
   \   000070   7017         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3745                  {
   3746                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   000072   7402         MOV     A,#0x2
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   64FE         XRL     A,#0xfe
   \   00007A   7003         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F4           CPL     A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   00007F   7008         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3747                    {
   3748                      // Release the entry that contains an invalid NWK address
   3749                      AddrMgrEntryRelease( &entry );
   \   000081                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000081   7401         MOV     A,#0x1
   \   000083   12....       LCALL   ?XSTACK_DISP101_8
   \   000086   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3750                    }
   3751                  }
   3752          
   3753                  // Send the Bind Response with failure status
   3754                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3755                               &(ZDAppPendingBindReq[i].srcAddr),
   3756                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000089   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00008C   F5..         MOV     ?V2,A
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?XSTACK_DISP100_8
   \   000098   88..         MOV     ?V2,R0
   \   00009A   89..         MOV     ?V3,R1
   \   00009C   78..         MOV     R0,#?V2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   75..21       MOV     ?V2,#0x21
   \   0000A4   75..80       MOV     ?V3,#-0x80
   \   0000A7   78..         MOV     R0,#?V2
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000AF   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0000B1   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000B2   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000B5   7405         MOV     A,#0x5
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   3757          
   3758                  // Clear the record and set to default values
   3759                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000BA                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000BA   12....       LCALL   ?Subroutine32 & 0xFFFF
   3760                }
   3761              }
   \                     ??CrossCallReturnLabel_35:
   \   0000BD   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000C0   05..         INC     ?V1
   \   0000C2   E5..         MOV     A,?V1
   \   0000C4   C3           CLR     C
   \   0000C5   9403         SUBB    A,#0x3
   \   0000C7   5003         JNC     $+5
   \   0000C9   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3762            }
   3763          
   3764            if ( entryFound == FALSE )
   \   0000CC   E5..         MOV     A,?V0
   \   0000CE   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000D0   400E         JC      ??ZDApp_AgeOutPendingBindEntry_7
   3765            {
   3766              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000D2                ; Setup parameters for call to function osal_stop_timerEx
   \   0000D2   7A00         MOV     R2,#0x0
   \   0000D4   7B10         MOV     R3,#0x10
   \   0000D6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F9           MOV     R1,A
   \   0000DB   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000DE   8017         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3767            }
   3768            else
   3769            {
   3770              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3771                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000E0                ; Setup parameters for call to function osal_start_timerEx
   \   0000E0   90....       MOV     DPTR,#__Constant_3e8
   \   0000E3   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000E6   7A00         MOV     R2,#0x0
   \   0000E8   7B10         MOV     R3,#0x10
   \   0000EA   90....       MOV     DPTR,#ZDAppTaskID
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000F2   7404         MOV     A,#0x4
   \   0000F4   12....       LCALL   ?DEALLOC_XSTACK8
   3772            }
   3773          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   0000F7   740E         MOV     A,#0xe
   \   0000F9   80..         SJMP    ??Subroutine50_0
   3774          #endif
   3775          #endif
   3776          
   3777          /*********************************************************************
   3778           * @fn          ZDO_ChangeState
   3779           *
   3780           * @brief       Chance the device state
   3781           *
   3782           * @param       state - new state
   3783           *
   3784           * @return      none
   3785           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3786          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3787          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3788            if ( devState != state )
   \   000007   90....       MOV     DPTR,#devState
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6E           XRL     A,R6
   \   00000C   600E         JZ      ??ZDApp_ChangeState_0
   3789            {
   3790              devState = state;
   \   00000E   EE           MOV     A,R6
   \   00000F   F0           MOVX    @DPTR,A
   3791              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   7A10         MOV     R2,#0x10
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3792            }
   3793          }
   \                     ??ZDApp_ChangeState_0:
   \   00001C   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3794          
   3795          /*********************************************************************
   3796           * @fn      ZDApp_SetRejoinScanDuration()
   3797           *
   3798           * @brief   Sets scan duration for rejoin for an end device
   3799           *
   3800           * @param   rejoinScanDuration - milliseconds
   3801           *
   3802           * @return  none
   3803           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3804          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   3805          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   3806            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV     DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine10
   \   000010                ; // Fall through to label ?Subroutine10
   3807          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   78..         MOV     R0,#?V0
   \   000002   12....       LCALL   ?L_MOV_TO_X
   \   000005   80..         SJMP    ??Subroutine51_0
   3808          
   3809          /*********************************************************************
   3810           * @fn      ZDApp_SetRejoinBackoffDuration()
   3811           *
   3812           * @brief   Sets rejoin backoff duration for rejoin for an end device
   3813           *
   3814           * @param   rejoinBackoffDuration - milliseconds
   3815           *
   3816           * @return  none
   3817           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3818          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   3819          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   3820            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV     DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP    ?Subroutine10
   3821          }
   3822          
   3823          /*********************************************************************
   3824           * @fn          ZDApp_SetParentAnnceTimer
   3825           *
   3826           * @brief       This function sets up the link status timer.
   3827           *
   3828           * @param       none
   3829           *
   3830           * @return      none
   3831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3832          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   3833          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3834            // Parent Announce shall be sent no earlier than 10 seconds
   3835            uint32 timeout = 10000;
   3836          
   3837            // Add with jitter of up to 10 seconds
   3838            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   3839          
   3840            // Set timer to send the message
   3841            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV     A,R2
   \   000009   5410         ANL     A,#0x10
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   EB           MOV     A,R3
   \   00000E   5427         ANL     A,#0x27
   \   000010   F5..         MOV     ?V1,A
   \   000012   E4           CLR     A
   \   000013   F5..         MOV     ?V2,A
   \   000015   F5..         MOV     ?V3,A
   \   000017   90....       MOV     DPTR,#__Constant_2710
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?L_ADD_X
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B40         MOV     R3,#0x40
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP    ?Subroutine5 & 0xFFFF
   3842          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNetworkState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetPendingBindDefault::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitPendingBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_GetEmptyPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AgeOutPendingBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinScanDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinScanDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinBackoffDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinBackoffDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetParentAnnceTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetParentAnnceTimer

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Coordinator started">`:
   \   000000   436F6F72     DB "Coordinator started"
   \            64696E61
   \            746F7220
   \            73746172
   \            74656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NetworkFormationConfi...">`:
   \   000000   4E657477     DB "NetworkFormationConfirm failure"
   \            6F726B46
   \            6F726D61
   \            74696F6E
   \            436F6E66
   \            69726D20
   \            6661696C
   \            75726500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Router started">`:
   \   000000   526F7574     DB "Router started"
   \            65722073
   \            74617274
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartRouterConfirm fa...">`:
   \   000000   53746172     DB "StartRouterConfirm failure"
   \            74526F75
   \            74657243
   \            6F6E6669
   \            726D2066
   \            61696C75
   \            726500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "JoinConfirm device jo...">`:
   \   000000   4A6F696E     DB "JoinConfirm device joined"
   \            436F6E66
   \            69726D20
   \            64657669
   \            6365206A
   \            6F696E65
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "JoinConfirm failure">`:
   \   000000   4A6F696E     DB "JoinConfirm failure"
   \            436F6E66
   \            69726D20
   \            6661696C
   \            75726500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2bc:
   \   000000   BC020000     DD 700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
   3843          
   3844          /*********************************************************************
   3845          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     32   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      2      9   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     16   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     45   ZDApp_AgeOutPendingBindEntry
        0     26   -> AddrMgrEntryLookupExt
        0     26   -> AddrMgrEntryRelease
        0     26   -> AddrMgrExtAddrSet
        0     26   -> ZDApp_SetPendingBindDefault
        0     31   -> ZDP_SendData
        0     30   -> osal_start_timerEx
        0     26   -> osal_stop_timerEx
      0     25   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     24   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2     16   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDAppCheckForHoldKey
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_InitUserDesc
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     18   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     40   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     30   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     26   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_clear_event
        0     10   -> osal_rand
        0     10   -> osal_stop_timerEx
        0     10   -> sAddrExtCpy
      0     51   ZDApp_LeaveUpdate
        0     32   -> APSME_UpdateDeviceReq
        0     32   -> AddrMgrWriteNVRequest
        0     32   -> NLME_RemoveChild
        0     32   -> RTG_RemoveRtgEntry
        0     32   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrDeviceRemoveByExtAddr
        0     32   -> nwkNeighborRemove
        0     35   -> osal_memcpy
      2     20   ZDApp_NVUpdate
        2      0   -> osal_set_event
        2      4   -> osal_start_timerEx
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     32   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2     14   ZDApp_NetworkStartEvt
        2      0   -> AddrMgrWriteNVRequest
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     24   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     29   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     50   ZDApp_ProcessMsgCBs
        0     35   -> ZDApp_ProcessPendingBindReq
        0     35   -> ZDO_ParseAddrRsp
        0     35   -> ZDO_ParseBindUnbindReq
        0     35   -> ZDO_ProcessBindUnbindReq
        0     35   -> ZDO_UpdateAddrManager
        0     35   -> osal_mem_free
      0     27   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> NLME_StartRouterRequest
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_ChangeState
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ResetTimerStart
        0     12   -> ZDApp_RestoreNwkKey
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     12   -> osal_stop_timerEx
      0     33   ZDApp_ProcessOSALMsg
        0     19   -> NLME_JoinRequest
        0     15   -> NLME_ReJoinRequest
        0     15   -> NLME_ReJoinRequestUnsecure
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_ChangeState
        0     15   -> ZDApp_NetworkInit
        0     15   -> ZDApp_NodeProfileSync
        0     15   -> ZDApp_NwkDescListProcessing
        0     15   -> ZDApp_ProcessMsgCBs
        0     15   -> ZDApp_ProcessNetworkJoin
        0     15   -> ZDApp_ProcessSecMsg
        0     15   -> ZDApp_RestoreNwkKey
        0     15   -> ZDP_IncomingData
        0     15   -> ZMacSetReq
        0     19   -> osal_nv_read
        0     15   -> osal_rand
        0     15   -> sAddrExtCpy
      0     56   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_NVUpdate
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     34   ZDApp_ProcessSecEvent
        0     16   -> ZDApp_DeviceAuthEvt
        0     16   -> ZDApp_SaveNwkKey
        0     16   -> ZDSecMgrNewDeviceEvent
        0     16   -> ZDSecMgrSaveApsLinkKey
        0     16   -> ZDSecMgrSaveTCLinkKey
        0     16   -> osal_mem_free
        0     20   -> osal_start_timerEx
      2     15   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrRemoveDeviceInd
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0     25   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     28   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     25   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> sAddrExtCpy
      0     68   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     51   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     41   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     36   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0     41   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     30   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     35   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_NetworkStartEvt
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDApp_SendParentAnnce
        0     14   -> ZDApp_SetParentAnnceTimer
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     25   ZDOInitDevice
        0     16   -> NLME_InitNV
        0     16   -> NLME_SetBroadcastFilter
        0     16   -> NLME_SetDefaultNV
        0     16   -> ZDAppDetermineDeviceType
        0     16   -> ZDApp_LeaveCtrlInit
        0     16   -> ZDApp_NetworkInit
        0     16   -> ZDApp_ReadNetworkRestoreState
        0     16   -> ZDApp_RestoreNetworkState
        0     16   -> ZDApp_SecInit
        0     16   -> ZDConfig_InitDescriptors
        0     16   -> ZDSecMgrClearNVKeyValues
        0     16   -> osal_rand
        0     16   -> zgInitItems
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     14   ZDO_JoinConfirmCB
        0     14   -> HalLedSet
        0     14   -> UART_DebugPrint
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_SendMsg
      0     21   ZDO_JoinIndicationCB
        0     16   -> ZDApp_NVUpdate
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> ZDApp_LeaveUpdate
        0     10   -> sAddrExtCmp
      1     16   ZDO_LeaveInd
        0     16   -> NLME_GetCoordShortAddr
        0     16   -> NLME_LeaveRsp
        0     16   -> ZDApp_LeaveReset
        0     16   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> UART_DebugPrint
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> UART_DebugPrint
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDO_SyncIndicationCB
      0      0   ZDO_UpdateDeviceIndication
      1     18   ZDO_beaconNotifyIndCB
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "Coordinator started">
      26  ?<Constant "JoinConfirm device jo...">
      20  ?<Constant "JoinConfirm failure">
      32  ?<Constant "NetworkFormationConfi...">
      15  ?<Constant "Router started">
      27  ?<Constant "StartRouterConfirm fa...">
       4  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devState>
       1  ?<Initializer for prevDevState>
       1  ?<Initializer for zdoDiscCounter>
      10  ??Subroutine34_0
       5  ??Subroutine35_0
      10  ??Subroutine36_0
       7  ??Subroutine37_0
       3  ??Subroutine38_0
       5  ??Subroutine39_0
       6  ??Subroutine40_0
       6  ??Subroutine41_0
       8  ??Subroutine42_0
       6  ??Subroutine43_0
       5  ??Subroutine44_0
       6  ??Subroutine45_0
       8  ??Subroutine46_0
       6  ??Subroutine47_0
       6  ??Subroutine48_0
       6  ??Subroutine49_0
       3  ??Subroutine50_0
       5  ??Subroutine51_0
      10  ?Subroutine0
       3  ?Subroutine1
       7  ?Subroutine10
       2  ?Subroutine11
       2  ?Subroutine12
       2  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
       6  ?Subroutine16
       3  ?Subroutine17
      14  ?Subroutine18
       3  ?Subroutine19
       5  ?Subroutine2
       4  ?Subroutine20
       4  ?Subroutine21
      14  ?Subroutine22
       9  ?Subroutine23
       9  ?Subroutine24
       3  ?Subroutine25
      11  ?Subroutine26
      12  ?Subroutine27
       5  ?Subroutine28
       9  ?Subroutine29
       3  ?Subroutine3
      11  ?Subroutine30
      14  ?Subroutine31
      11  ?Subroutine32
      15  ?Subroutine33
      35  ?Subroutine4
       2  ?Subroutine5
       8  ?Subroutine6
       2  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
      28  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
       1  MatchRsps
      24  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      81  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     251  ZDApp_AgeOutPendingBindEntry
       6  ZDApp_AgeOutPendingBindEntry::?relay
      59  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      31  ZDApp_ChangeState
       6  ZDApp_ChangeState::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      76  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      87  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     129  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
      55  ZDApp_GetEmptyPendingBindReq
       6  ZDApp_GetEmptyPendingBindReq::?relay
     103  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      91  ZDApp_Init
       6  ZDApp_Init::?relay
      61  ZDApp_InitPendingBind
       6  ZDApp_InitPendingBind::?relay
     111  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      26  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      73  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      75  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      13  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      22  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      47  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
     167  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     198  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
      52  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      11  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      57  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
     116  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      45  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     301  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      28  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     150  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     495  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     705  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     259  ZDApp_ProcessPendingBindReq
       6  ZDApp_ProcessPendingBindReq::?relay
     224  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      73  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      23  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      55  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      66  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      31  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      57  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
      77  ZDApp_RestoreNetworkState
       6  ZDApp_RestoreNetworkState::?relay
     218  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
      19  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      75  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       4  ZDApp_SavedPollRate
     131  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      22  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      91  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
     115  ZDApp_SendParentAnnce
       6  ZDApp_SendParentAnnce::?relay
      51  ZDApp_SetParentAnnceTimer
       6  ZDApp_SetParentAnnceTimer::?relay
      32  ZDApp_SetPendingBindDefault
       6  ZDApp_SetPendingBindDefault::?relay
      18  ZDApp_SetRejoinBackoffDuration
       6  ZDApp_SetRejoinBackoffDuration::?relay
      16  ZDApp_SetRejoinScanDuration
       6  ZDApp_SetRejoinScanDuration::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      36  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     369  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     189  ZDOInitDevice
       6  ZDOInitDevice::?relay
     107  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      48  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      27  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     155  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     218  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
     100  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     180  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      64  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      80  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      10  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      37  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      27  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      48  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      80  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
       3  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       5  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     625  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_0
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_2bc
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter

 
 8 292 bytes in segment BANKED_CODE
   468 bytes in segment BANK_RELAYS
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
   168 bytes in segment XDATA_ROM_C
    66 bytes in segment XDATA_Z
 
   482 bytes of CODE     memory
   140 bytes of CONST    memory (+ 28 bytes shared)
 8 292 bytes of HUGECODE memory
    80 bytes of XDATA    memory

Errors: none
Warnings: none
