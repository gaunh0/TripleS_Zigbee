///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               11/Mar/2017  09:26:51
// Copyright 2004-2016 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART_CMD.c
//    Command line       =  
//        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFAFA
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART_CMD.c"
//        -D END_DEVICE_SENSOR -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D
//        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_TEMPERATURE_MEASUREMENT -D HAL_UART=TRUE -D HAL_UART_DMA=1 -lC
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\Teddy\Desktop\aaa\[COMBROS]
//        Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\HomeAutomation\MY-SOURCE\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\MS_UART_CMD.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MS_UART_CMD

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??ZCMD_MatchCMD::?relay`,0203H
        FUNCTION `??ZCMD_ProcessCMD::?relay`,0203H
        PUBLIC `??ZCMD_ReplyCMD::?relay`
        FUNCTION `??ZCMD_ReplyCMD::?relay`,0203H
        PUBLIC FLAG_ECHO_RDATA
        PUBLIC FLAG_ECHO_SDATA
        PUBLIC Free_Data
        PUBLIC Free_Data_Size
        FUNCTION ZCMD_MatchCMD,021203H
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZCMD_ProcessCMD,0a1203H
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZCMD_ReplyCMD
        FUNCTION ZCMD_ReplyCMD,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        PUBLIC pcmdData
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
UART_DebugPrint     SYMBOL "UART_DebugPrint"
`??UART_DebugPrint::?relay` SYMBOL "?relay", UART_DebugPrint
UART_DebugPrintNum  SYMBOL "UART_DebugPrintNum"
`??UART_DebugPrintNum::?relay` SYMBOL "?relay", UART_DebugPrintNum
UART_GetData        SYMBOL "UART_GetData"
`??UART_GetData::?relay` SYMBOL "?relay", UART_GetData
UART_ParseLength    SYMBOL "UART_ParseLength"
`??UART_ParseLength::?relay` SYMBOL "?relay", UART_ParseLength
UART_ZCmdPrint      SYMBOL "UART_ZCmdPrint"
`??UART_ZCmdPrint::?relay` SYMBOL "?relay", UART_ZCmdPrint
UART_ZCmdPrintNum   SYMBOL "UART_ZCmdPrintNum"
`??UART_ZCmdPrintNum::?relay` SYMBOL "?relay", UART_ZCmdPrintNum
UART_ZCmdPrintString SYMBOL "UART_ZCmdPrintString"
`??UART_ZCmdPrintString::?relay` SYMBOL "?relay", UART_ZCmdPrintString
strstr              SYMBOL "strstr"
`??strstr::?relay`  SYMBOL "?relay", strstr
zclSampleTemperatureSensor_BindingProcess SYMBOL "zclSampleTemperatureSensor_BindingProcess"
`??zclSampleTemperatureSensor_BindingProcess::?r` SYMBOL "?relay", zclSampleTemperatureSensor_BindingProcess
ZCMD_ReplyCMD       SYMBOL "ZCMD_ReplyCMD"
`??ZCMD_ReplyCMD::?relay` SYMBOL "?relay", ZCMD_ReplyCMD

        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??UART_DebugPrint::?relay`
        FUNCTION `??UART_DebugPrint::?relay`,00H
        EXTERN `??UART_DebugPrintNum::?relay`
        FUNCTION `??UART_DebugPrintNum::?relay`,00H
        EXTERN `??UART_GetData::?relay`
        FUNCTION `??UART_GetData::?relay`,00H
        EXTERN `??UART_ParseLength::?relay`
        FUNCTION `??UART_ParseLength::?relay`,00H
        EXTERN `??UART_ZCmdPrint::?relay`
        FUNCTION `??UART_ZCmdPrint::?relay`,00H
        EXTERN `??UART_ZCmdPrintNum::?relay`
        FUNCTION `??UART_ZCmdPrintNum::?relay`,00H
        EXTERN `??UART_ZCmdPrintString::?relay`
        FUNCTION `??UART_ZCmdPrintString::?relay`,00H
        EXTERN `??strstr::?relay`
        FUNCTION `??strstr::?relay`,00H
        EXTERN `??zclSampleTemperatureSensor_BindingProcess::?r`
        FUNCTION `??zclSampleTemperatureSensor_BindingProcess::?r`,00H
        EXTERN FLAG_BINDING
        EXTERN FLAG_HARD_BINDING
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_DebugPrint
        FUNCTION UART_DebugPrint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_DebugPrintNum
        FUNCTION UART_DebugPrintNum,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_GetData
        FUNCTION UART_GetData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_ParseLength
        FUNCTION UART_ParseLength,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_ZCmdPrint
        FUNCTION UART_ZCmdPrint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_ZCmdPrintNum
        FUNCTION UART_ZCmdPrintNum,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_ZCmdPrintString
        FUNCTION UART_ZCmdPrintString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strstr
        FUNCTION strstr,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleTemperatureSensor_BindingProcess
        FUNCTION zclSampleTemperatureSensor_BindingProcess,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\MY-SOURCE\MS_UART_CMD.c
//    1 /*******************************************************************************
//    2  *                                            INCLUDES
//    3  *******************************************************************************/
//    4 #include "MS_UART_CMD.h"
//    5 #include "MS_UART.h"
//    6 #include "string.h"
//    7 
//    8 #include "zcl.h"
//    9 #include "zcl_general.h"
//   10 #include "zcl_ha.h"
//   11 #include "zcl_ezmode.h"
//   12 #include "zcl_hvac.h"
//   13 #include "zcl_ms.h"
//   14 
//   15 #if 	(defined COORDINATOR) || (defined ROUTER)
//   16 	#include "zcl_samplethermostat.h" 
//   17 #elif (defined END_DEVICE_SENSOR)
//   18 	#include "zcl_sampletemperaturesensor.h"
//   19 #elif (defined END_DEVICE_ENGINE)
//   20 	#include "zcl_sampleheatingcoolingunit.h"
//   21 #endif
//   22 
//   23 /*******************************************************************************
//   24  *                                             MACROS
//   25  *******************************************************************************/
//   26 
//   27 /*******************************************************************************
//   28  *                                            CONSTANTS
//   29  *******************************************************************************/
//   30 #define UART_CMD_BUF_SIZE_128           			128
//   31 
//   32 #define CMD_CHECK_ALIVE												0
//   33 #define CMD_BINDING_START											1
//   34 #define CMD_BINDING_STOP											2
//   35 #define CMD_RETURN_SHORT_ADDRESS							3
//   36 #define CMD_RETURN_COORD_SHORT_ADDRESS				4
//   37 #define CMD_ENABLE_ECHO_SDATA									5
//   38 #define CMD_DISABLE_ECHO_SDATA								6
//   39 #define CMD_ENABLE_ECHO_RDATA									7
//   40 #define CMD_DISABLE_ECHO_RDATA								8
//   41 #define CMD_SEND_FREE_DATA										10
//   42 #define CMD_SEND_CONTROL                              11
//   43 
//   44 
//   45 /*******************************************************************************
//   46  *                                             TYPEDEFS
//   47  *******************************************************************************/
//   48 
//   49 /*******************************************************************************
//   50  *                                         GLOBAL VARIABLES
//   51  *******************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   52 static uint16 packageLength = 0;
packageLength:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   53 char* pcmdData;
pcmdData:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   54 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   55 bool FLAG_ECHO_SDATA 	= FALSE;
FLAG_ECHO_SDATA:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   56 bool FLAG_ECHO_RDATA 	= FALSE;
FLAG_ECHO_RDATA:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   57 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   58 char		Free_Data[FREE_DATA_BFR_SIZE + 1];
Free_Data:
        DS 21
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   59 uint8 	Free_Data_Size;
Free_Data_Size:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   60 
//   61 /*******************************************************************************
//   62  *                                          FUNCTIONS - External
//   63  *******************************************************************************/
//   64 
//   65 /*******************************************************************************
//   66  *                                          FUNCTIONS - Local
//   67  *******************************************************************************/
//   68 static char* ZCMD_MatchCMD(char* buf, char* str);
//   69 static uint8 ZCMD_FindChrStr(char* buf, uint8 chr);
//   70 static void ZCMD_ProcessCMD(uint8 CMD);
//   71 /*******************************************************************************
//   72  *                                          FUNCTIONS - API
//   73  *******************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   74 void ZCMD_ReplyCMD(void)
ZCMD_ReplyCMD:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZCMD_ReplyCMD
        CODE
//   75 {
        FUNCALL ZCMD_ReplyCMD, UART_ParseLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, UART_GetData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, UART_DebugPrintNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_MatchCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, ZCMD_ProcessCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ReplyCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 138, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 138, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 128
        MOV     A,#-0x80
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 138)
//   76 	char Rx0_tmpBuffer[UART_CMD_BUF_SIZE_128];
//   77 	packageLength = UART_ParseLength(HAL_UART_PORT_0);
        ; Setup parameters for call to function UART_ParseLength
        MOV     R1,#0x0
        LCALL   `??UART_ParseLength::?relay`; Banked call to: UART_ParseLength
        MOV     A,R1
        MOV     DPTR,#packageLength
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   78 	
//   79 	UART_GetData(HAL_UART_PORT_0, (uint8*)Rx0_tmpBuffer, packageLength);
        ; Setup parameters for call to function UART_GetData
        MOV     DPTR,#packageLength
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??UART_GetData::?relay`; Banked call to: UART_GetData
//   80 	UART_DebugPrintNum(HAL_UART_PORT_0, packageLength);
        ; Setup parameters for call to function UART_DebugPrintNum
        MOV     DPTR,#packageLength
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,?V0
        MOV     R3,A
        CLR     A
        MOV     R4,A
        MOV     R5,A
        MOV     R1,A
        LCALL   `??UART_DebugPrintNum::?relay`; Banked call to: UART_DebugPrintNum
//   81 	UART_DebugPrint(HAL_UART_PORT_0, " ");
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant " ">` & 0xff
        MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
//   82 
//   83 	if ( Rx0_tmpBuffer[0] == '@' && Rx0_tmpBuffer[1] == 'Z' &&
//   84 		 	 Rx0_tmpBuffer[2] == 'B' && Rx0_tmpBuffer[packageLength-1] == '!' &&
//   85 		 	 ZCMD_FindChrStr(Rx0_tmpBuffer, '!') )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x40
        JZ      $+5
        LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x5a
        JZ      $+5
        LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x42
        JZ      $+5
        LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
        MOV     DPTR,#packageLength
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V1,R1
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x21
        JZ      $+5
        LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
        MOV     R5,#0x0
        MOV     R4,#0x0
        SJMP    ??ZCMD_ReplyCMD_1
??ZCMD_ReplyCMD_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,DPH
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x21
        JNZ     ??ZCMD_ReplyCMD_3
        INC     R5
??ZCMD_ReplyCMD_3:
        INC     R4
??ZCMD_ReplyCMD_1:
        MOV     A,R4
        MOV     R0,A
        MOV     DPTR,#packageLength
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        CLR     A
        SUBB    A,R3
        JC      ??ZCMD_ReplyCMD_2
        MOV     A,#0x1
        XRL     A,R5
        JZ      $+5
        LJMP    ??ZCMD_ReplyCMD_0 & 0xFFFF
//   86 	{
//   87 		// Check alive
//   88 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB!"))
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB!">` & 0xff
        MOV     R5,#(`?<Constant "@ZB!">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_4
//   89 		{
//   90 			ZCMD_ProcessCMD(CMD_CHECK_ALIVE);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0x0
        LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
//   91 			return;
//   92 		}
//   93 		
//   94 		// Binding STOP
//   95 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+BIND=0!"))
??ZCMD_ReplyCMD_4:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+BIND=0!">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+BIND=0!">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_6
//   96 		{
//   97 			ZCMD_ProcessCMD(CMD_BINDING_STOP);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0x2
        LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
//   98 			return;
//   99 		}
//  100 		
//  101 		// Binding START
//  102 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+BIND=1!"))
??ZCMD_ReplyCMD_6:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+BIND=1!">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+BIND=1!">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_7
//  103 		{
//  104 			ZCMD_ProcessCMD(CMD_BINDING_START);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0x1
        LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
//  105 			return;
//  106 		}
//  107 		
//  108 		// Get Short Address
//  109 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+SHORTADDR!"))
??ZCMD_ReplyCMD_7:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+SHORTADDR!">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+SHORTADDR!">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_8
//  110 		{
//  111 			ZCMD_ProcessCMD(CMD_RETURN_SHORT_ADDRESS);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0x3
        LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
//  112 			return;
//  113 		}
//  114 
//  115 		// Get Coord Short Address
//  116 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+COORDSHORTADDR!"))
??ZCMD_ReplyCMD_8:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+COORDSHORTADDR!">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+COORDSHORTADDR!">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_9
//  117 		{
//  118 			ZCMD_ProcessCMD(CMD_RETURN_COORD_SHORT_ADDRESS);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0x4
        LJMP    ??ZCMD_ReplyCMD_5 & 0xFFFF
//  119 			return;
//  120 		}
//  121 
//  122 		// Disable Echo SEND Data
//  123 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+ECHOSDATA=0!"))
??ZCMD_ReplyCMD_9:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+ECHOSDATA=0!">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+ECHOSDATA=0!">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_10
//  124 		{
//  125 			ZCMD_ProcessCMD(CMD_DISABLE_ECHO_SDATA);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0x6
        SJMP    ??ZCMD_ReplyCMD_5
//  126 			return;
//  127 		}
//  128 
//  129 		// Enable Echo SEND Data
//  130 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+ECHOSDATA=1!"))
??ZCMD_ReplyCMD_10:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+ECHOSDATA=1!">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+ECHOSDATA=1!">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_11
//  131 		{		
//  132 			ZCMD_ProcessCMD(CMD_ENABLE_ECHO_SDATA);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0x5
        SJMP    ??ZCMD_ReplyCMD_5
//  133 			return;
//  134 		}
//  135 
//  136 		// Disable Echo RECEIVE Data
//  137 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+ECHORDATA=0!"))
??ZCMD_ReplyCMD_11:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+ECHORDATA=0!">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+ECHORDATA=0!">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_12
//  138 		{
//  139 			ZCMD_ProcessCMD(CMD_DISABLE_ECHO_RDATA);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0x8
        SJMP    ??ZCMD_ReplyCMD_5
//  140 			return;
//  141 		}
//  142 
//  143 		// Enable Echo RECEIVE Data
//  144 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+ECHORDATA=1!"))
??ZCMD_ReplyCMD_12:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+ECHORDATA=1!">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+ECHORDATA=1!">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_13
//  145 		{		
//  146 			ZCMD_ProcessCMD(CMD_ENABLE_ECHO_RDATA);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0x7
        SJMP    ??ZCMD_ReplyCMD_5
//  147 			return;
//  148 		}
//  149 
//  150 		// Send FREE DATA - Only for ZB Coordinator
//  151 		if (ZCMD_MatchCMD(Rx0_tmpBuffer, "@ZB+DATA="))
??ZCMD_ReplyCMD_13:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+DATA=">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+DATA=">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_14
//  152 		{		
//  153 			ZCMD_ProcessCMD(CMD_SEND_FREE_DATA);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0xa
        SJMP    ??ZCMD_ReplyCMD_5
//  154 			return;
//  155 		}
//  156 		// control led -  only for ZBC
//  157 		if (ZCMD_MatchCMD(Rx0_tmpBuffer,"@ZB+CONTROL="))
??ZCMD_ReplyCMD_14:
        ; Setup parameters for call to function ZCMD_MatchCMD
        MOV     R4,#`?<Constant "@ZB+CONTROL=">` & 0xff
        MOV     R5,#(`?<Constant "@ZB+CONTROL=">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZCMD_MatchCMD::?relay`; Banked call to: ZCMD_MatchCMD
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??ZCMD_ReplyCMD_0
//  158 		{
//  159 			ZCMD_ProcessCMD(CMD_SEND_CONTROL);
        ; Setup parameters for call to function ZCMD_ProcessCMD
        MOV     R1,#0xb
??ZCMD_ReplyCMD_5:
        LCALL   `??ZCMD_ProcessCMD::?relay`; Banked call to: ZCMD_ProcessCMD
//  160 			return;
        SJMP    ??ZCMD_ReplyCMD_15
//  161 		}
//  162 		
//  163 	}
//  164 	UART_ZCmdPrint(HAL_UART_PORT_0, "ERROR");		
??ZCMD_ReplyCMD_0:
        ; Setup parameters for call to function UART_ZCmdPrint
        MOV     R2,#`?<Constant "ERROR">` & 0xff
        MOV     R3,#(`?<Constant "ERROR">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
//  165 }
??ZCMD_ReplyCMD_15:
        MOV     A,#-0x80
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  166 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  167 void ZCMD_ProcessCMD(uint8 CMD)
ZCMD_ProcessCMD:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZCMD_ProcessCMD
        CODE
//  168 {
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, zclSampleTemperatureSensor_BindingProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, zclSampleTemperatureSensor_BindingProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrintNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrintString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrintNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrintString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZCMD_ProcessCMD, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  169 	switch (CMD)
        MOV     R2,#`?<Constant "OK">` & 0xff
        MOV     R3,#(`?<Constant "OK">` >> 8) & 0xff
        MOV     A,R1
        JZ      ??ZCMD_ProcessCMD_0
        DEC     A
        JZ      ??ZCMD_ProcessCMD_1
        DEC     A
        JZ      ??ZCMD_ProcessCMD_2
        DEC     A
        JZ      ??ZCMD_ProcessCMD_3
        DEC     A
        JZ      ??ZCMD_ProcessCMD_4
        DEC     A
        JZ      ??ZCMD_ProcessCMD_5
        DEC     A
        JZ      ??ZCMD_ProcessCMD_6
        DEC     A
        JZ      ??ZCMD_ProcessCMD_7
        DEC     A
        JZ      ??ZCMD_ProcessCMD_8
        ADD     A,#-0x2
        JZ      ??ZCMD_ProcessCMD_9
        DEC     A
        JZ      ??ZCMD_ProcessCMD_10
        SJMP    ??ZCMD_ProcessCMD_11
//  170 	{
//  171 		case CMD_CHECK_ALIVE:
//  172 			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");
??ZCMD_ProcessCMD_0:
        ; Setup parameters for call to function UART_ZCmdPrint
        SJMP    ??ZCMD_ProcessCMD_12
//  173 			break;
//  174 			
//  175 		case CMD_BINDING_STOP:
//  176 			if (FLAG_BINDING)
??ZCMD_ProcessCMD_2:
        MOV     DPTR,#FLAG_BINDING
        MOVX    A,@DPTR
        JZ      ??ZCMD_ProcessCMD_13
//  177 			{
//  178 				#if 	(defined COORDINATOR) || (defined ROUTER)
//  179 					zclSampleThermostat_BindingProcess();
//  180 				#elif (defined END_DEVICE_SENSOR)
//  181 					zclSampleTemperatureSensor_BindingProcess();
        ; Setup parameters for call to function zclSampleTemperatureSensor_BindingProcess
        LCALL   `??zclSampleTemperatureSensor_BindingProcess::?r`; Banked call to: zclSampleTemperatureSensor_BindingProcess
//  182 				#elif (defined END_DEVICE_ENGINE)
//  183 					zclSampleHeatingCoolingUnit_BindingProcess();
//  184 				#endif
//  185 				FLAG_HARD_BINDING = FALSE;
        MOV     DPTR,#FLAG_HARD_BINDING
        CLR     A
        MOVX    @DPTR,A
//  186 				UART_ZCmdPrint(HAL_UART_PORT_0, "BINDING STOPPED");
        ; Setup parameters for call to function UART_ZCmdPrint
        MOV     R2,#`?<Constant "BINDING STOPPED">` & 0xff
        MOV     R3,#(`?<Constant "BINDING STOPPED">` >> 8) & 0xff
        SJMP    ??ZCMD_ProcessCMD_14
//  187 			}
//  188 			else
//  189 			{
//  190 				UART_ZCmdPrint(HAL_UART_PORT_0, "BINDING STOP ALREADY");
??ZCMD_ProcessCMD_13:
        ; Setup parameters for call to function UART_ZCmdPrint
        MOV     R2,#`?<Constant "BINDING STOP ALREADY">` & 0xff
        MOV     R3,#(`?<Constant "BINDING STOP ALREADY">` >> 8) & 0xff
        SJMP    ??ZCMD_ProcessCMD_12
//  191 			}
//  192 			break;
//  193 
//  194 		case CMD_BINDING_START:
//  195 			if (!FLAG_BINDING)
??ZCMD_ProcessCMD_1:
        MOV     DPTR,#FLAG_BINDING
        MOVX    A,@DPTR
        JNZ     ??ZCMD_ProcessCMD_15
//  196 			{
//  197 				#if 	(defined COORDINATOR) || (defined ROUTER)
//  198 					zclSampleThermostat_BindingProcess();
//  199 				#elif (defined END_DEVICE_SENSOR)
//  200 					zclSampleTemperatureSensor_BindingProcess();
        ; Setup parameters for call to function zclSampleTemperatureSensor_BindingProcess
        LCALL   `??zclSampleTemperatureSensor_BindingProcess::?r`; Banked call to: zclSampleTemperatureSensor_BindingProcess
//  201 				#elif (defined END_DEVICE_ENGINE)
//  202 					zclSampleHeatingCoolingUnit_BindingProcess();
//  203 				#endif
//  204 				FLAG_HARD_BINDING = TRUE;
        MOV     DPTR,#FLAG_HARD_BINDING
        MOV     A,#0x1
        MOVX    @DPTR,A
//  205 				UART_ZCmdPrint(HAL_UART_PORT_0, "BINDING STARTED");
        ; Setup parameters for call to function UART_ZCmdPrint
        MOV     R2,#`?<Constant "BINDING STARTED">` & 0xff
        MOV     R3,#(`?<Constant "BINDING STARTED">` >> 8) & 0xff
        SJMP    ??ZCMD_ProcessCMD_12
//  206 			}
//  207 			else
//  208 			{					
//  209 				UART_ZCmdPrint(HAL_UART_PORT_0, "BINDING START ALREADY");
??ZCMD_ProcessCMD_15:
        ; Setup parameters for call to function UART_ZCmdPrint
        MOV     R2,#`?<Constant "BINDING START ALREADY">` & 0xff
        MOV     R3,#(`?<Constant "BINDING START ALREADY">` >> 8) & 0xff
        SJMP    ??ZCMD_ProcessCMD_12
//  210 			}
//  211 			
//  212 			break;
//  213 
//  214 		case CMD_RETURN_SHORT_ADDRESS:
//  215 			UART_ZCmdPrintNum(HAL_UART_PORT_0, NLME_GetShortAddr());
??ZCMD_ProcessCMD_3:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        ; Setup parameters for call to function UART_ZCmdPrintNum
        SJMP    ??ZCMD_ProcessCMD_16
//  216 			UART_ZCmdPrintString(HAL_UART_PORT_0, "\r\n");
//  217 			break;
//  218 
//  219 		case CMD_RETURN_COORD_SHORT_ADDRESS:
//  220 			#ifndef COORDINATOR
//  221 				UART_ZCmdPrintNum(HAL_UART_PORT_0, NLME_GetCoordShortAddr());
??ZCMD_ProcessCMD_4:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        ; Setup parameters for call to function UART_ZCmdPrintNum
??ZCMD_ProcessCMD_16:
        CLR     A
        MOV     R4,A
        MOV     R5,A
        MOV     R1,A
        LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
//  222 				UART_ZCmdPrintString(HAL_UART_PORT_0, "\r\n");
        ; Setup parameters for call to function UART_ZCmdPrintString
        MOV     R2,#`?<Constant "\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
//  223 			#else
//  224 				UART_ZCmdPrint(HAL_UART_PORT_0, "COORDINATOR!");
//  225 			#endif		
//  226 
//  227 			break;
        SJMP    ??ZCMD_ProcessCMD_11
//  228 			
//  229 		case CMD_ENABLE_ECHO_SDATA:
//  230 			FLAG_ECHO_SDATA = TRUE;
??ZCMD_ProcessCMD_5:
        MOV     DPTR,#FLAG_ECHO_SDATA
        SJMP    ??ZCMD_ProcessCMD_17
//  231 			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");			
//  232 			break;
//  233 
//  234 		case CMD_DISABLE_ECHO_SDATA:
//  235 			FLAG_ECHO_SDATA = FALSE;
??ZCMD_ProcessCMD_6:
        MOV     DPTR,#FLAG_ECHO_SDATA
        SJMP    ??ZCMD_ProcessCMD_18
//  236 			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");		
//  237 			break;
//  238 
//  239 		case CMD_ENABLE_ECHO_RDATA:
//  240 			FLAG_ECHO_RDATA = TRUE;
??ZCMD_ProcessCMD_7:
        MOV     DPTR,#FLAG_ECHO_RDATA
??ZCMD_ProcessCMD_17:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  241 			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");
        ; Setup parameters for call to function UART_ZCmdPrint
        SJMP    ??ZCMD_ProcessCMD_12
//  242 			break;
//  243 
//  244 		case CMD_DISABLE_ECHO_RDATA:
//  245 			FLAG_ECHO_RDATA = FALSE;
??ZCMD_ProcessCMD_8:
        MOV     DPTR,#FLAG_ECHO_RDATA
??ZCMD_ProcessCMD_18:
        CLR     A
        MOVX    @DPTR,A
//  246 			UART_ZCmdPrint(HAL_UART_PORT_0, "OK");
        ; Setup parameters for call to function UART_ZCmdPrint
??ZCMD_ProcessCMD_14:
        MOV     R1,A
        SJMP    ??ZCMD_ProcessCMD_19
//  247 			break;
//  248 
//  249 		case CMD_SEND_FREE_DATA:
//  250 			{
//  251 				#ifdef COORDINATOR
//  252 				uint8 i = 0;
//  253 				uint8 parseStr_len = osal_strlen("@ZB+DATA=");
//  254 				Free_Data_Size = packageLength - (parseStr_len + 1); 			// +  "!" ->  + 1
//  255 				Free_Data[0] = '0'; 																			// DUMMY Byte
//  256 
//  257 				if ( Free_Data_Size <= FREE_DATA_BFR_SIZE )
//  258 				{	
//  259 					
//  260 					for (i = 1; i <= FREE_DATA_BFR_SIZE; i++)
//  261 					{
//  262 						if (i <= Free_Data_Size)
//  263 						{
//  264 							Free_Data[i] = *(pcmdData + parseStr_len + i - 1);
//  265 						}
//  266 						else
//  267 						{
//  268 							Free_Data[i] = ' ';
//  269 						}
//  270 					}
//  271 					zclSampleThermostat_SendFreeData();
//  272 					
//  273 					UART_ZCmdPrint(HAL_UART_PORT_0, "OK");
//  274 				}
//  275 				else
//  276 				{
//  277 					UART_ZCmdPrint(HAL_UART_PORT_0, "ERROR");
//  278 				}
//  279 				#else
//  280 					UART_ZCmdPrint(HAL_UART_PORT_0, "NOT SUPPORT");
??ZCMD_ProcessCMD_9:
        ; Setup parameters for call to function UART_ZCmdPrint
        MOV     R2,#`?<Constant "NOT SUPPORT">` & 0xff
        MOV     R3,#(`?<Constant "NOT SUPPORT">` >> 8) & 0xff
        SJMP    ??ZCMD_ProcessCMD_12
//  281 				#endif
//  282 			}
//  283 			break;
//  284 		case CMD_SEND_CONTROL:
//  285 			{
//  286 				#ifdef COORDINATOR
//  287 				uint8 i = 0;
//  288 				uint8 parseStr_len = osal_strlen("@ZB+CONTROL=");
//  289 				Free_Data_Size = packageLength - (parseStr_len + 1); 			// +  "!" ->  + 1
//  290 				Free_Data[0] = '0'; 																			// DUMMY Byte
//  291 
//  292 				if ( Free_Data_Size <= FREE_DATA_BFR_SIZE )
//  293 				{	
//  294 					
//  295 					for (i = 1; i <= FREE_DATA_BFR_SIZE; i++)
//  296 					{
//  297 						if (i <= Free_Data_Size)
//  298 						{
//  299 							Free_Data[i] = *(pcmdData + parseStr_len + i - 1);
//  300 						}
//  301 						else
//  302 						{
//  303 							Free_Data[i] = ' ';
//  304 						}
//  305 					}
//  306 					zclSampleThermostat_SendControlData();
//  307 					
//  308 					UART_ZCmdPrint(HAL_UART_PORT_0, "DONE");
//  309 				}
//  310 				else
//  311 				{
//  312 					UART_ZCmdPrint(HAL_UART_PORT_0, "ERROR");
//  313 				}
//  314 				#else
//  315 					UART_ZCmdPrint(HAL_UART_PORT_0, "ONLY ZBC");
??ZCMD_ProcessCMD_10:
        ; Setup parameters for call to function UART_ZCmdPrint
        MOV     R2,#`?<Constant "ONLY ZBC">` & 0xff
        MOV     R3,#(`?<Constant "ONLY ZBC">` >> 8) & 0xff
??ZCMD_ProcessCMD_12:
        MOV     R1,#0x0
??ZCMD_ProcessCMD_19:
        LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
//  316 				#endif
//  317 			}
//  318 			break;		
//  319 
//  320 		default:
//  321 			break;
//  322 	}
//  323 }
??ZCMD_ProcessCMD_11:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  324 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  325 char* ZCMD_MatchCMD(char* buf, char* str)
ZCMD_MatchCMD:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZCMD_MatchCMD
        CODE
//  326 {
        FUNCALL ZCMD_MatchCMD, strstr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  327 	pcmdData = strstr(buf, str);
        ; Setup parameters for call to function strstr
        LCALL   `??strstr::?relay`   ; Banked call to: strstr
        MOV     DPTR,#pcmdData
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  328 	return pcmdData;
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
//  329 }
          CFI EndBlock cfiBlock2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZCMD_ReplyCMD::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZCMD_ReplyCMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZCMD_ProcessCMD::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZCMD_ProcessCMD

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZCMD_MatchCMD::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZCMD_MatchCMD

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant " ">`:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB!">`:
        DB "@ZB!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+BIND=0!">`:
        DB "@ZB+BIND=0!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+BIND=1!">`:
        DB "@ZB+BIND=1!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+SHORTADDR!">`:
        DB "@ZB+SHORTADDR!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+COORDSHORTADDR!">`:
        DB "@ZB+COORDSHORTADDR!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+ECHOSDATA=0!">`:
        DB "@ZB+ECHOSDATA=0!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+ECHOSDATA=1!">`:
        DB "@ZB+ECHOSDATA=1!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+ECHORDATA=0!">`:
        DB "@ZB+ECHORDATA=0!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+ECHORDATA=1!">`:
        DB "@ZB+ECHORDATA=1!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+DATA=">`:
        DB "@ZB+DATA="

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZB+CONTROL=">`:
        DB "@ZB+CONTROL="

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ERROR">`:
        DB "ERROR"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK">`:
        DB "OK"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "BINDING STOPPED">`:
        DB "BINDING STOPPED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "BINDING STOP ALREADY">`:
        DB "BINDING STOP ALREADY"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "BINDING STARTED">`:
        DB "BINDING STARTED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "BINDING START ALREADY">`:
        DB "BINDING START ALREADY"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "NOT SUPPORT">`:
        DB "NOT SUPPORT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ONLY ZBC">`:
        DB "ONLY ZBC"

        END
//  330 
//  331 uint8 ZCMD_FindChrStr(char* buf, uint8 chr)
//  332 {
//  333 	uint8 i, num;
//  334 
//  335 	num = 0;
//  336 	for (i = 0; i < packageLength; i++)
//  337 	{
//  338 		if (buf[i] == chr)
//  339 		{
//  340 			num++;
//  341 		}
//  342 	}
//  343 
//  344 	if (num == 1)
//  345 	{
//  346 		return 1;
//  347 	}
//  348 
//  349 	return 0;
//  350 }
//  351 
//  352 /*******************************************************************************
//  353 ********************************************************************************/
// 
// 656 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
// 265 bytes in segment XDATA_ROM_C
//  28 bytes in segment XDATA_Z
// 
//  18 bytes of CODE     memory
// 265 bytes of CONST    memory
// 656 bytes of HUGECODE memory
//  28 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
