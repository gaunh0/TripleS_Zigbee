///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               13/Mar/2017  13:58:02
// Copyright 2004-2016 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
//    Command line       =  
//        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFAFA
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c"
//        -D END_DEVICE_SENSOR -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
//        NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D
//        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
//        ZCL_TEMPERATURE_MEASUREMENT -D HAL_UART=TRUE -D HAL_UART_DMA=1 -lC
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\Teddy\Desktop\aaa\[COMBROS]
//        Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\HomeAutomation\MY-SOURCE\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\zcl_sampletemperaturesensor.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_sampletemperaturesensor

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleTemperatureSensor_BasicResetCB::?rel`,0203H
        PUBLIC `??zclSampleTemperatureSensor_BindingProcess::?r`
        FUNCTION `??zclSampleTemperatureSensor_BindingProcess::?r`,0203H
        FUNCTION `??zclSampleTemperatureSensor_EZModeCB::?relay`,0203H
        FUNCTION `??zclSampleTemperatureSensor_HandleKeys::?relay`,0203H
        FUNCTION `??zclSampleTemperatureSensor_IdentifyCB::?relay`,0203H
        FUNCTION ??zclSampleTemperatureSensor_IdentifyQueryRspCB,0203H
        PUBLIC `??zclSampleTemperatureSensor_Init::?relay`
        FUNCTION `??zclSampleTemperatureSensor_Init::?relay`,0203H
        PUBLIC ??zclSampleTemperatureSensor_LcdDisplayHelpMode
        FUNCTION ??zclSampleTemperatureSensor_LcdDisplayHelpMode,0203H
        PUBLIC ??zclSampleTemperatureSensor_LcdDisplayMainMode
        FUNCTION ??zclSampleTemperatureSensor_LcdDisplayMainMode,0203H
        PUBLIC `??zclSampleTemperatureSensor_LcdDisplayUpdate::`
        FUNCTION `??zclSampleTemperatureSensor_LcdDisplayUpdate::`,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessIdentifyTim,0203H
        FUNCTION ??zclSampleTemperatureSensor_ProcessInReportCmd,0203H
        FUNCTION `??zclSampleTemperatureSensor_SendState::?relay`,0203H
        FUNCTION `??zclSampleTemperatureSensor_SendTemp::?relay`,0203H
        PUBLIC `??zclSampleTemperatureSensor_event_loop::?relay`
        FUNCTION `??zclSampleTemperatureSensor_event_loop::?relay`,0203H
        PUBWEAK __Constant_1388
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_9c4
        PUBWEAK __Constant_a
        PUBWEAK __Constant_bb8
        PUBLIC giTemperatureSensorScreenMode
        PUBLIC sClearLine
        PUBLIC sDeviceName
        PUBLIC sSwEZMode
        PUBLIC sSwHelp
        PUBLIC sSwTempDown
        PUBLIC sSwTempUp
        PUBLIC zclSampleTemperatureSensorSeqNum
        FUNCTION zclSampleTemperatureSensor_BasicResetCB,021603H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_BindingProcess
        FUNCTION zclSampleTemperatureSensor_BindingProcess,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclSampleTemperatureSensor_DstAddr
        FUNCTION zclSampleTemperatureSensor_EZModeCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        FUNCTION zclSampleTemperatureSensor_HandleKeys,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zclSampleTemperatureSensor_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleTemperatureSensor_IdentifyQueryRspCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_Init
        FUNCTION zclSampleTemperatureSensor_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclSampleTemperatureSensor_LcdDisplayHelpMode
        FUNCTION zclSampleTemperatureSensor_LcdDisplayHelpMode,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_LcdDisplayMainMode
        FUNCTION zclSampleTemperatureSensor_LcdDisplayMainMode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC zclSampleTemperatureSensor_LcdDisplayUpdate
        FUNCTION zclSampleTemperatureSensor_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleTemperatureSensor_NwkState
        FUNCTION zclSampleTemperatureSensor_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        FUNCTION zclSampleTemperatureSensor_ProcessInReportCmd,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        FUNCTION zclSampleTemperatureSensor_SendState,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        FUNCTION zclSampleTemperatureSensor_SendTemp,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 21, STACK
        PUBLIC zclSampleTemperatureSensor_TaskID
        PUBLIC zclSampleTemperatureSensor_event_loop
        FUNCTION zclSampleTemperatureSensor_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
CheckOutputState    SYMBOL "CheckOutputState"
`??CheckOutputState::?relay` SYMBOL "?relay", CheckOutputState
DHT11_Init          SYMBOL "DHT11_Init"
`??DHT11_Init::?relay` SYMBOL "?relay", DHT11_Init
GPIO_init           SYMBOL "GPIO_init"
`??GPIO_init::?relay` SYMBOL "?relay", GPIO_init
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
MT_SysCommandProcessing SYMBOL "MT_SysCommandProcessing"
`??MT_SysCommandProcessing::?relay` SYMBOL "?relay", MT_SysCommandProcessing
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
TURN_off            SYMBOL "TURN_off"
`??TURN_off::?relay` SYMBOL "?relay", TURN_off
TURN_on             SYMBOL "TURN_on"
`??TURN_on::?relay` SYMBOL "?relay", TURN_on
Toggle              SYMBOL "Toggle"
`??Toggle::?relay`  SYMBOL "?relay", Toggle
UART_DebugPrint     SYMBOL "UART_DebugPrint"
`??UART_DebugPrint::?relay` SYMBOL "?relay", UART_DebugPrint
UART_Init           SYMBOL "UART_Init"
`??UART_Init::?relay` SYMBOL "?relay", UART_Init
UART_ParseRxPackage SYMBOL "UART_ParseRxPackage"
`??UART_ParseRxPackage::?relay` SYMBOL "?relay", UART_ParseRxPackage
UART_SendNum        SYMBOL "UART_SendNum"
`??UART_SendNum::?relay` SYMBOL "?relay", UART_SendNum
UART_SendString     SYMBOL "UART_SendString"
`??UART_SendString::?relay` SYMBOL "?relay", UART_SendString
UART_ZCmdPrint      SYMBOL "UART_ZCmdPrint"
`??UART_ZCmdPrint::?relay` SYMBOL "?relay", UART_ZCmdPrint
UART_ZCmdPrintBuffer SYMBOL "UART_ZCmdPrintBuffer"
`??UART_ZCmdPrintBuffer::?relay` SYMBOL "?relay", UART_ZCmdPrintBuffer
UART_ZCmdPrintNum   SYMBOL "UART_ZCmdPrintNum"
`??UART_ZCmdPrintNum::?relay` SYMBOL "?relay", UART_ZCmdPrintNum
UART_ZCmdPrintString SYMBOL "UART_ZCmdPrintString"
`??UART_ZCmdPrintString::?relay` SYMBOL "?relay", UART_ZCmdPrintString
ZCMD_ReplyCMD       SYMBOL "ZCMD_ReplyCMD"
`??ZCMD_ReplyCMD::?relay` SYMBOL "?relay", ZCMD_ReplyCMD
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
_ltoa               SYMBOL "_ltoa"
`??_ltoa::?relay`   SYMBOL "?relay", _ltoa
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
strstr              SYMBOL "strstr"
`??strstr::?relay`  SYMBOL "?relay", strstr
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zclHA_LcdStatusLine1 SYMBOL "zclHA_LcdStatusLine1"
`??zclHA_LcdStatusLine1::?relay` SYMBOL "?relay", zclHA_LcdStatusLine1
zclHA_uint16toa     SYMBOL "zclHA_uint16toa"
`??zclHA_uint16toa::?relay` SYMBOL "?relay", zclHA_uint16toa
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_RegisterEZMode  SYMBOL "zcl_RegisterEZMode"
`??zcl_RegisterEZMode::?relay` SYMBOL "?relay", zcl_RegisterEZMode
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
`??zcl_SendReportCmd::?relay` SYMBOL "?relay", zcl_SendReportCmd
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclSampleTemperatureSensor_BindingProcess SYMBOL "zclSampleTemperatureSensor_BindingProcess"
`??zclSampleTemperatureSensor_BindingProcess::?r` SYMBOL "?relay", zclSampleTemperatureSensor_BindingProcess
zclSampleTemperatureSensor_Init SYMBOL "zclSampleTemperatureSensor_Init"
`??zclSampleTemperatureSensor_Init::?relay` SYMBOL "?relay", zclSampleTemperatureSensor_Init
zclSampleTemperatureSensor_LcdDisplayHelpMode SYMBOL "zclSampleTemperatureSensor_LcdDisplayHelpMode"
??zclSampleTemperatureSensor_LcdDisplayHelpMode SYMBOL "?relay", zclSampleTemperatureSensor_LcdDisplayHelpMode
zclSampleTemperatureSensor_LcdDisplayMainMode SYMBOL "zclSampleTemperatureSensor_LcdDisplayMainMode"
??zclSampleTemperatureSensor_LcdDisplayMainMode SYMBOL "?relay", zclSampleTemperatureSensor_LcdDisplayMainMode
zclSampleTemperatureSensor_LcdDisplayUpdate SYMBOL "zclSampleTemperatureSensor_LcdDisplayUpdate"
`??zclSampleTemperatureSensor_LcdDisplayUpdate::` SYMBOL "?relay", zclSampleTemperatureSensor_LcdDisplayUpdate
zclSampleTemperatureSensor_event_loop SYMBOL "zclSampleTemperatureSensor_event_loop"
`??zclSampleTemperatureSensor_event_loop::?relay` SYMBOL "?relay", zclSampleTemperatureSensor_event_loop

        EXTERN `??CheckOutputState::?relay`
        FUNCTION `??CheckOutputState::?relay`,00H
        EXTERN `??DHT11_Init::?relay`
        FUNCTION `??DHT11_Init::?relay`,00H
        EXTERN `??GPIO_init::?relay`
        FUNCTION `??GPIO_init::?relay`,00H
        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??MT_SysCommandProcessing::?relay`
        FUNCTION `??MT_SysCommandProcessing::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??TURN_off::?relay`
        FUNCTION `??TURN_off::?relay`,00H
        EXTERN `??TURN_on::?relay`
        FUNCTION `??TURN_on::?relay`,00H
        EXTERN `??Toggle::?relay`
        FUNCTION `??Toggle::?relay`,00H
        EXTERN `??UART_DebugPrint::?relay`
        FUNCTION `??UART_DebugPrint::?relay`,00H
        EXTERN `??UART_Init::?relay`
        FUNCTION `??UART_Init::?relay`,00H
        EXTERN `??UART_ParseRxPackage::?relay`
        FUNCTION `??UART_ParseRxPackage::?relay`,00H
        EXTERN `??UART_SendNum::?relay`
        FUNCTION `??UART_SendNum::?relay`,00H
        EXTERN `??UART_SendString::?relay`
        FUNCTION `??UART_SendString::?relay`,00H
        EXTERN `??UART_ZCmdPrint::?relay`
        FUNCTION `??UART_ZCmdPrint::?relay`,00H
        EXTERN `??UART_ZCmdPrintBuffer::?relay`
        FUNCTION `??UART_ZCmdPrintBuffer::?relay`,00H
        EXTERN `??UART_ZCmdPrintNum::?relay`
        FUNCTION `??UART_ZCmdPrintNum::?relay`,00H
        EXTERN `??UART_ZCmdPrintString::?relay`
        FUNCTION `??UART_ZCmdPrintString::?relay`,00H
        EXTERN `??ZCMD_ReplyCMD::?relay`
        FUNCTION `??ZCMD_ReplyCMD::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??_ltoa::?relay`
        FUNCTION `??_ltoa::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??strstr::?relay`
        FUNCTION `??strstr::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zclHA_LcdStatusLine1::?relay`
        FUNCTION `??zclHA_LcdStatusLine1::?relay`,00H
        EXTERN `??zclHA_uint16toa::?relay`
        FUNCTION `??zclHA_uint16toa::?relay`,00H
        EXTERN `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,00H
        EXTERN `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,00H
        EXTERN `??zcl_RegisterEZMode::?relay`
        FUNCTION `??zcl_RegisterEZMode::?relay`,00H
        EXTERN `??zcl_SendReportCmd::?relay`
        FUNCTION `??zcl_SendReportCmd::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN CheckOutputState
        FUNCTION CheckOutputState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11_Init
        FUNCTION DHT11_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN FLAG_BINDING
        EXTERN FLAG_ECHO_RDATA
        EXTERN FLAG_HARD_BINDING
        EXTERN FLAG_JOIN_CONFIRM
        EXTERN GPIO_init
        FUNCTION GPIO_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_SysCommandProcessing
        FUNCTION MT_SysCommandProcessing,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN TURN_off
        FUNCTION TURN_off,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN TURN_on
        FUNCTION TURN_on,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Toggle
        FUNCTION Toggle,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_DebugPrint
        FUNCTION UART_DebugPrint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_Init
        FUNCTION UART_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_ParseRxPackage
        FUNCTION UART_ParseRxPackage,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_SendNum
        FUNCTION UART_SendNum,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_SendString
        FUNCTION UART_SendString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_ZCmdPrint
        FUNCTION UART_ZCmdPrint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_ZCmdPrintBuffer
        FUNCTION UART_ZCmdPrintBuffer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_ZCmdPrintNum
        FUNCTION UART_ZCmdPrintNum,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART_ZCmdPrintString
        FUNCTION UART_ZCmdPrintString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZCMD_ReplyCMD
        FUNCTION ZCMD_ReplyCMD,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _ltoa
        FUNCTION _ltoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN msg_RSSI
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strstr
        FUNCTION strstr,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_LcdStatusLine1
        FUNCTION zclHA_LcdStatusLine1,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_uint16toa
        FUNCTION zclHA_uint16toa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleTemperatureSensor_Attrs
        EXTERN zclSampleTemperatureSensor_IdentifyTime
        EXTERN zclSampleTemperatureSensor_MeasuredValue
        EXTERN zclSampleTemperatureSensor_OnOff
        EXTERN zclSampleTemperatureSensor_SimpleDesc
        EXTERN zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_RegisterEZMode
        FUNCTION zcl_RegisterEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampletemperaturesensor.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6   Description:    Zigbee Cluster Library - sample device application.
//    7 
//    8 
//    9   Copyright 2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This device will act as a temperature sensor. It updates the current
//   42   temperature on the thermostat when the user sends the desired
//   43   temperature using SW1.
//   44 
//   45   SCREEN MODES
//   46   ----------------------------------------
//   47   Main:
//   48     - SW1: Send current temperature
//   49     - SW2: Invoke EZMode
//   50     - SW3: Adjust temperature
//   51     - SW5: Go to Help screen
//   52 
//   53   Temperature:
//   54     - SW1: Increase temperature
//   55     - SW3: Decrease temperature
//   56     - SW5: Enter temperature
//   57   ----------------------------------------
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "ZComDef.h"
//   64 #include "OSAL.h"
//   65 #include "AF.h"
//   66 #include "ZDApp.h"
//   67 #include "ZDObject.h"
//   68 #include "ZDProfile.h"
//   69 #include "MT_SYS.h"
//   70 
//   71 #include "zcl.h"
//   72 #include "zcl_general.h"
//   73 #include "zcl_ha.h"
//   74 #include "zcl_ezmode.h"
//   75 #include "zcl_ms.h"
//   76 
//   77 #include "zcl_sampletemperaturesensor.h"
//   78 
//   79 #include "onboard.h"
//   80 
//   81 /* HAL */
//   82 #include "hal_lcd.h"
//   83 #include "hal_led.h"
//   84 #include "hal_key.h"
//   85 
//   86 /* MY INCLUDES */
//   87 #include "MS_UART.h"
//   88 #include "MS_UART_CMD.h"
//   89 #include "MS_DHT11.h"
//   90 #include "MS_GPIO.h"
//   91 #include "string.h"
//   92 
//   93 /*********************************************************************
//   94  * MACROS
//   95  */
//   96 
//   97 // how often to report temperature
//   98 #define SAMPLETEMPERATURESENSOR_REPORT_INTERVAL   2500
//   99 
//  100 /*********************************************************************
//  101  * CONSTANTS
//  102  */
//  103 
//  104 /*********************************************************************
//  105  * TYPEDEFS
//  106  */
//  107 
//  108 /*********************************************************************
//  109  * GLOBAL VARIABLES
//  110  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  111 byte zclSampleTemperatureSensor_TaskID;
zclSampleTemperatureSensor_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  112 uint8 zclSampleTemperatureSensorSeqNum;
zclSampleTemperatureSensorSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  113 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  114 static byte gPermitDuration = 0x00;
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  115 
//  116 /*********************************************************************
//  117  * GLOBAL FUNCTIONS
//  118  */
//  119 
//  120 /*********************************************************************
//  121  * LOCAL VARIABLES
//  122  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  123 afAddrType_t zclSampleTemperatureSensor_DstAddr;
zclSampleTemperatureSensor_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  124 
//  125 #ifdef ZCL_EZMODE
//  126 static void zclSampleTemperatureSensor_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  127 static void zclSampleTemperatureSensor_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  128 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  129 static const zclEZMode_RegisterData_t zclSampleTemperatureSensor_RegisterEZModeData =
zclSampleTemperatureSensor_RegisterEZModeData:
        DATA16
        DW zclSampleTemperatureSensor_TaskID
        DW 4
        DW 2
        DW zclSampleTemperatureSensorSeqNum
        DW `??zclSampleTemperatureSensor_EZModeCB::?relay`
//  130 {
//  131   &zclSampleTemperatureSensor_TaskID,
//  132   SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT,
//  133   SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT,
//  134   &zclSampleTemperatureSensorSeqNum,
//  135   zclSampleTemperatureSensor_EZModeCB
//  136 };
//  137 
//  138 // NOT ZCL_EZMODE, Use EndDeviceBind
//  139 #else
//  140 
//  141 static cId_t bindingOutClusters[] =
//  142 {
//  143   ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT
//  144 };
//  145 #define ZCLSAMPLETEMPERATURESENSOR_BINDINGLIST        1
//  146 #endif
//  147 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  148 devStates_t zclSampleTemperatureSensor_NwkState = DEV_INIT;
zclSampleTemperatureSensor_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleTemperatureSensor_N`
        REQUIRE __INIT_XDATA_I
//  149 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 uint8 giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;   // display main screen mode first
giTemperatureSensorScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  151 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  152 static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
aProcessCmd:
        DATA32
        DS 4
        REQUIRE `?<Initializer for aProcessCmd>`
        REQUIRE __INIT_XDATA_I
//  153 
//  154 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  155 static endPointDesc_t sampleTemperatureSensor_TestEp =
sampleTemperatureSensor_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleTemperatureSensor_Test`
        REQUIRE __INIT_XDATA_I
//  156 {
//  157   20,                                 // Test endpoint
//  158   &zclSampleTemperatureSensor_TaskID,
//  159   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  160   (afNetworkLatencyReq_t)0            // No Network Latency req
//  161 };
//  162 
//  163 
//  164 /*********************************************************************
//  165  * LOCAL FUNCTIONS
//  166  */
//  167 static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys );
//  168 static void zclSampleTemperatureSensor_BasicResetCB( void );
//  169 static void zclSampleTemperatureSensor_IdentifyCB( zclIdentify_t *pCmd );
//  170 static void zclSampleTemperatureSensor_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  171 static void zclSampleTemperatureSensor_ProcessIdentifyTimeChange( void );
//  172 
//  173 // app display functions
//  174 void zclSampleTemperatureSensor_LcdDisplayUpdate(void);
//  175 void zclSampleTemperatureSensor_LcdDisplayMainMode(void);
//  176 void zclSampleTemperatureSensor_LcdDisplayTempMode(void);
//  177 void zclSampleTemperatureSensor_LcdDisplayHelpMode(void);
//  178 
//  179 static void zclSampleTemperatureSensor_SendTemp(void);
//  180 static void zclSampleTemperatureSensor_SendState(OUTPUT_TypeDef OUTX);
//  181 
//  182 
//  183 // Functions to process ZCL Foundation incoming Command/Response messages
//  184 static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  185 #ifdef ZCL_READ
//  186 static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  187 #endif
//  188 #ifdef ZCL_WRITE
//  189 static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  190 #endif
//  191 static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  192 #ifdef ZCL_DISCOVER
//  193 static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  194 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  195 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  196 #endif 
//  197 #ifdef ZCL_REPORT
//  198 static void zclSampleTemperatureSensor_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
//  199 #endif 
//  200 
//  201 /*********************************************************************
//  202  * STATUS STRINGS
//  203  */
//  204 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  205 const char sClearLine[]    = " ";
sClearLine:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  206 const char sDeviceName[]   = "  Temp Sensor";
sDeviceName:
        DB "  Temp Sensor"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  207 const char sSwTempUp[]     = "SW1: Raise Temp";
sSwTempUp:
        DB "SW1: Raise Temp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  208 const char sSwEZMode[]     = "SW2: EZ-Mode";
sSwEZMode:
        DB "SW2: EZ-Mode"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  209 const char sSwTempDown[]   = "SW3: Lower Temp";
sSwTempDown:
        DB "SW3: Lower Temp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  210 const char sSwHelp[]       = "SW5: Help";
sSwHelp:
        DB "SW5: Help"
//  211 #endif
//  212 
//  213 /*********************************************************************
//  214  * ZCL General Profile Callback table
//  215  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  216 static zclGeneral_AppCallbacks_t zclSampleTemperatureSensor_CmdCallbacks =
zclSampleTemperatureSensor_CmdCallbacks:
        DATA8
        DS 24
        REQUIRE `?<Initializer for zclSampleTemperatureSensor_C`
        REQUIRE __INIT_XDATA_I
//  217 {
//  218   zclSampleTemperatureSensor_BasicResetCB,        // Basic Cluster Reset command
//  219   zclSampleTemperatureSensor_IdentifyCB,          // Identify command
//  220 #ifdef ZCL_EZMODE
//  221   NULL,                                           // Identify EZ-Mode Invoke command
//  222   NULL,                                           // Identify Update Commission State command
//  223 #endif
//  224   NULL,                                           // Identify Trigger Effect command
//  225   zclSampleTemperatureSensor_IdentifyQueryRspCB,  // Identify Query Response command
//  226   NULL,             				                      // On/Off cluster command
//  227   NULL,                                           // On/Off cluster enhanced command Off with Effect
//  228   NULL,                                           // On/Off cluster enhanced command On with Recall Global Scene
//  229   NULL,                                           // On/Off cluster enhanced command On with Timed Off
//  230 #ifdef ZCL_LEVEL_CTRL
//  231   NULL,                                           // Level Control Move to Level command
//  232   NULL,                                           // Level Control Move command
//  233   NULL,                                           // Level Control Step command
//  234   NULL,                                           // Level Control Stop command
//  235 #endif
//  236 #ifdef ZCL_GROUPS
//  237   NULL,                                           // Group Response commands
//  238 #endif
//  239 #ifdef ZCL_SCENES
//  240   NULL,                                           // Scene Store Request command
//  241   NULL,                                           // Scene Recall Request command
//  242   NULL,                                           // Scene Response command
//  243 #endif
//  244 #ifdef ZCL_ALARMS
//  245   NULL,                                           // Alarm (Response) commands
//  246 #endif
//  247 #ifdef SE_UK_EXT
//  248   NULL,                                           // Get Event Log command
//  249   NULL,                                           // Publish Event Log command
//  250 #endif
//  251   NULL,                                           // RSSI Location command
//  252   NULL                                            // RSSI Location Response command
//  253 };
//  254 
//  255 /*********************************************************************
//  256  * @fn          zclSampleTemperatureSensor_Init
//  257  *
//  258  * @brief       Initialization function for the zclGeneral layer.
//  259  *
//  260  * @param       none
//  261  *
//  262  * @return      none
//  263  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  264 void zclSampleTemperatureSensor_Init( byte task_id )
zclSampleTemperatureSensor_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_Init
        CODE
//  265 {
        FUNCALL zclSampleTemperatureSensor_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, zcl_RegisterEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, GPIO_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, UART_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, DHT11_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_Init, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  266   zclSampleTemperatureSensor_TaskID = task_id;
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    @DPTR,A
//  267 
//  268   // Set destination address to indirect
//  269   zclSampleTemperatureSensor_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zclSampleTemperatureSensor_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  270   zclSampleTemperatureSensor_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  271   zclSampleTemperatureSensor_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zclSampleTemperatureSensor_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  272 
//  273 //	zclSampleTemperatureSensor_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  274 //  zclSampleTemperatureSensor_DstAddr.endPoint = APP_ROUTER_ENDPOINT;
//  275 //  zclSampleTemperatureSensor_DstAddr.addr.shortAddr = NLME_GetCoordShortAddr();
//  276 
//  277   // This app is part of the Home Automation Profile
//  278   zclHA_Init( &zclSampleTemperatureSensor_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclSampleTemperatureSensor_SimpleDesc & 0xff
        MOV     R3,#(zclSampleTemperatureSensor_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  279 
//  280   // Register the ZCL General Cluster Library callback functions
//  281   zclGeneral_RegisterCmdCallbacks( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleTemperatureSensor_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleTemperatureSensor_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  282 
//  283   // Register the application's attribute list
//  284   zcl_registerAttrList( SAMPLETEMPERATURESENSOR_ENDPOINT, SAMPLETEMPERATURESENSOR_MAX_ATTRIBUTES, zclSampleTemperatureSensor_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleTemperatureSensor_Attrs & 0xff
        MOV     R5,#(zclSampleTemperatureSensor_Attrs >> 8) & 0xff
        MOV     R2,#0x11
        MOV     R1,#0x1
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  285 
//  286   // Register the Application to receive the unprocessed Foundation command/response messages
//  287   zcl_registerForMsg( zclSampleTemperatureSensor_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  288 
//  289 	#ifdef ZCL_EZMODE
//  290   // Register EZ-Mode
//  291   zcl_RegisterEZMode( &zclSampleTemperatureSensor_RegisterEZModeData );
        ; Setup parameters for call to function zcl_RegisterEZMode
        MOV     R2,#zclSampleTemperatureSensor_RegisterEZModeData & 0xff
        MOV     R3,#(zclSampleTemperatureSensor_RegisterEZModeData >> 8) & 0xff
        LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
//  292 
//  293   // Register with the ZDO to receive Match Descriptor Responses
//  294   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  295 	#endif
//  296 
//  297   // Register for all key events - This app will handle all key events
//  298   RegisterForKeys( zclSampleTemperatureSensor_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  299 
//  300   // Register for a test endpoint
//  301   afRegister( &sampleTemperatureSensor_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleTemperatureSensor_TestEp & 0xff
        MOV     R3,#(sampleTemperatureSensor_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  302 
//  303 	#ifdef LCD_SUPPORTED
//  304   // display the device name
//  305   HalLcdWriteString( (char *)sDeviceName, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sDeviceName & 0xff
        MOV     R3,#(sDeviceName >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  306 	#endif
//  307         
//  308         GPIO_init();
        ; Setup parameters for call to function GPIO_init
        LCALL   `??GPIO_init::?relay`; Banked call to: GPIO_init
//  309 	UART_Init(HAL_UART_PORT_0);
        ; Setup parameters for call to function UART_Init
        MOV     R1,#0x0
        LCALL   `??UART_Init::?relay`; Banked call to: UART_Init
//  310 
//  311 	DHT11_Init();
        ; Setup parameters for call to function DHT11_Init
        LCALL   `??DHT11_Init::?relay`; Banked call to: DHT11_Init
//  312 	
//  313 	// Set timer for first UART Reply CMD event
//  314 	osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_UART_REPLY_CMD_EVT, UART_PARSE_RX_PACKAGE_EVT_PERIOD );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_a
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  315 
//  316 	// Set timer for first Check System event
//  317 	osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_CHECK_SYSTEM_EVT, CHECK_SYSTEM_EVT_PERIOD );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_2710
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  318 
//  319 	// Set timer for first Join Setup event
//  320 	if (NLME_GetShortAddr() != 0xFFFE)
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,#-0x2
        XRL     A,?V0
        JNZ     ??zclSampleTemperatureSensor_Init_0
        MOV     A,#-0x1
        XRL     A,?V1
??zclSampleTemperatureSensor_Init_0:
        JZ      ??zclSampleTemperatureSensor_Init_1
//  321 	{
//  322 		osal_set_event( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  323 	}
//  324 	
//  325 }
??zclSampleTemperatureSensor_Init_1:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  326 
//  327 /*********************************************************************
//  328  * @fn          zclSample_event_loop
//  329  *
//  330  * @brief       Event Loop Processor for zclGeneral.
//  331  *
//  332  * @param       none
//  333  *
//  334  * @return      none
//  335  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  336 uint16 zclSampleTemperatureSensor_event_loop( uint8 task_id, uint16 events )
zclSampleTemperatureSensor_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
        CODE
//  337 {
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_ProcessInReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, Toggle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_SendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, Toggle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_SendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, Toggle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, Toggle
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_SendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_SendTemp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_BindingProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, zclSampleTemperatureSensor_BindingProcess
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, UART_ParseRxPackage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, ZCMD_ReplyCMD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  338   afIncomingMSGPacket_t *MSGpkt;
//  339 
//  340   (void)task_id;  // Intentionally unreferenced parameter
//  341 
//  342 	/*--------------------------------------------------------------------------*/
//  343   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclSampleTemperatureSensor_event_loop_0
//  344   {
//  345     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleTemperatureSensor_TaskID )) )
//  346     {
//  347 			msg_RSSI = MSGpkt->rssi;
//  348 				
//  349       switch ( MSGpkt->hdr.event )
//  350       {
//  351 				#ifdef ZCL_EZMODE
//  352         case ZDO_CB_MSG:
//  353           zclSampleTemperatureSensor_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  354 					UART_DebugPrint(HAL_UART_PORT_0, "ZDO_CB_MSG");
//  355           break;
//  356 				#endif
//  357 
//  358         case ZCL_INCOMING_MSG:
//  359           // Incoming ZCL Foundation command/response messages
//  360           zclSampleTemperatureSensor_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  361 					UART_DebugPrint(HAL_UART_PORT_0, "ZCL_INCOMING_MSG");
//  362           break;
//  363 
//  364         case KEY_CHANGE:
//  365           zclSampleTemperatureSensor_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  366 					UART_DebugPrint(HAL_UART_PORT_0, "KEY_CHANGE");
//  367 					break;
//  368 
//  369         case ZDO_STATE_CHANGE:
//  370           zclSampleTemperatureSensor_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  371 
//  372 
//  373           // now on the network
//  374           if ( (zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD) ||
//  375                (zclSampleTemperatureSensor_NwkState == DEV_ROUTER)   ||
//  376                (zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE) )
//  377           {
//  378 						#ifndef HOLD_AUTO_START
//  379             giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
//  380             zclSampleTemperatureSensor_LcdDisplayUpdate();
//  381 						#endif
//  382 						#ifdef ZCL_EZMODE
//  383             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  384 						#endif // ZCL_EZMODE
//  385 
//  386 						UART_DebugPrint(HAL_UART_PORT_0, "ZDO_STATE_CHANGE");
//  387           }
//  388           break;
//  389 
//  390         default:
//  391           break;
//  392       }
//  393 
//  394       // Release the memory
//  395       osal_msg_deallocate( (uint8 *)MSGpkt );
//  396     }
//  397 
//  398     // return unprocessed events
//  399     return (events ^ SYS_EVENT_MSG);
//  400   }
//  401 
//  402 	/*--------------------------------------------------------------------------*/
//  403   if ( events & SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclSampleTemperatureSensor_event_loop_1 & 0xFFFF
//  404   {
//  405     if ( zclSampleTemperatureSensor_IdentifyTime > 0 )
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleTemperatureSensor_event_loop_2
//  406       zclSampleTemperatureSensor_IdentifyTime--;
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  407     zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
??zclSampleTemperatureSensor_event_loop_2:
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
//  408 
//  409 		UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT");
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">` & 0xff
        MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
//  410 
//  411     return ( events ^ SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
//  412   }
??zclSampleTemperatureSensor_event_loop_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zclSampleTemperatureSensor_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleTemperatureSensor_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleTemperatureSensor_event_loop_6
??zclSampleTemperatureSensor_event_loop_5:
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayUpdate
        LCALL   `??zclSampleTemperatureSensor_LcdDisplayUpdate::`; Banked call to: zclSampleTemperatureSensor_LcdDisplayUpdate
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x2
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "ZDO_STATE_CHANGE">` & 0xff
        MOV     R3,#(`?<Constant "ZDO_STATE_CHANGE">` >> 8) & 0xff
??zclSampleTemperatureSensor_event_loop_7:
        MOV     R1,#0x0
        LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
??zclSampleTemperatureSensor_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleTemperatureSensor_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??zclSampleTemperatureSensor_event_loop_8 & 0xFFFF
        MOV     A,R2
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPTR,#msg_RSSI
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclSampleTemperatureSensor_event_loop_9
        ADD     A,#0x74
        JNZ     $+5
        LJMP    ??zclSampleTemperatureSensor_event_loop_10 & 0xFFFF
        ADD     A,#-0x11
        JZ      ??zclSampleTemperatureSensor_event_loop_4
        ADD     A,#-0x2
        JNZ     ??zclSampleTemperatureSensor_event_loop_6
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleTemperatureSensor_event_loop_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??zclSampleTemperatureSensor_event_loop_11:
        JNZ     ??zclSampleTemperatureSensor_event_loop_12
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V2,R2
        MOV     ?V3,R3
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     R1,#0x5
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
??zclSampleTemperatureSensor_event_loop_12:
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "ZDO_CB_MSG">` & 0xff
        MOV     R3,#(`?<Constant "ZDO_CB_MSG">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_event_loop_7
??zclSampleTemperatureSensor_event_loop_9:
        MOV     A,R2
        ADD     A,#0x17
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclSampleTemperatureSensor_event_loop_13
        ADD     A,#-0x3
        JZ      ??zclSampleTemperatureSensor_event_loop_14
        ADD     A,#-0x6
        JNZ     ??zclSampleTemperatureSensor_event_loop_15
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInReportCmd
        LCALL   ??zclSampleTemperatureSensor_ProcessInReportCmd; Banked call to: zclSampleTemperatureSensor_ProcessInReportCmd
        SJMP    ??zclSampleTemperatureSensor_event_loop_15
??zclSampleTemperatureSensor_event_loop_14:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclSampleTemperatureSensor_event_loop_15
        INC     R0
        SJMP    ??CrossCallReturnLabel_13
??zclSampleTemperatureSensor_event_loop_13:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_14:
        SJMP    ??zclSampleTemperatureSensor_event_loop_16
??zclSampleTemperatureSensor_event_loop_17:
        INC     R0
??zclSampleTemperatureSensor_event_loop_16:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclSampleTemperatureSensor_event_loop_17
??zclSampleTemperatureSensor_event_loop_15:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleTemperatureSensor_event_loop_18
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
??zclSampleTemperatureSensor_event_loop_18:
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "ZCL_INCOMING_MSG">` & 0xff
        MOV     R3,#(`?<Constant "ZCL_INCOMING_MSG">` >> 8) & 0xff
        LJMP    ??zclSampleTemperatureSensor_event_loop_7 & 0xFFFF
??zclSampleTemperatureSensor_event_loop_10:
        ; Setup parameters for call to function zclSampleTemperatureSensor_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclSampleTemperatureSensor_HandleKeys::?relay`; Banked call to: zclSampleTemperatureSensor_HandleKeys
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "KEY_CHANGE">` & 0xff
        MOV     R3,#(`?<Constant "KEY_CHANGE">` >> 8) & 0xff
        LJMP    ??zclSampleTemperatureSensor_event_loop_7 & 0xFFFF
??zclSampleTemperatureSensor_event_loop_8:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??zclSampleTemperatureSensor_event_loop_19 & 0xFFFF
//  413 
//  414 	/*--------------------------------------------------------------------------*/
//  415 	#ifdef ZCL_EZMODE
//  416   // going on to next state
//  417   if ( events & SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT )
??zclSampleTemperatureSensor_event_loop_1:
        ANL     A,#0x4
        JZ      ??zclSampleTemperatureSensor_event_loop_20
//  418   {
//  419     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  420 
//  421 		UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT");
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">_1` & 0xff
        MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">_1` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
//  422 		
//  423     return ( events ^ SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT );
        MOV     A,R6
        XRL     A,#0x4
        LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
//  424   }
//  425 	/*--------------------------------------------------------------------------*/
//  426   // the overall EZMode timer expired, so we timed out
//  427   if ( events & SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT )
??zclSampleTemperatureSensor_event_loop_20:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??zclSampleTemperatureSensor_event_loop_21
//  428   {
//  429     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
        ; Setup parameters for call to function zcl_EZModeAction
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#0x63
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  430     UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT");	
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">_2` & 0xff
        MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">_2` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
//  431     return ( events ^ SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x2
        LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
//  432   }
//  433 	#endif // ZLC_EZMODE
//  434 
//  435 	/*--------------------------------------------------------------------------*/
//  436   if ( events & SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT )
??zclSampleTemperatureSensor_event_loop_21:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??zclSampleTemperatureSensor_event_loop_22
//  437   {
//  438     giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
        MOVX    @DPTR,A
//  439     zclSampleTemperatureSensor_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayUpdate
        LCALL   `??zclSampleTemperatureSensor_LcdDisplayUpdate::`; Banked call to: zclSampleTemperatureSensor_LcdDisplayUpdate
//  440 		if (FLAG_BINDING)
        MOV     DPTR,#FLAG_BINDING
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_event_loop_23
//  441 		{
//  442 			FLAG_BINDING = FALSE;
        CLR     A
        MOVX    @DPTR,A
//  443 			if (FLAG_HARD_BINDING)
        MOV     DPTR,#FLAG_HARD_BINDING
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_event_loop_23
//  444 			{
//  445 				FLAG_HARD_BINDING = FALSE;
        CLR     A
        MOVX    @DPTR,A
//  446 			}
//  447 		}
//  448 		UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT");
??zclSampleTemperatureSensor_event_loop_23:
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">_3` & 0xff
        MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">_3` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
//  449     return ( events ^ SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT );
        MOV     A,R6
        XRL     A,#0x8
        LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
//  450   }
//  451 
//  452 	/*--------------------------------------------------------------------------*/
//  453 	if ( events & SAMPLETEMPERATURESENSOR_SW1)
??zclSampleTemperatureSensor_event_loop_22:
        MOV     A,R7
        ANL     A,#0x2
        JZ      ??zclSampleTemperatureSensor_event_loop_24
//  454 	{
//  455       Toggle(Output_2);
        ; Setup parameters for call to function Toggle
        MOV     R1,#0x2
        LCALL   `??Toggle::?relay`   ; Banked call to: Toggle
//  456 	  zclSampleTemperatureSensor_SendState(Output_2);
        ; Setup parameters for call to function zclSampleTemperatureSensor_SendState
        MOV     R1,#0x2
        LCALL   `??zclSampleTemperatureSensor_SendState::?relay`; Banked call to: zclSampleTemperatureSensor_SendState
//  457 	  return (events ^ SAMPLETEMPERATURESENSOR_SW1);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x2
        LJMP    ??zclSampleTemperatureSensor_event_loop_19 & 0xFFFF
//  458 	}
//  459 	if ( events & SAMPLETEMPERATURESENSOR_SW2 )
??zclSampleTemperatureSensor_event_loop_24:
        MOV     A,R7
        ANL     A,#0x4
        JZ      ??zclSampleTemperatureSensor_event_loop_25
//  460 	{
//  461       Toggle(Output_3);
        ; Setup parameters for call to function Toggle
        MOV     R1,#0x3
        LCALL   `??Toggle::?relay`   ; Banked call to: Toggle
//  462 	  zclSampleTemperatureSensor_SendState(Output_3);
        ; Setup parameters for call to function zclSampleTemperatureSensor_SendState
        MOV     R1,#0x3
        LCALL   `??zclSampleTemperatureSensor_SendState::?relay`; Banked call to: zclSampleTemperatureSensor_SendState
//  463 	  return (events ^ SAMPLETEMPERATURESENSOR_SW2);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x4
        LJMP    ??zclSampleTemperatureSensor_event_loop_19 & 0xFFFF
//  464 	}
//  465 	if ( events & SAMPLETEMPERATURESENSOR_SW3 )
??zclSampleTemperatureSensor_event_loop_25:
        MOV     A,R7
        ANL     A,#0x8
        JZ      ??zclSampleTemperatureSensor_event_loop_26
//  466 	{
//  467       Toggle(Output_2);
        ; Setup parameters for call to function Toggle
        MOV     R1,#0x2
        LCALL   `??Toggle::?relay`   ; Banked call to: Toggle
//  468 	  Toggle(Output_3);
        ; Setup parameters for call to function Toggle
        MOV     R1,#0x3
        LCALL   `??Toggle::?relay`   ; Banked call to: Toggle
//  469 	  zclSampleTemperatureSensor_SendState(Output_1);
        ; Setup parameters for call to function zclSampleTemperatureSensor_SendState
        MOV     R1,#0x1
        LCALL   `??zclSampleTemperatureSensor_SendState::?relay`; Banked call to: zclSampleTemperatureSensor_SendState
//  470 	  return (events ^ SAMPLETEMPERATURESENSOR_SW3);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x8
        LJMP    ??zclSampleTemperatureSensor_event_loop_19 & 0xFFFF
//  471 	}
//  472 
//  473 /****************************************
//  474  *  Check event button 
//  475  * 	
//  476  ****************************************/
//  477 
//  478 
//  479   if ( events & SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT )
??zclSampleTemperatureSensor_event_loop_26:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??zclSampleTemperatureSensor_event_loop_27
//  480   {
//  481   	//UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT");
//  482     zclSampleTemperatureSensor_SendTemp();			
        ; Setup parameters for call to function zclSampleTemperatureSensor_SendTemp
        LCALL   `??zclSampleTemperatureSensor_SendTemp::?relay`; Banked call to: zclSampleTemperatureSensor_SendTemp
//  483 	//UART_SendString(HAL_UART_PORT_0,"Teddy_sample");	
//  484     // report current temperature reading every 10 seconds
//  485     //osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT, SAMPLETEMPERATURESENSOR_REPORT_INTERVAL );
//  486 
//  487     return ( events ^ SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT );
        MOV     A,R6
        XRL     A,#0x10
        LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
//  488   }
//  489 	/*--------------------------------------------------------------------------*/
//  490 	if ( events & SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT )
??zclSampleTemperatureSensor_event_loop_27:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??zclSampleTemperatureSensor_event_loop_28
//  491   {
//  492 		if (FLAG_JOIN_CONFIRM == FALSE && FLAG_BINDING == FALSE)
        MOV     DPTR,#FLAG_JOIN_CONFIRM
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_event_loop_29
        MOV     DPTR,#FLAG_BINDING
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_event_loop_30
//  493 		{
//  494 			zclSampleTemperatureSensor_BindingProcess();
        ; Setup parameters for call to function zclSampleTemperatureSensor_BindingProcess
        LCALL   `??zclSampleTemperatureSensor_BindingProcess::?r`; Banked call to: zclSampleTemperatureSensor_BindingProcess
//  495 			// Stop binding after 100ms (time for process...)
//  496 			osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT, 5000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_1388
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        SJMP    ??zclSampleTemperatureSensor_event_loop_30
//  497 		}
//  498 		else if (FLAG_JOIN_CONFIRM == TRUE && FLAG_BINDING == TRUE)
??zclSampleTemperatureSensor_event_loop_29:
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_event_loop_30
        MOV     DPTR,#FLAG_BINDING
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_event_loop_30
//  499 		{
//  500 			zclSampleTemperatureSensor_BindingProcess();
        ; Setup parameters for call to function zclSampleTemperatureSensor_BindingProcess
        LCALL   `??zclSampleTemperatureSensor_BindingProcess::?r`; Banked call to: zclSampleTemperatureSensor_BindingProcess
//  501 		}
//  502 		
//  503 		UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT");
??zclSampleTemperatureSensor_event_loop_30:
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">_4` & 0xff
        MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">_4` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
//  504 
//  505     return ( events ^ SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT );
        MOV     A,R6
        XRL     A,#0x20
        SJMP    ??zclSampleTemperatureSensor_event_loop_3
//  506   }
//  507 	/*--------------------------------------------------------------------------*/
//  508 	if ( events & SAMPLETEMPERATURESENSOR_UART_REPLY_CMD_EVT )
??zclSampleTemperatureSensor_event_loop_28:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??zclSampleTemperatureSensor_event_loop_31
//  509   {
//  510 		// My apps
//  511 		if (UART_ParseRxPackage(HAL_UART_PORT_0))
        ; Setup parameters for call to function UART_ParseRxPackage
        MOV     R1,#0x0
        LCALL   `??UART_ParseRxPackage::?relay`; Banked call to: UART_ParseRxPackage
        MOV     A,R1
        JZ      ??zclSampleTemperatureSensor_event_loop_32
//  512 		{
//  513 			ZCMD_ReplyCMD();
        ; Setup parameters for call to function ZCMD_ReplyCMD
        LCALL   `??ZCMD_ReplyCMD::?relay`; Banked call to: ZCMD_ReplyCMD
//  514 		}
//  515 
//  516 		// Restart timer
//  517     if ( UART_PARSE_RX_PACKAGE_EVT_PERIOD )
//  518     {
//  519       osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_UART_REPLY_CMD_EVT, UART_PARSE_RX_PACKAGE_EVT_PERIOD );
??zclSampleTemperatureSensor_event_loop_32:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_a
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  520     }		
//  521     return (events ^ SAMPLETEMPERATURESENSOR_UART_REPLY_CMD_EVT);
        MOV     A,R6
        XRL     A,#0x40
        SJMP    ??zclSampleTemperatureSensor_event_loop_3
//  522   }
//  523 	/*--------------------------------------------------------------------------*/
//  524 	if ( events & SAMPLETEMPERATURESENSOR_CHECK_SYSTEM_EVT )
??zclSampleTemperatureSensor_event_loop_31:
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??zclSampleTemperatureSensor_event_loop_33
//  525   {
//  526 		// My apps
//  527 		if ( (FLAG_JOIN_CONFIRM == FALSE) || (FLAG_JOIN_CONFIRM == TRUE && FLAG_BINDING == TRUE && FLAG_HARD_BINDING == FALSE) )
        MOV     DPTR,#FLAG_JOIN_CONFIRM
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_event_loop_34
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_event_loop_35
        MOV     DPTR,#FLAG_BINDING
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_event_loop_35
        MOV     DPTR,#FLAG_HARD_BINDING
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_event_loop_35
//  528 		{
//  529 			osal_set_event( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT );
??zclSampleTemperatureSensor_event_loop_34:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  530 		}	
//  531 
//  532 		// Restart timer
//  533     if ( CHECK_SYSTEM_EVT_PERIOD )
//  534     {
//  535       osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_CHECK_SYSTEM_EVT, CHECK_SYSTEM_EVT_PERIOD );
??zclSampleTemperatureSensor_event_loop_35:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_2710
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  536     }		
//  537     return (events ^ SAMPLETEMPERATURESENSOR_CHECK_SYSTEM_EVT);
        MOV     A,R6
        XRL     A,#0x80
??zclSampleTemperatureSensor_event_loop_3:
        MOV     R2,A
        MOV     A,R7
??zclSampleTemperatureSensor_event_loop_19:
        MOV     R3,A
        SJMP    ??zclSampleTemperatureSensor_event_loop_36
//  538   }
//  539 	
//  540 	/*--------------------------------------------------------------------------*/
//  541 
//  542   // Discard unknown events
//  543   return 0;
??zclSampleTemperatureSensor_event_loop_33:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclSampleTemperatureSensor_event_loop_36:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
//  544 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zclSampleTemperatureSensor_event_loop
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG XDATA_I:XDATA:NOROOT(0)
??clusterIDs:
        DATA16
        DS 2
        REQUIRE `?<Initializer for clusterIDs>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zclSampleTemperatureSensor_IdentifyQueryRspCB
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond6) CFA_SP SP+-7
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0
//  545 
//  546 /*********************************************************************
//  547  * @fn      zclSampleTemperatureSensor_HandleKeys
//  548  *
//  549  * @brief   Handles all key events for this device.
//  550  *
//  551  * @param   shift - true if in shift/alt.
//  552  * @param   keys - bit field for key events. Valid entries:
//  553  *                 HAL_KEY_SW_5
//  554  *                 HAL_KEY_SW_4
//  555  *                 HAL_KEY_SW_3
//  556  *                 HAL_KEY_SW_2
//  557  *                 HAL_KEY_SW_1
//  558  *
//  559  * @return  none
//  560  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zclSampleTemperatureSensor_BindingProcess
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond9) CFA_SP SP+-7
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zclSampleTemperatureSensor_event_loop
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclSampleTemperatureSensor_IdentifyQueryRspCB
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond11) CFA_SP SP+-7
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_EZModeAction
        ; Setup parameters for call to function zcl_EZModeAction
        ; Setup parameters for call to function zcl_InvokeEZMode
        ; Setup parameters for call to function zcl_InvokeEZMode
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  561 static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys )
zclSampleTemperatureSensor_HandleKeys:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_HandleKeys
        CODE
//  562 {
        FUNCALL zclSampleTemperatureSensor_HandleKeys, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, UART_DebugPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, zcl_InvokeEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, zclSampleTemperatureSensor_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_HandleKeys, zclSampleTemperatureSensor_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  563      if ( keys & HAL_KEY_SW_9 ) 
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclSampleTemperatureSensor_HandleKeys_0
//  564 	{
//  565        osal_set_event(zclSampleTemperatureSensor_TaskID,SAMPLETEMPERATURESENSOR_SW3);	
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  566 	}
//  567 	if ( keys & HAL_KEY_SW_7 ) //~ sw2 on board
??zclSampleTemperatureSensor_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.6
        JNC     ??zclSampleTemperatureSensor_HandleKeys_1
//  568 	{
//  569 		
//  570        osal_set_event(zclSampleTemperatureSensor_TaskID,SAMPLETEMPERATURESENSOR_SW2);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x4
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  571 	}
//  572 	if ( keys & HAL_KEY_SW_6 ) //~ SW1 on board
??zclSampleTemperatureSensor_HandleKeys_1:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.5
        JNC     ??zclSampleTemperatureSensor_HandleKeys_2
//  573 	{
//  574 	osal_set_event(zclSampleTemperatureSensor_TaskID,SAMPLETEMPERATURESENSOR_SW1);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x2
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  575 	}
//  576 
//  577   if ( keys & HAL_KEY_SW_8 ) //~ SW3 on board
??zclSampleTemperatureSensor_HandleKeys_2:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JC      $+5
        LJMP    ??zclSampleTemperatureSensor_HandleKeys_3 & 0xFFFF
//  578   {
//  579   	UART_DebugPrint(HAL_UART_PORT_0, "SW8");
        ; Setup parameters for call to function UART_DebugPrint
        MOV     R2,#`?<Constant "SW8">` & 0xff
        MOV     R3,#(`?<Constant "SW8">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
//  580     if ( ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE ) ||
//  581         ( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE ) )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_HandleKeys_4
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_3
//  582     {
//  583       giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
??zclSampleTemperatureSensor_HandleKeys_4:
        CLR     A
        MOVX    @DPTR,A
//  584 
//  585 			FLAG_BINDING = !FLAG_BINDING;
        MOV     DPTR,#FLAG_BINDING
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_5
        MOV     A,#0x1
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_6
??zclSampleTemperatureSensor_HandleKeys_5:
        CLR     A
??zclSampleTemperatureSensor_HandleKeys_6:
        MOVX    @DPTR,A
//  586 			FLAG_HARD_BINDING = !FLAG_HARD_BINDING;
        MOV     DPTR,#FLAG_HARD_BINDING
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_7
        MOV     A,#0x1
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_8
??zclSampleTemperatureSensor_HandleKeys_7:
        CLR     A
??zclSampleTemperatureSensor_HandleKeys_8:
        LCALL   ?Subroutine3 & 0xFFFF
//  587 		#ifdef ZCL_EZMODE
//  588       zclEZMode_InvokeData_t ezModeData;
//  589       static uint16 clusterIDs[] = { ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT };   // only bind on the Temperature Measurement cluster
//  590 
//  591       // Invoke EZ-Mode
//  592       ezModeData.endpoint = SAMPLETEMPERATURESENSOR_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  593       if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
//  594            ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER )   ||
//  595            ( zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE ) )
??CrossCallReturnLabel_2:
        JZ      ??zclSampleTemperatureSensor_HandleKeys_9
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleTemperatureSensor_HandleKeys_9
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_10
//  596       {
//  597         ezModeData.onNetwork = TRUE;      // node is already on the network
??zclSampleTemperatureSensor_HandleKeys_9:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_11
//  598       }
//  599       else
//  600       {
//  601         ezModeData.onNetwork = FALSE;     // node is not yet on the network
??zclSampleTemperatureSensor_HandleKeys_10:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??zclSampleTemperatureSensor_HandleKeys_11:
        MOVX    @DPTR,A
//  602       }
//  603       ezModeData.initiator = TRUE;        // Temperature Sensor is an initiator
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  604       ezModeData.numActiveInClusters = 1;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  605       ezModeData.pActiveInClusterIDs = clusterIDs;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??clusterIDs & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??clusterIDs >> 8) & 0xff
        MOVX    @DPTR,A
//  606       ezModeData.numActiveOutClusters = 0;   // active output cluster
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  607       ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine13_0 & 0xFFFF
//  608       zcl_InvokeEZMode( &ezModeData );
??CrossCallReturnLabel_21:
        LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
//  609 
//  610 			#ifdef LCD_SUPPORTED
//  611       HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "EZMode">` & 0xff
        MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  612 			#endif
//  613 
//  614       // NOT ZCL_EZMODE, Use EndDeviceBind
//  615 		#else
//  616       {
//  617         zAddrType_t dstAddr;
//  618         dstAddr.addrMode = Addr16Bit;
//  619         dstAddr.addr.shortAddr = 0;   // Coordinator makes the EDB match
//  620 
//  621         // Initiate an End Device Bind Request, this bind request will
//  622         // only use a cluster list that is important to binding.
//  623         HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  624         ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  625                               SAMPLETEMPERATURESENSOR_ENDPOINT,
//  626                               ZCL_HA_PROFILE_ID,
//  627                               0, NULL,
//  628                               ZCLSAMPLETEMPERATURESENSOR_BINDINGLIST, bindingOutClusters,
//  629                               FALSE );
//  630       }
//  631 		#endif // ZCL_EZMODE
//  632     }
//  633   }
//  634 
//  635   if ( keys & HAL_KEY_SW_4 )
??zclSampleTemperatureSensor_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zclSampleTemperatureSensor_HandleKeys_12
//  636   {
//  637     giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
        MOVX    @DPTR,A
//  638 
//  639     if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
//  640          ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleTemperatureSensor_HandleKeys_13
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_12
//  641     {
//  642       zAddrType_t tmpAddr;
//  643 
//  644       tmpAddr.addrMode = Addr16Bit;
??zclSampleTemperatureSensor_HandleKeys_13:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  645       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  646 
//  647       // toggle permit join
//  648       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_HandleKeys_14
        CLR     A
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_15
??zclSampleTemperatureSensor_HandleKeys_14:
        MOV     A,#-0x1
??zclSampleTemperatureSensor_HandleKeys_15:
        MOVX    @DPTR,A
//  649 
//  650       // Trust Center significance is always true
//  651       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  652     }
//  653   }
//  654 
//  655   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zclSampleTemperatureSensor_HandleKeys_12:
        MOV     A,R6
        JZ      ??zclSampleTemperatureSensor_HandleKeys_16
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleTemperatureSensor_HandleKeys_17
//  656   {
//  657     zclSampleTemperatureSensor_BasicResetCB();
        ; Setup parameters for call to function zclSampleTemperatureSensor_BasicResetCB
        LCALL   `??zclSampleTemperatureSensor_BasicResetCB::?rel`; Banked call to: zclSampleTemperatureSensor_BasicResetCB
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_17
//  658   }
//  659   else if ( keys & HAL_KEY_SW_5 )
??zclSampleTemperatureSensor_HandleKeys_16:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleTemperatureSensor_HandleKeys_17
//  660   {
//  661     if ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_18
//  662     {
//  663       giTemperatureSensorScreenMode = TEMPSENSE_HELPMODE;
        MOV     A,#0x1
        SJMP    ??zclSampleTemperatureSensor_HandleKeys_19
//  664     }
//  665     else if ( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE )
??zclSampleTemperatureSensor_HandleKeys_18:
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_HandleKeys_17
//  666     {
//  667 #ifdef LCD_SUPPORTED
//  668       HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#sClearLine & 0xff
        MOV     R3,#(sClearLine >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  669 #endif
//  670       giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
        MOV     DPTR,#giTemperatureSensorScreenMode
        CLR     A
??zclSampleTemperatureSensor_HandleKeys_19:
        MOVX    @DPTR,A
//  671     }
//  672   }
//  673 
//  674   // update display
//  675   zclSampleTemperatureSensor_LcdDisplayUpdate();
??zclSampleTemperatureSensor_HandleKeys_17:
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayUpdate
        LCALL   `??zclSampleTemperatureSensor_LcdDisplayUpdate::`; Banked call to: zclSampleTemperatureSensor_LcdDisplayUpdate
//  676 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
//  677 
//  678 /*********************************************************************
//  679  * @fn      zclSampleTemperatureSensor_LcdDisplayUpdate
//  680  *
//  681  * @brief   Called to update the LCD display.
//  682  *
//  683  * @param   none
//  684  *
//  685  * @return  none
//  686  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  687 void zclSampleTemperatureSensor_LcdDisplayUpdate( void )
zclSampleTemperatureSensor_LcdDisplayUpdate:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_LcdDisplayUpdate
        CODE
//  688 {
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, zclSampleTemperatureSensor_LcdDisplayHelpMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayUpdate, zclSampleTemperatureSensor_LcdDisplayMainMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  689   // turn on red LED for temperatures >= 24.00C
//  690   if ( zclSampleTemperatureSensor_MeasuredValue >= 2400 )
//  691   {
//  692 //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  693 //    HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  694   }
//  695   // turn on green LED for temperatures <= 20.00C
//  696   else if ( zclSampleTemperatureSensor_MeasuredValue <= 2000 )
//  697   {
//  698 //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  699 //    HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
//  700   }
//  701   // turn on both red and green LEDs for temperatures between 20.00C and 24.00C
//  702   else
//  703   {
//  704 //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  705 //    HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  706   }
//  707 
//  708   if ( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayUpdate_0
//  709   {
//  710     zclSampleTemperatureSensor_LcdDisplayHelpMode();
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayHelpMode
        LCALL   ??zclSampleTemperatureSensor_LcdDisplayHelpMode; Banked call to: zclSampleTemperatureSensor_LcdDisplayHelpMode
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayUpdate_1
//  711   }
//  712   else
//  713   {
//  714     zclSampleTemperatureSensor_LcdDisplayMainMode();
??zclSampleTemperatureSensor_LcdDisplayUpdate_0:
        ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayMainMode
        LCALL   ??zclSampleTemperatureSensor_LcdDisplayMainMode; Banked call to: zclSampleTemperatureSensor_LcdDisplayMainMode
//  715   }
//  716 }
??zclSampleTemperatureSensor_LcdDisplayUpdate_1:
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock14
//  717 
//  718 /*********************************************************************
//  719  * @fn      zclSampleTemperatureSensor_LcdDisplayMainMode
//  720  *
//  721  * @brief   Called to display the main screen on the LCD.
//  722  *
//  723  * @param   none
//  724  *
//  725  * @return  none
//  726  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  727 void zclSampleTemperatureSensor_LcdDisplayMainMode( void )
zclSampleTemperatureSensor_LcdDisplayMainMode:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_LcdDisplayMainMode
        CODE
//  728 {
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  729   char sDisplayTemp[16];
//  730 
//  731   if ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD )
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_1
//  732   {
//  733     zclHA_LcdStatusLine1( 0 );
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x0
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_2
//  734   }
//  735   else if ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER )
??zclSampleTemperatureSensor_LcdDisplayMainMode_1:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_3
//  736   {
//  737     zclHA_LcdStatusLine1( 1 );
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x1
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_2
//  738   }
//  739   else if ( zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE )
??zclSampleTemperatureSensor_LcdDisplayMainMode_3:
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_4
//  740   {
//  741     zclHA_LcdStatusLine1( 2 );
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV     R1,#0x2
??zclSampleTemperatureSensor_LcdDisplayMainMode_2:
        LCALL   `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
//  742   }
//  743 
//  744   // display current temperature
//  745   osal_memcpy(sDisplayTemp, "TEMP: ", 6);
??zclSampleTemperatureSensor_LcdDisplayMainMode_4:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "TEMP: ">` & 0xff
        MOV     ?V1,#(`?<Constant "TEMP: ">` >> 8) & 0xff
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  746   _ltoa( ( zclSampleTemperatureSensor_MeasuredValue / 100 ), (void *)(&sDisplayTemp[6]), 10 );   // convert temperature to whole number
        ; Setup parameters for call to function _ltoa
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0,DPL
        MOV     ?V1,DPH
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R4,A
        MOV     R5,A
        MOV     R1,#0xa
        LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  747   osal_memcpy( &sDisplayTemp[8], "C", 2 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#`?<Constant "C">` & 0xff
        MOV     ?V1,#(`?<Constant "C">` >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  748 #ifdef LCD_SUPPORTED
//  749   HalLcdWriteString( (char *)sDisplayTemp, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  750 #endif
//  751 
//  752 #ifdef LCD_SUPPORTED
//  753   if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
//  754        ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleTemperatureSensor_LcdDisplayMainMode_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_6
//  755   {
//  756     // display help key with permit join status
//  757     if ( gPermitDuration )
??zclSampleTemperatureSensor_LcdDisplayMainMode_5:
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        MOV     R1,#0x3
        JZ      ??zclSampleTemperatureSensor_LcdDisplayMainMode_7
//  758     {
//  759       HalLcdWriteString( "SW5: Help      *", HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "SW5: Help      *">` & 0xff
        MOV     R3,#(`?<Constant "SW5: Help      *">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_8
//  760     }
//  761     else
//  762     {
//  763       HalLcdWriteString( "SW5: Help       ", HAL_LCD_LINE_3 );
??zclSampleTemperatureSensor_LcdDisplayMainMode_7:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R2,#`?<Constant "SW5: Help       ">` & 0xff
        MOV     R3,#(`?<Constant "SW5: Help       ">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_8
//  764     }
//  765   }
//  766   else
//  767   {
//  768     // display help key
//  769     HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
??zclSampleTemperatureSensor_LcdDisplayMainMode_6:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sSwHelp & 0xff
        MOV     R3,#(sSwHelp >> 8) & 0xff
??zclSampleTemperatureSensor_LcdDisplayMainMode_8:
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  770   }
//  771 #endif
//  772 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15
//  773 
//  774 /*********************************************************************
//  775  * @fn      zclSampleTemperatureSensor_LcdDisplayHelpMode
//  776  *
//  777  * @brief   Called to display the SW options on the LCD.
//  778  *
//  779  * @param   none
//  780  *
//  781  * @return  none
//  782  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  783 void zclSampleTemperatureSensor_LcdDisplayHelpMode( void )
zclSampleTemperatureSensor_LcdDisplayHelpMode:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_LcdDisplayHelpMode
        CODE
//  784 {
        FUNCALL zclSampleTemperatureSensor_LcdDisplayHelpMode, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayHelpMode, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_LcdDisplayHelpMode, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  785 #ifdef LCD_SUPPORTED
//  786   HalLcdWriteString( (char *)sSwTempUp, HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#sSwTempUp & 0xff
        MOV     R3,#(sSwTempUp >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  787   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#sSwEZMode & 0xff
        MOV     R3,#(sSwEZMode >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  788   HalLcdWriteString( (char *)sSwTempDown, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#sSwTempDown & 0xff
        MOV     R3,#(sSwTempDown >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  789 #endif
//  790 }
        SJMP    ??Subroutine14_0
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock17
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine14_0:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock18
//  791 
//  792 /*********************************************************************
//  793  * @fn      zclSampleTemperatureSensor_SendTemp
//  794  *
//  795  * @brief   Called to send current temperature information to the thermostat
//  796  *
//  797  * @param   none
//  798  *
//  799  * @return  none
//  800  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  801 static void zclSampleTemperatureSensor_SendTemp( void )
zclSampleTemperatureSensor_SendTemp:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_SendTemp
        CODE
//  802 {
        FUNCALL zclSampleTemperatureSensor_SendTemp, CheckOutputState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendTemp, CheckOutputState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendTemp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendTemp, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendTemp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  803 	// if (DHT11_GetValue() == 0)
//  804 	// {
//  805 		// zclSampleTemperatureSensor_MeasuredValue = BUILD_UINT16(69, 96);
//  806 	// }
//  807 	// else
//  808 	// {
//  809 		// zclSampleTemperatureSensor_MeasuredValue = DHT11_GetPackageValue();
//  810 	// }
//  811 
//  812 	// //HalLedBlink ( HAL_LED_1, 1, 50, 500 );
//  813 	// UART_DebugPrintNum(HAL_UART_PORT_0, NLME_GetShortAddr());
//  814 	// UART_DebugPrint(HAL_UART_PORT_0, "");
//  815 	// UART_DebugPrintNum(HAL_UART_PORT_0, NLME_GetCoordShortAddr());
//  816 	// UART_DebugPrint(HAL_UART_PORT_0, "");
//  817 	// UART_DebugPrintNum(HAL_UART_PORT_0, zclSampleTemperatureSensor_MeasuredValue);
//  818 	
//  819 	// UART_SendNum(HAL_UART_PORT_0,zclSampleTemperatureSensor_MeasuredValue);
//  820 	// UART_DebugPrint(HAL_UART_PORT_0, "");
//  821 	uint8 state1;
//  822 	uint8 state2;
//  823 	uint16 pos1 = 21;
//  824 	uint16 pos2 = 22;
//  825 	uint16 data1;
//  826 	uint16 data2;
//  827 
//  828 	state1 = CheckOutputState(Output_2);
        ; Setup parameters for call to function CheckOutputState
        MOV     R1,#0x2
        LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
        MOV     A,R1
        MOV     R6,A
//  829 	state2 = CheckOutputState(Output_3);
        ; Setup parameters for call to function CheckOutputState
        MOV     R1,#0x3
        LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
        MOV     A,R1
        MOV     R2,A
//  830 	data1 = BUILD_UINT16(state1,pos1);
        MOV     A,R6
        MOV     R0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x15
        MOVX    @DPTR,A
//  831 	data2 = BUILD_UINT16(state2,pos2);
        MOV     A,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x16
        MOVX    @DPTR,A
//  832 	
//  833 	#ifdef ZCL_REPORT
//  834   zclReportCmd_t *pReportCmd;
//  835 	
//  836   pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + 2 * sizeof(zclReport_t) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
//  837   if ( pReportCmd != NULL )
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleTemperatureSensor_SendTemp_0
//  838   {
//  839     pReportCmd->numAttr = 2;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x2
        MOVX    @DPTR,A
//  840 		// Data
//  841     pReportCmd->attrList[0].attrID = ATTRID_MS_TEMPERATURE_MEASURED_VALUE;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine6 & 0xFFFF
//  842     pReportCmd->attrList[0].dataType = ZCL_DATATYPE_INT16;
??CrossCallReturnLabel_6:
        MOV     A,#0x29
        MOVX    @DPTR,A
//  843     pReportCmd->attrList[0].attrData = (void *)(&data1);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine4 & 0xFFFF
//  844 
//  845     pReportCmd->attrList[1].dataType = ZCL_DATATYPE_INT16;
//  846     pReportCmd->attrList[1].attrData = (void *)(&data2);	
//  847 		
//  848     zcl_SendReportCmd( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_DstAddr,
//  849                        ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
//  850                        pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, zclSampleTemperatureSensorSeqNum++ );
//  851   }
??CrossCallReturnLabel_4:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x29
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V2,#0x1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x2
        MOV     R5,#0x4
        MOV     R2,#zclSampleTemperatureSensor_DstAddr & 0xff
        MOV     R3,#(zclSampleTemperatureSensor_DstAddr >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  852 
//  853   osal_mem_free( pReportCmd );
??zclSampleTemperatureSensor_SendTemp_0:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  854 	#endif  // ZCL_REPORT
//  855 }
        MOV     A,#0x4
          CFI EndBlock cfiBlock19
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Valid
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_SendTemp
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zclSampleTemperatureSensor_SendTemp
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_17:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23
//  856 
//  857 //----------------------------
//  858 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  859 static void zclSampleTemperatureSensor_SendState(OUTPUT_TypeDef OUTX)
zclSampleTemperatureSensor_SendState:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_SendState
        CODE
//  860 {
        FUNCALL zclSampleTemperatureSensor_SendState, CheckOutputState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendState, CheckOutputState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendState, CheckOutputState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendState, UART_SendNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendState, UART_SendString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendState, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendState, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_SendState, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        MOV     R6,A
//  861 	uint8 pos;
//  862 	uint16 state;
//  863 	uint8 temp_s;
//  864 	 if(OUTX == 1)
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??zclSampleTemperatureSensor_SendState_0
//  865      {
//  866 		 temp_s = CheckOutputState(Output_1);
        ; Setup parameters for call to function CheckOutputState
        MOV     R1,#0x1
        LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
        MOV     A,R1
        MOV     R2,A
//  867 		 pos = 23;
        MOV     R0,#0x17
        SJMP    ??zclSampleTemperatureSensor_SendState_1
//  868 	 }
//  869 	 else if (OUTX == 2)
??zclSampleTemperatureSensor_SendState_0:
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclSampleTemperatureSensor_SendState_2
//  870 	 {
//  871 		 temp_s = CheckOutputState(Output_2);
        ; Setup parameters for call to function CheckOutputState
        MOV     R1,#0x2
        LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
        MOV     A,R1
        MOV     R2,A
//  872 		 pos = 21;
        MOV     R0,#0x15
        SJMP    ??zclSampleTemperatureSensor_SendState_1
//  873 	 }
//  874 	 else if (OUTX == 3)
??zclSampleTemperatureSensor_SendState_2:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??zclSampleTemperatureSensor_SendState_1
//  875 	 {
//  876 		 temp_s = CheckOutputState(Output_3);
        ; Setup parameters for call to function CheckOutputState
        MOV     R1,#0x3
        LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
        MOV     A,R1
        MOV     R2,A
//  877 		 pos = 22;
        MOV     R0,#0x16
//  878 	 }
//  879 	 state = BUILD_UINT16(temp_s,pos);
??zclSampleTemperatureSensor_SendState_1:
        MOV     A,R0
        MOV     R1,A
        MOV     A,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  880 	 UART_SendNum(HAL_UART_PORT_0,state);
        ; Setup parameters for call to function UART_SendNum
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,?V0
        MOV     R3,A
        CLR     A
        MOV     R4,A
        MOV     R5,A
        MOV     R1,A
        LCALL   `??UART_SendNum::?relay`; Banked call to: UART_SendNum
//  881 	 UART_SendString(HAL_UART_PORT_0,"!\n");
        ; Setup parameters for call to function UART_SendString
        MOV     R2,#`?<Constant "!\\n">` & 0xff
        MOV     R3,#(`?<Constant "!\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_SendString::?relay`; Banked call to: UART_SendString
//  882 	
//  883 	#ifdef ZCL_REPORT
//  884   zclReportCmd_t *pReportCmd;
//  885 	
//  886   pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + 1 * sizeof(zclReport_t) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
//  887   if ( pReportCmd != NULL )
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleTemperatureSensor_SendState_3
//  888   {
//  889     pReportCmd->numAttr = 1;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x1
        MOVX    @DPTR,A
//  890 		// Data
//  891     pReportCmd->attrList[0].attrID = ATTRID_SENDSTATE;
        INC     DPTR
        MOV     A,#0x6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x60
        LCALL   ?Subroutine6 & 0xFFFF
//  892     pReportCmd->attrList[0].dataType = ZCL_DATATYPE_UINT16;
??CrossCallReturnLabel_7:
        MOV     A,#0x21
        MOVX    @DPTR,A
//  893     pReportCmd->attrList[0].attrData = (void *)(&state);
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine2 & 0xFFFF
//  894 
//  895     // pReportCmd->attrList[1].attrID = NLME_GetCoordShortAddr();
//  896     // pReportCmd->attrList[1].dataType = ZCL_DATATYPE_UINT8;
//  897     // pReportCmd->attrList[1].attrData = (void *)(&state);
//  898 		
//  899     zcl_SendReportCmd( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_DstAddr,
//  900                        ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
//  901                        pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, zclSampleTemperatureSensorSeqNum++ );
//  902   }
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V2,#0x1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x2
        MOV     R5,#0x4
        MOV     R2,#zclSampleTemperatureSensor_DstAddr & 0xff
        MOV     R3,#(zclSampleTemperatureSensor_DstAddr >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  903   osal_mem_free( pReportCmd );
??zclSampleTemperatureSensor_SendState_3:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  904 	#endif  // ZCL_REPORT
//  905 }
        MOV     A,#0x2
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_SendTemp
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclSampleTemperatureSensor_SendState
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        RET
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_SendTemp
          CFI Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclSampleTemperatureSensor_SendTemp
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_5
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-4
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclSampleTemperatureSensor_SendTemp
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_6
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-4
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclSampleTemperatureSensor_SendState
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_7
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-4
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_SendTemp
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zclSampleTemperatureSensor_SendState
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?XSP + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#zclSampleTemperatureSensorSeqNum
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendReportCmd
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV     A,R0
        MOV     ?V2,A
        MOV     R0,#?V2
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35
//  906 
//  907 /*********************************************************************
//  908  * @fn      zclSampleTemperatureSensor_ProcessIdentifyTimeChange
//  909  *
//  910  * @brief   Called to process any change to the IdentifyTime attribute.
//  911  *
//  912  * @param   none
//  913  *
//  914  * @return  none
//  915  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  916 static void zclSampleTemperatureSensor_ProcessIdentifyTimeChange( void )
zclSampleTemperatureSensor_ProcessIdentifyTimeChange:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        CODE
//  917 {
        FUNCALL zclSampleTemperatureSensor_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  918   if ( zclSampleTemperatureSensor_IdentifyTime > 0 )
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleTemperatureSensor_ProcessIdentifyTim_1
//  919   {
//  920     osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        SJMP    ??zclSampleTemperatureSensor_ProcessIdentifyTim_2
//  921     //HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
//  922   }
//  923   else
//  924   {
//  925     if ( zclSampleTemperatureSensor_OnOff )
??zclSampleTemperatureSensor_ProcessIdentifyTim_1:
        MOV     DPTR,#zclSampleTemperatureSensor_OnOff
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_ProcessIdentifyTim_3
//  926     {
//  927       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleTemperatureSensor_ProcessIdentifyTim_4
//  928     }
//  929     else
//  930     {
//  931       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
??zclSampleTemperatureSensor_ProcessIdentifyTim_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleTemperatureSensor_ProcessIdentifyTim_4:
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  932     }
//  933 
//  934     osal_stop_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  935   }
//  936 }
??zclSampleTemperatureSensor_ProcessIdentifyTim_2:
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock36
//  937 
//  938 /*********************************************************************
//  939  * @fn      zclSampleTemperatureSensor_BasicResetCB
//  940  *
//  941  * @brief   Callback from the ZCL General Cluster Library
//  942  *          to set all the Basic Cluster attributes to default values.
//  943  *
//  944  * @param   none
//  945  *
//  946  * @return  none
//  947  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  948 static void zclSampleTemperatureSensor_BasicResetCB( void )
zclSampleTemperatureSensor_BasicResetCB:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_BasicResetCB
        CODE
//  949 {
        FUNCALL zclSampleTemperatureSensor_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_BasicResetCB, MT_SysCommandProcessing
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  950   // Put device back to factory default settings
//  951   zgWriteStartupOptions( ZG_STARTUP_SET, 3 );   // bit set both default configuration and default network
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x3
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  952 
//  953   // restart device
//  954   MT_SysCommandProcessing( aProcessCmd );
        ; Setup parameters for call to function MT_SysCommandProcessing
        MOV     R2,#aProcessCmd & 0xff
        MOV     R3,#(aProcessCmd >> 8) & 0xff
        LCALL   `??MT_SysCommandProcessing::?relay`; Banked call to: MT_SysCommandProcessing
//  955 }
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock37
//  956 
//  957 /*********************************************************************
//  958  * @fn      zclSampleTemperatureSensor_IdentifyCB
//  959  *
//  960  * @brief   Callback from the ZCL General Cluster Library when
//  961  *          it received an Identity Command for this application.
//  962  *
//  963  * @param   srcAddr - source address and endpoint of the response message
//  964  * @param   identifyTime - the number of seconds to identify yourself
//  965  *
//  966  * @return  none
//  967  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  968 static void zclSampleTemperatureSensor_IdentifyCB( zclIdentify_t *pCmd )
zclSampleTemperatureSensor_IdentifyCB:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_IdentifyCB
        CODE
//  969 {
        FUNCALL zclSampleTemperatureSensor_IdentifyCB, zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  970   zclSampleTemperatureSensor_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  971   zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
//  972 }
        LJMP    ??Subroutine14_0 & 0xFFFF
          CFI EndBlock cfiBlock38
//  973 
//  974 /*********************************************************************
//  975  * @fn      zclSampleTemperatureSensor_IdentifyQueryRspCB
//  976  *
//  977  * @brief   Callback from the ZCL General Cluster Library when
//  978  *          it received an Identity Query Response Command for this application.
//  979  *
//  980  * @param   srcAddr - requestor's address
//  981  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  982  *
//  983  * @return  none
//  984  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  985 static void zclSampleTemperatureSensor_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp )
zclSampleTemperatureSensor_IdentifyQueryRspCB:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_IdentifyQueryRspCB
        CODE
//  986 {
        FUNCALL zclSampleTemperatureSensor_IdentifyQueryRspCB, zcl_EZModeAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  987   (void)pRsp;
//  988 #ifdef ZCL_EZMODE
//  989   {
//  990     zclEZMode_ActionData_t data;
//  991     data.pIdentifyQueryRsp = pRsp;
        LCALL   ?Subroutine5 & 0xFFFF
//  992     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
//  993   }
??CrossCallReturnLabel_20:
        MOV     R1,#0x4
        LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  994 #endif
//  995 }
        MOV     A,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock39
//  996 
//  997 /******************************************************************************
//  998  *
//  999  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1000  *
// 1001  *****************************************************************************/
// 1002 
// 1003 /*********************************************************************
// 1004  * @fn      zclSampleTemperatureSensor_ProcessIncomingMsg
// 1005  *
// 1006  * @brief   Process ZCL Foundation incoming message
// 1007  *
// 1008  * @param   pInMsg - pointer to the received message
// 1009  *
// 1010  * @return  none
// 1011  */
// 1012 static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
// 1013 {
// 1014   switch ( pInMsg->zclHdr.commandID )
// 1015   {
// 1016 #ifdef ZCL_READ
// 1017     case ZCL_CMD_READ_RSP:
// 1018       zclSampleTemperatureSensor_ProcessInReadRspCmd( pInMsg );
// 1019       break;
// 1020 #endif
// 1021 #ifdef ZCL_WRITE
// 1022     case ZCL_CMD_WRITE_RSP:
// 1023       zclSampleTemperatureSensor_ProcessInWriteRspCmd( pInMsg );
// 1024       break;
// 1025 #endif
// 1026 #ifdef ZCL_REPORT
// 1027     // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
// 1028     case ZCL_CMD_CONFIG_REPORT:
// 1029       //zclSampleTemperatureSensor_ProcessInConfigReportCmd( pInMsg );
// 1030       break;
// 1031 
// 1032     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1033       //zclSampleTemperatureSensor_ProcessInConfigReportRspCmd( pInMsg );
// 1034       break;
// 1035 
// 1036     case ZCL_CMD_READ_REPORT_CFG:
// 1037       //zclSampleTemperatureSensor_ProcessInReadReportCfgCmd( pInMsg );
// 1038       break;
// 1039 
// 1040     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1041       //zclSampleTemperatureSensor_ProcessInReadReportCfgRspCmd( pInMsg );
// 1042       break;
// 1043 
// 1044     case ZCL_CMD_REPORT:
// 1045       zclSampleTemperatureSensor_ProcessInReportCmd( pInMsg );
// 1046       break;
// 1047 #endif
// 1048     case ZCL_CMD_DEFAULT_RSP:
// 1049       zclSampleTemperatureSensor_ProcessInDefaultRspCmd( pInMsg );
// 1050       break;
// 1051 #ifdef ZCL_DISCOVER
// 1052     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1053       zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
// 1054       break;
// 1055 
// 1056     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1057       zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
// 1058       break;
// 1059 
// 1060     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1061       zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( pInMsg );
// 1062       break;
// 1063 
// 1064     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1065       zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1066       break;
// 1067 #endif
// 1068     default:
// 1069       break;
// 1070   }
// 1071 
// 1072   if ( pInMsg->attrCmd )
// 1073   {
// 1074     osal_mem_free( pInMsg->attrCmd );
// 1075   }
// 1076 }
// 1077 
// 1078 #ifdef ZCL_READ
// 1079 /*********************************************************************
// 1080  * @fn      zclSampleTemperatureSensor_ProcessInReadRspCmd
// 1081  *
// 1082  * @brief   Process the "Profile" Read Response Command
// 1083  *
// 1084  * @param   pInMsg - incoming message to process
// 1085  *
// 1086  * @return  none
// 1087  */
// 1088 static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1089 {
// 1090   zclReadRspCmd_t *readRspCmd;
// 1091   uint8 i;
// 1092 
// 1093   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1094   for ( i = 0; i < readRspCmd->numAttr; i++ )
// 1095   {
// 1096     // Notify the originator of the results of the original read attributes
// 1097     // attempt and, for each successfull request, the value of the requested
// 1098     // attribute
// 1099   }
// 1100 
// 1101   return ( TRUE );
// 1102 }
// 1103 #endif // ZCL_READ
// 1104 
// 1105 #ifdef ZCL_WRITE
// 1106 /*********************************************************************
// 1107  * @fn      zclSampleTemperatureSensor_ProcessInWriteRspCmd
// 1108  *
// 1109  * @brief   Process the "Profile" Write Response Command
// 1110  *
// 1111  * @param   pInMsg - incoming message to process
// 1112  *
// 1113  * @return  none
// 1114  */
// 1115 static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1116 {
// 1117   zclWriteRspCmd_t *writeRspCmd;
// 1118   uint8 i;
// 1119 
// 1120   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1121   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1122   {
// 1123     // Notify the device of the results of the its original write attributes
// 1124     // command.
// 1125   }
// 1126 
// 1127   return ( TRUE );
// 1128 }
// 1129 #endif // ZCL_WRITE
// 1130 
// 1131 #ifdef ZCL_REPORT
// 1132 /*********************************************************************
// 1133  * @fn      zclSampleTemperatureSensor_ProcessInReportCmd
// 1134  *
// 1135  * @brief   Process the "Profile" Report Command
// 1136  *
// 1137  * @param   pInMsg - incoming message to process
// 1138  *
// 1139  * @return  none
// 1140  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1141 static void zclSampleTemperatureSensor_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
zclSampleTemperatureSensor_ProcessInReportCmd:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInReportCmd
        CODE
// 1142 { 
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintNum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrintBuffer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_SendString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, TURN_on
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_SendString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, TURN_on
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, TURN_on
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, TURN_off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, TURN_off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, TURN_off
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_SendString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_ProcessInReportCmd, UART_ZCmdPrint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1143   zclReportCmd_t *pInReportCmd;	
// 1144   pInReportCmd = (zclReportCmd_t *)pInMsg->attrCmd;
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ??Subroutine15_0 & 0xFFFF
// 1145 
// 1146 	/******************************** FREE DATA *********************************/
// 1147 	if ( pInReportCmd->attrList[0].attrID == ATTRID_FREE_DATA )
??CrossCallReturnLabel_25:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R0
        ADD     A,#0x4
        MOV     ?V6,A
        CLR     A
        ADDC    A,R1
        MOV     ?V7,A
        MOV     A,R0
        ADD     A,#0x9
        MOV     ?V2,A
        CLR     A
        ADDC    A,R1
        MOV     ?V3,A
        MOV     A,R0
        ADD     A,#0x6
        MOV     ?V4,A
        CLR     A
        ADDC    A,R1
        MOV     ?V5,A
        MOV     A,#0x3
        XRL     A,R2
        JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_1
        MOV     A,#-0x60
        XRL     A,R3
??zclSampleTemperatureSensor_ProcessInReportCmd_1:
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_2 & 0xFFFF
// 1148 	{
// 1149 		uint8 i;
// 1150 		uint8 tmp_Data[20];
// 1151 				
// 1152 		if (FLAG_ECHO_RDATA)
        MOV     DPTR,#FLAG_ECHO_RDATA
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_3 & 0xFFFF
// 1153 		{
// 1154 			UART_ZCmdPrintString(HAL_UART_PORT_0, "@ZBR:");
        ; Setup parameters for call to function UART_ZCmdPrintString
        MOV     R2,#`?<Constant "@ZBR:">` & 0xff
        MOV     R3,#(`?<Constant "@ZBR:">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
// 1155 			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, msg_RSSI);																// RSSI
        ; Setup parameters for call to function UART_ZCmdPrintNum
        MOV     DPTR,#msg_RSSI
        MOVX    A,@DPTR
        MOV     R2,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
// 1156 			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
        MOV     ?V0,#`?<Constant ";">` & 0xff
        MOV     ?V1,#(`?<Constant ";">` >> 8) & 0xff
        ; Setup parameters for call to function UART_ZCmdPrintString
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
// 1157 			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInMsg->srcAddr.addr.shortAddr);					// shortAddr
        ; Setup parameters for call to function UART_ZCmdPrintNum
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,?V8
        MOV     R3,A
        CLR     A
        MOV     R4,A
        MOV     R5,A
        MOV     R1,A
        LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
// 1158 			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
        ; Setup parameters for call to function UART_ZCmdPrintString
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
// 1159 			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInMsg->srcAddr.endPoint);								// endPoint
        ; Setup parameters for call to function UART_ZCmdPrintNum
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        MOV     R1,A
        LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
// 1160 			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
        ; Setup parameters for call to function UART_ZCmdPrintString
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
// 1161 			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrID); 				// coordShortAddr
        ; Setup parameters for call to function UART_ZCmdPrintNum
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,?V4
        MOV     R3,A
        CLR     A
        MOV     R4,A
        MOV     R5,A
        MOV     R1,A
        LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
// 1162 			UART_ZCmdPrintString(HAL_UART_PORT_0, ";"); 
        ; Setup parameters for call to function UART_ZCmdPrintString
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
// 1163 			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrData[0]); 	// data size
        ; Setup parameters for call to function UART_ZCmdPrintNum
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        MOV     R1,A
        LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
// 1164 			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
        ; Setup parameters for call to function UART_ZCmdPrintString
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
// 1165 			
// 1166 			// eliminate DUMMY byte index[0]
// 1167 			for (i = 1; i <= pInReportCmd->attrList[1].attrData[0]; i++)
        MOV     R2,#0x1
        SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_4
// 1168 			{
// 1169 				tmp_Data[i-1] = pInReportCmd->attrList[0].attrData[i];
??zclSampleTemperatureSensor_ProcessInReportCmd_5:
        LCALL   ?Subroutine8 & 0xFFFF
// 1170 			}
??CrossCallReturnLabel_11:
        PUSH    A
          CFI CFA_SP SP+-1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_15:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
??zclSampleTemperatureSensor_ProcessInReportCmd_4:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R4,A
        CLR     C
        SUBB    A,R2
        JNC     ??zclSampleTemperatureSensor_ProcessInReportCmd_5
// 1171 			UART_ZCmdPrintBuffer(HAL_UART_PORT_0, tmp_Data, pInReportCmd->attrList[1].attrData[0]); 	// Free Data
        ; Setup parameters for call to function UART_ZCmdPrintBuffer
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrintBuffer::?relay`; Banked call to: UART_ZCmdPrintBuffer
// 1172 			UART_ZCmdPrint			(HAL_UART_PORT_0, "!");
        ; Setup parameters for call to function UART_ZCmdPrint
        MOV     R2,#`?<Constant "!">` & 0xff
        MOV     R3,#(`?<Constant "!">` >> 8) & 0xff
        LJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_6 & 0xFFFF
// 1173 		}
// 1174 		return;
// 1175 	}
// 1176 
// 1177 	if (pInReportCmd->attrList[0].attrID == ATTRID_CONTROL_DATA)
??zclSampleTemperatureSensor_ProcessInReportCmd_2:
        MOV     A,#0x7
        XRL     A,R2
        JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_7
        MOV     A,#-0x60
        XRL     A,R3
??zclSampleTemperatureSensor_ProcessInReportCmd_7:
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_8 & 0xFFFF
// 1178 	{
// 1179 		uint8 i;
// 1180 		char tmp_Data[20];
// 1181 		for (i = 1; i <= pInReportCmd->attrList[1].attrData[0]; i++)
        MOV     R2,#0x1
        SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_9
// 1182 		{
// 1183 			tmp_Data[i-1] = pInReportCmd->attrList[0].attrData[i];
??zclSampleTemperatureSensor_ProcessInReportCmd_10:
        LCALL   ?Subroutine8 & 0xFFFF
// 1184 		}
??CrossCallReturnLabel_12:
        PUSH    A
          CFI CFA_SP SP+-1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_16:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
??zclSampleTemperatureSensor_ProcessInReportCmd_9:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        CLR     C
        SUBB    A,R2
        JNC     ??zclSampleTemperatureSensor_ProcessInReportCmd_10
// 1185 		UART_SendString(HAL_UART_PORT_0,tmp_Data);
        ; Setup parameters for call to function UART_SendString
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   `??UART_SendString::?relay`; Banked call to: UART_SendString
// 1186 		if (strstr(tmp_Data,"R2;OUT3;1"))
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "R2;OUT3;1">` & 0xff
        MOV     R5,#(`?<Constant "R2;OUT3;1">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??strstr::?relay`   ; Banked call to: strstr
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_11
// 1187 		{
// 1188 			TURN_on(Output_1);
        ; Setup parameters for call to function TURN_on
        MOV     R1,#0x1
??zclSampleTemperatureSensor_ProcessInReportCmd_12:
        LCALL   `??TURN_on::?relay`  ; Banked call to: TURN_on
// 1189 		}
// 1190 		else if (strstr(tmp_Data,"R2;OUT1;1"))
// 1191 		{
// 1192 			TURN_on(Output_2);
// 1193 		}
// 1194 		else if (strstr(tmp_Data,"R2;OUT2;1"))
// 1195 		{
// 1196 			TURN_on(Output_3);
// 1197 		}
// 1198 		else if (strstr(tmp_Data,"R2;OUT3;0"))
// 1199 		{
// 1200 			TURN_off(Output_1);
// 1201 		}
// 1202 		else if (strstr(tmp_Data,"R2;OUT1;0"))
// 1203 		{
// 1204 			TURN_off(Output_2);
// 1205 		}
// 1206 		else if (strstr(tmp_Data,"R2;OUT2;0"))
// 1207 		{
// 1208 			TURN_off(Output_3);
// 1209 		}
// 1210 		else
// 1211 		{
// 1212 			UART_SendString(HAL_UART_PORT_0,"ERROR!");
// 1213 			return;
// 1214 		}
// 1215 		UART_SendString(HAL_UART_PORT_0,"Done!");
??zclSampleTemperatureSensor_ProcessInReportCmd_13:
        ; Setup parameters for call to function UART_SendString
        MOV     R2,#`?<Constant "Done!">` & 0xff
        MOV     R3,#(`?<Constant "Done!">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_14
??zclSampleTemperatureSensor_ProcessInReportCmd_11:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "R2;OUT1;1">` & 0xff
        MOV     R5,#(`?<Constant "R2;OUT1;1">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??strstr::?relay`   ; Banked call to: strstr
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_15
        ; Setup parameters for call to function TURN_on
        MOV     R1,#0x2
        SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_12
??zclSampleTemperatureSensor_ProcessInReportCmd_15:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "R2;OUT2;1">` & 0xff
        MOV     R5,#(`?<Constant "R2;OUT2;1">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??strstr::?relay`   ; Banked call to: strstr
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_16
        ; Setup parameters for call to function TURN_on
        MOV     R1,#0x3
        SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_12
??zclSampleTemperatureSensor_ProcessInReportCmd_16:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "R2;OUT3;0">` & 0xff
        MOV     R5,#(`?<Constant "R2;OUT3;0">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??strstr::?relay`   ; Banked call to: strstr
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_17
        ; Setup parameters for call to function TURN_off
        MOV     R1,#0x1
??zclSampleTemperatureSensor_ProcessInReportCmd_18:
        LCALL   `??TURN_off::?relay` ; Banked call to: TURN_off
        SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_13
??zclSampleTemperatureSensor_ProcessInReportCmd_17:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "R2;OUT1;0">` & 0xff
        MOV     R5,#(`?<Constant "R2;OUT1;0">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??strstr::?relay`   ; Banked call to: strstr
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_19
        ; Setup parameters for call to function TURN_off
        MOV     R1,#0x2
        SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_18
??zclSampleTemperatureSensor_ProcessInReportCmd_19:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "R2;OUT2;0">` & 0xff
        MOV     R5,#(`?<Constant "R2;OUT2;0">` >> 8) & 0xff
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??strstr::?relay`   ; Banked call to: strstr
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_20
        ; Setup parameters for call to function TURN_off
        MOV     R1,#0x3
        SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_18
??zclSampleTemperatureSensor_ProcessInReportCmd_20:
        ; Setup parameters for call to function UART_SendString
        MOV     R2,#`?<Constant "ERROR!">` & 0xff
        MOV     R3,#(`?<Constant "ERROR!">` >> 8) & 0xff
??zclSampleTemperatureSensor_ProcessInReportCmd_14:
        MOV     R1,#0x0
        LCALL   `??UART_SendString::?relay`; Banked call to: UART_SendString
        SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_3
// 1216 		return;
// 1217 		
// 1218 	}
// 1219 	/*************************** THERMOSTAT DEMAND ******************************/
// 1220 	if ( ( pInReportCmd->attrList[0].attrID == 0x0008 ) &&
// 1221        ( pInReportCmd->attrList[1].attrID == 0x0007 ) &&
// 1222        ( pInReportCmd->attrList[2].attrID == 0x0029	) )
??zclSampleTemperatureSensor_ProcessInReportCmd_8:
        MOV     A,#0x8
        XRL     A,R2
        ORL     A,R3
        JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_3
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_21
        INC     DPTR
        MOVX    A,@DPTR
??zclSampleTemperatureSensor_ProcessInReportCmd_21:
        JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_3
        MOV     A,R0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x29
        JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_22
        INC     DPTR
        MOVX    A,@DPTR
??zclSampleTemperatureSensor_ProcessInReportCmd_22:
        JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_3
// 1223 	{
// 1224   	UART_ZCmdPrint(HAL_UART_PORT_0, "ATTRID_HVAC_THERMOSTAT");
        ; Setup parameters for call to function UART_ZCmdPrint
        MOV     R2,#`?<Constant "ATTRID_HVAC_THERMOSTAT">` & 0xff
        MOV     R3,#(`?<Constant "ATTRID_HVAC_THERMOSTAT">` >> 8) & 0xff
??zclSampleTemperatureSensor_ProcessInReportCmd_6:
        MOV     R1,#0x0
        LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
// 1225 	}
// 1226 	
// 1227 }
??zclSampleTemperatureSensor_ProcessInReportCmd_3:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock40

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zclSampleTemperatureSensor_ProcessInReportCmd
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,DPH
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_event_loop
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond45) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond45) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond45) CFA_SP SP+-7
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_LcdDisplayMainMode
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zclSampleTemperatureSensor_IdentifyCB
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond48) CFA_SP SP+-7
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zclSampleTemperatureSensor_ProcessInReportCmd
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zclSampleTemperatureSensor_event_loop
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond51) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond51) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond51) CFA_SP SP+-7
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zclSampleTemperatureSensor_ProcessInReportCmd
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOV     A,R2
        MOV     R0,A
        MOV     DPL,?V6
        MOV     DPH,?V7
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     DPL,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_ProcessInReportCmd
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zclSampleTemperatureSensor_ProcessInReportCmd
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zclSampleTemperatureSensor_ProcessInReportCmd
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59
// 1228 #endif  // ZCL_REPORT
// 1229 
// 1230 /*********************************************************************
// 1231  * @fn      zclSampleTemperatureSensor_ProcessInDefaultRspCmd
// 1232  *
// 1233  * @brief   Process the "Profile" Default Response Command
// 1234  *
// 1235  * @param   pInMsg - incoming message to process
// 1236  *
// 1237  * @return  none
// 1238  */
// 1239 static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1240 {
// 1241   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1242 
// 1243   // Device is notified of the Default Response command.
// 1244   (void)pInMsg;
// 1245 
// 1246   return ( TRUE );
// 1247 }
// 1248 
// 1249 #ifdef ZCL_DISCOVER
// 1250 /*********************************************************************
// 1251  * @fn      zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
// 1252  *
// 1253  * @brief   Process the Discover Commands Response Command
// 1254  *
// 1255  * @param   pInMsg - incoming message to process
// 1256  *
// 1257  * @return  none
// 1258  */
// 1259 static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1260 {
// 1261   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1262   uint8 i;
// 1263 
// 1264   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1265   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1266   {
// 1267     // Device is notified of the result of its attribute discovery command.
// 1268   }
// 1269 
// 1270   return ( TRUE );
// 1271 }
// 1272 
// 1273 /*********************************************************************
// 1274  * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
// 1275  *
// 1276  * @brief   Process the "Profile" Discover Attributes Response Command
// 1277  *
// 1278  * @param   pInMsg - incoming message to process
// 1279  *
// 1280  * @return  none
// 1281  */
// 1282 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1283 {
// 1284   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1285   uint8 i;
// 1286 
// 1287   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1288   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1289   {
// 1290     // Device is notified of the result of its attribute discovery command.
// 1291   }
// 1292 
// 1293   return ( TRUE );
// 1294 }
// 1295 
// 1296 /*********************************************************************
// 1297  * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
// 1298  *
// 1299  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1300  *
// 1301  * @param   pInMsg - incoming message to process
// 1302  *
// 1303  * @return  none
// 1304  */
// 1305 static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1306 {
// 1307   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1308   uint8 i;
// 1309 
// 1310   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1311   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1312   {
// 1313     // Device is notified of the result of its attribute discovery command.
// 1314   }
// 1315 
// 1316   return ( TRUE );
// 1317 }
// 1318 #endif // ZCL_DISCOVER
// 1319 
// 1320 #ifdef ZCL_EZMODE
// 1321 
// 1322 /*********************************************************************
// 1323  * @fn      zclSampleTemperatureSensor_ProcessZDOMsgs
// 1324  *
// 1325  * @brief   Called when this node receives a ZDO/ZDP response.
// 1326  *
// 1327  * @param   none
// 1328  *
// 1329  * @return  status
// 1330  */
// 1331 static void zclSampleTemperatureSensor_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
// 1332 {
// 1333   zclEZMode_ActionData_t data;
// 1334   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1335 
// 1336   // Let EZ-Mode know of the Match Descriptor Response
// 1337   if ( pMsg->clusterID == Match_Desc_rsp )
// 1338   {
// 1339     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
// 1340     data.pMatchDescRsp = pMatchDescRsp;
// 1341     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
// 1342     osal_mem_free( pMatchDescRsp );
// 1343   }
// 1344 }
// 1345 
// 1346 /*********************************************************************
// 1347  * @fn      zclSampleTemperatureSensor_EZModeCB
// 1348  *
// 1349  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1350 *           going on during EZ-Mode steering/finding/binding.
// 1351  *
// 1352  * @param   state - an
// 1353  *
// 1354  * @return  none
// 1355  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1356 static void zclSampleTemperatureSensor_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
zclSampleTemperatureSensor_EZModeCB:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_EZModeCB
        CODE
// 1357 {
        FUNCALL zclSampleTemperatureSensor_EZModeCB, zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, zclHA_uint16toa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_EZModeCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1358 #ifdef LCD_SUPPORTED
// 1359   char szLine[20];
// 1360   char *pStr;
// 1361   uint8 err;
// 1362 #endif
// 1363 
// 1364   // time to go into identify mode
// 1365   if ( state == EZMODE_STATE_IDENTIFYING )
        MOV     A,#0x4
        XRL     A,?V2
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_0
// 1366   {
// 1367     zclSampleTemperatureSensor_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
        MOV     A,#-0x4c
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1368     zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1369   }
// 1370 
// 1371   // autoclosing, show what happened (success, cancelled, etc...)
// 1372   if( state == EZMODE_STATE_AUTOCLOSE )
??zclSampleTemperatureSensor_EZModeCB_0:
        MOV     A,#0x7
        XRL     A,?V2
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_2
// 1373   {
// 1374 #ifdef LCD_SUPPORTED
// 1375     pStr = NULL;
// 1376     err = pData->sAutoClose.err;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
// 1377     if ( err == EZMODE_ERR_SUCCESS )
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_3
// 1378     {
// 1379       pStr = "EZMode: Success";
        MOV     R2,#`?<Constant "EZMode: Success">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: Success">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_EZModeCB_4
// 1380     }
// 1381     else if ( err == EZMODE_ERR_NOMATCH )
??zclSampleTemperatureSensor_EZModeCB_3:
        MOV     A,#0x4
        XRL     A,R0
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1382     {
// 1383       pStr = "EZMode: NoMatch"; // not a match made in heaven
        MOV     R2,#`?<Constant "EZMode: NoMatch">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: NoMatch">` >> 8) & 0xff
// 1384     }
// 1385     if ( pStr )
??zclSampleTemperatureSensor_EZModeCB_4:
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1386     {
// 1387       if ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1388       {
// 1389         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1390       }
// 1391     }
// 1392 #endif
// 1393   }
// 1394 
// 1395   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1396   if( state == EZMODE_STATE_FINISH )
??zclSampleTemperatureSensor_EZModeCB_2:
        MOV     A,#0x63
        XRL     A,?V2
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
// 1397   {
// 1398     // turn off identify mode
// 1399     zclSampleTemperatureSensor_IdentifyTime = 0;
        MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1400     zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
// 1401 
// 1402 #ifdef LCD_SUPPORTED
// 1403     // if successful, inform user which nwkaddr/ep we bound to
// 1404     pStr = NULL;
// 1405     err = pData->sFinish.err;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
// 1406     if( err == EZMODE_ERR_SUCCESS )
        JZ      $+5
        LJMP    ??zclSampleTemperatureSensor_EZModeCB_5 & 0xFFFF
// 1407     {
// 1408       // "EZDst:1234 EP:34"
// 1409       osal_memcpy( szLine, "EZDst:", 6 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,#`?<Constant "EZDst:">` & 0xff
        MOV     ?V5,#(`?<Constant "EZDst:">` >> 8) & 0xff
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1410       zclHA_uint16toa( pData->sFinish.nwkaddr, &szLine[6] );
        ; Setup parameters for call to function zclHA_uint16toa
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??zclHA_uint16toa::?relay`; Banked call to: zclHA_uint16toa
// 1411       osal_memcpy( &szLine[10], " EP:", 4 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,#`?<Constant " EP:">` & 0xff
        MOV     ?V5,#(`?<Constant " EP:">` >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1412       _ltoa( pData->sFinish.ep, (void *)(&szLine[14]), 16 );  // _ltoa NULL terminates
        ; Setup parameters for call to function _ltoa
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0,DPL
        MOV     ?V1,DPH
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R1,#0x10
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
        LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1413       pStr = szLine;
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R2,?V0
        MOV     R3,?V1
        SJMP    ??zclSampleTemperatureSensor_EZModeCB_6
// 1414     }
// 1415     else if ( err == EZMODE_ERR_BAD_PARAMETER )
??zclSampleTemperatureSensor_EZModeCB_5:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_7
// 1416     {
// 1417       pStr = "EZMode: BadParm";
        MOV     R2,#`?<Constant "EZMode: BadParm">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: BadParm">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_EZModeCB_6
// 1418     }
// 1419     else if ( err == EZMODE_ERR_CANCELLED )
??zclSampleTemperatureSensor_EZModeCB_7:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_8
// 1420     {
// 1421       pStr = "EZMode: Cancel";
        MOV     R2,#`?<Constant "EZMode: Cancel">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: Cancel">` >> 8) & 0xff
        SJMP    ??zclSampleTemperatureSensor_EZModeCB_6
// 1422     }
// 1423     else
// 1424     {
// 1425       pStr = "EZMode: TimeOut";
??zclSampleTemperatureSensor_EZModeCB_8:
        MOV     R2,#`?<Constant "EZMode: TimeOut">` & 0xff
        MOV     R3,#(`?<Constant "EZMode: TimeOut">` >> 8) & 0xff
// 1426     }
// 1427     if ( pStr )
??zclSampleTemperatureSensor_EZModeCB_6:
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleTemperatureSensor_EZModeCB_9
// 1428     {
// 1429       if ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_EZModeCB_9
// 1430       {
// 1431         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1432       }
// 1433     }
// 1434 #endif  // LCD_SUPPORTED
// 1435 
// 1436     // show main UI screen 3 seconds after joining network
// 1437     osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT, 3000 );
??zclSampleTemperatureSensor_EZModeCB_9:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_bb8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1438 
// 1439     // report current temperature reading 15 seconds after joinging the network
// 1440     osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT, SAMPLETEMPERATURESENSOR_REPORT_INTERVAL );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_9c4
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleTemperatureSensor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1441   }
// 1442 }
??zclSampleTemperatureSensor_EZModeCB_1:
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock60
// 1443 #endif // ZCL_EZMODE
// 1444 
// 1445 /****************************************************************************
// 1446 ****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1447 void zclSampleTemperatureSensor_BindingProcess(void)
zclSampleTemperatureSensor_BindingProcess:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_BindingProcess
        CODE
// 1448 { 
        FUNCALL zclSampleTemperatureSensor_BindingProcess, zcl_InvokeEZMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleTemperatureSensor_BindingProcess, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 1449 	if ( ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE ) ||
// 1450 			( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE ) )
        MOV     DPTR,#giTemperatureSensorScreenMode
        MOVX    A,@DPTR
        JZ      ??zclSampleTemperatureSensor_BindingProcess_0
        XRL     A,#0x1
        JNZ     ??zclSampleTemperatureSensor_BindingProcess_1
// 1451 	{
// 1452 		giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
??zclSampleTemperatureSensor_BindingProcess_0:
        CLR     A
        MOVX    @DPTR,A
// 1453 
// 1454 	FLAG_BINDING = !FLAG_BINDING;
        MOV     DPTR,#FLAG_BINDING
        MOVX    A,@DPTR
        JNZ     ??zclSampleTemperatureSensor_BindingProcess_2
        MOV     A,#0x1
        SJMP    ??zclSampleTemperatureSensor_BindingProcess_3
??zclSampleTemperatureSensor_BindingProcess_2:
        CLR     A
??zclSampleTemperatureSensor_BindingProcess_3:
        LCALL   ?Subroutine3 & 0xFFFF
// 1455 	
// 1456 	#ifdef ZCL_EZMODE
// 1457 		zclEZMode_InvokeData_t ezModeData;
// 1458 		static uint16 clusterIDs[] = { ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT }; 	// only bind on the Temperature Measurement cluster
// 1459 	
// 1460 		// Invoke EZ-Mode
// 1461 		ezModeData.endpoint = SAMPLETEMPERATURESENSOR_ENDPOINT; // endpoint on which to invoke EZ-Mode
// 1462 		if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
// 1463 				 ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER )	 ||
// 1464 				 ( zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE ) )
??CrossCallReturnLabel_3:
        JZ      ??zclSampleTemperatureSensor_BindingProcess_4
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleTemperatureSensor_BindingProcess_4
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleTemperatureSensor_BindingProcess_5
// 1465 		{
// 1466 			ezModeData.onNetwork = TRUE;			// node is already on the network
??zclSampleTemperatureSensor_BindingProcess_4:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??zclSampleTemperatureSensor_BindingProcess_6
// 1467 		}
// 1468 		else
// 1469 		{
// 1470 			ezModeData.onNetwork = FALSE; 		// node is not yet on the network
??zclSampleTemperatureSensor_BindingProcess_5:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??zclSampleTemperatureSensor_BindingProcess_6:
        MOVX    @DPTR,A
// 1471 		}
// 1472 		ezModeData.initiator = TRUE;				// Temperature Sensor is an initiator
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1473 		ezModeData.numActiveInClusters = 1;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1474 		ezModeData.pActiveInClusterIDs = clusterIDs;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??clusterIDs_1 & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??clusterIDs_1 >> 8) & 0xff
        MOVX    @DPTR,A
// 1475 		ezModeData.numActiveOutClusters = 0;	 // active output cluster
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1476 		ezModeData.pActiveOutClusterIDs = NULL;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine13_0 & 0xFFFF
// 1477 		zcl_InvokeEZMode( &ezModeData );
??CrossCallReturnLabel_22:
        LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
// 1478 	
// 1479 	#ifdef LCD_SUPPORTED
// 1480 		HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "EZMode">` & 0xff
        MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
        LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1481 	#endif
// 1482 	
// 1483 		// NOT ZCL_EZMODE, Use EndDeviceBind
// 1484 	#else
// 1485 		{
// 1486 			zAddrType_t dstAddr;
// 1487 			dstAddr.addrMode = Addr16Bit;
// 1488 			dstAddr.addr.shortAddr = 0; 	// Coordinator makes the EDB match
// 1489 	
// 1490 			// Initiate an End Device Bind Request, this bind request will
// 1491 			// only use a cluster list that is important to binding.
// 1492 			HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
// 1493 			ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
// 1494 														SAMPLETEMPERATURESENSOR_ENDPOINT,
// 1495 														ZCL_HA_PROFILE_ID,
// 1496 														0, NULL,
// 1497 														ZCLSAMPLETEMPERATURESENSOR_BINDINGLIST, bindingOutClusters,
// 1498 														FALSE );
// 1499 		}
// 1500 	#endif // ZCL_EZMODE
// 1501 	}
// 1502 
// 1503 }
??zclSampleTemperatureSensor_BindingProcess_1:
        MOV     A,#0x9
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function zclSampleTemperatureSensor_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclSampleTemperatureSensor_BindingProcess
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond63) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond63) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond63) CFA_SP SP+-7
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker64 Using cfiCommon1
          CFI (cfiPicker64) NoFunction
          CFI (cfiPicker64) Picker
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#zclSampleTemperatureSensor_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiPicker64

        RSEG XDATA_I:XDATA:NOROOT(0)
??clusterIDs_1:
        DATA16
        DS 2
        REQUIRE `?<Initializer for clusterIDs>_1`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleTemperatureSensor_N`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for aProcessCmd>`:
        DATA8
        DB 1
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleTemperatureSensor_Test`:
        DATA8
        DB 20
        DATA16
        DW zclSampleTemperatureSensor_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleTemperatureSensor_C`:
        DATA16
        DW `??zclSampleTemperatureSensor_BasicResetCB::?rel`
        DW `??zclSampleTemperatureSensor_IdentifyCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW ??zclSampleTemperatureSensor_IdentifyQueryRspCB
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for clusterIDs>`:
        DATA16
        DW 1026

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for clusterIDs>_1`:
        DATA16
        DW 1026

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_LcdDisplayUpdate::`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_LcdDisplayMainMode:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_LcdDisplayMainMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_LcdDisplayHelpMode:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_LcdDisplayHelpMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_SendTemp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_SendTemp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_SendState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_SendState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessIdentifyTim:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_BasicResetCB::?rel`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_IdentifyQueryRspCB:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSampleTemperatureSensor_ProcessInReportCmd:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_ProcessInReportCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_EZModeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_EZModeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleTemperatureSensor_BindingProcess::?r`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleTemperatureSensor_BindingProcess

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZDO_CB_MSG">`:
        DB "ZDO_CB_MSG"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZCL_INCOMING_MSG">`:
        DB "ZCL_INCOMING_MSG"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "KEY_CHANGE">`:
        DB "KEY_CHANGE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ZDO_STATE_CHANGE">`:
        DB "ZDO_STATE_CHANGE"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SAMPLETEMPERATURESENS...">`:
        DB "SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SAMPLETEMPERATURESENS...">_1`:
        DB "SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SAMPLETEMPERATURESENS...">_2`:
        DB "SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SAMPLETEMPERATURESENS...">_3`:
        DB "SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SAMPLETEMPERATURESENS...">_4`:
        DB "SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "SW8">`:
        DB "SW8"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode">`:
        DB "EZMode"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TEMP: ">`:
        DB "TEMP: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "C">`:
        DB "C"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SW5: Help      *">`:
        DB "SW5: Help      *"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SW5: Help       ">`:
        DB "SW5: Help       "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "!\\n">`:
        DB "!\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "@ZBR:">`:
        DB "@ZBR:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ";">`:
        DB ";"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "!">`:
        DB "!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "R2;OUT3;1">`:
        DB "R2;OUT3;1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "R2;OUT1;1">`:
        DB "R2;OUT1;1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "R2;OUT2;1">`:
        DB "R2;OUT2;1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "R2;OUT3;0">`:
        DB "R2;OUT3;0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "R2;OUT1;0">`:
        DB "R2;OUT1;0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "R2;OUT2;0">`:
        DB "R2;OUT2;0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ERROR!">`:
        DB "ERROR!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Done!">`:
        DB "Done!"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ATTRID_HVAC_THERMOSTAT">`:
        DB "ATTRID_HVAC_THERMOSTAT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: Success">`:
        DB "EZMode: Success"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: NoMatch">`:
        DB "EZMode: NoMatch"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZDst:">`:
        DB "EZDst:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " EP:">`:
        DB " EP:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: BadParm">`:
        DB "EZMode: BadParm"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: Cancel">`:
        DB "EZMode: Cancel"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: TimeOut">`:
        DB "EZMode: TimeOut"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_a:
        DD 10

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1388:
        DD 5000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_9c4:
        DD 2500

        END
// 1504 
// 
// 3 229 bytes in segment BANKED_CODE
//    90 bytes in segment BANK_RELAYS
//    39 bytes in segment XDATA_I
//    39 bytes in segment XDATA_ID
//   627 bytes in segment XDATA_ROM_C
//    16 bytes in segment XDATA_Z
// 
//   129 bytes of CODE     memory
//   603 bytes of CONST    memory (+ 24 bytes shared)
// 3 229 bytes of HUGECODE memory
//    55 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
