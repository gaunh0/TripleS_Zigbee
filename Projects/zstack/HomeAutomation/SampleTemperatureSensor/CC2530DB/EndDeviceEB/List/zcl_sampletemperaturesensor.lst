###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                13/Mar/2017  13:58:02
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
#    Command line       =  
#        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFAFA
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c"
#        -D END_DEVICE_SENSOR -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D
#        NV_RESTORE -D xPOWER_SAVING -D NWK_AUTO_POLL -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_TEMPERATURE_MEASUREMENT -D HAL_UART=TRUE -D HAL_UART_DMA=1 -lC
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Teddy\Desktop\aaa\[COMBROS]
#        Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\Source\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\Source\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\HomeAutomation\MY-SOURCE\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\List\zcl_sampletemperaturesensor.lst
#    Object file        =  
#        C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\CC2530DB\EndDeviceEB\Obj\zcl_sampletemperaturesensor.r51
#
###############################################################################

C:\Users\Teddy\Desktop\aaa\[COMBROS] Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\SampleTemperatureSensor\Source\zcl_sampletemperaturesensor.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampletemperaturesensor.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6            Description:    Zigbee Cluster Library - sample device application.
      7          
      8          
      9            Copyright 2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This device will act as a temperature sensor. It updates the current
     42            temperature on the thermostat when the user sends the desired
     43            temperature using SW1.
     44          
     45            SCREEN MODES
     46            ----------------------------------------
     47            Main:
     48              - SW1: Send current temperature
     49              - SW2: Invoke EZMode
     50              - SW3: Adjust temperature
     51              - SW5: Go to Help screen
     52          
     53            Temperature:
     54              - SW1: Increase temperature
     55              - SW3: Decrease temperature
     56              - SW5: Enter temperature
     57            ----------------------------------------
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "ZComDef.h"
     64          #include "OSAL.h"
     65          #include "AF.h"
     66          #include "ZDApp.h"
     67          #include "ZDObject.h"
     68          #include "ZDProfile.h"
     69          #include "MT_SYS.h"
     70          
     71          #include "zcl.h"
     72          #include "zcl_general.h"
     73          #include "zcl_ha.h"
     74          #include "zcl_ezmode.h"
     75          #include "zcl_ms.h"
     76          
     77          #include "zcl_sampletemperaturesensor.h"
     78          
     79          #include "onboard.h"
     80          
     81          /* HAL */
     82          #include "hal_lcd.h"
     83          #include "hal_led.h"
     84          #include "hal_key.h"
     85          
     86          /* MY INCLUDES */
     87          #include "MS_UART.h"
     88          #include "MS_UART_CMD.h"
     89          #include "MS_DHT11.h"
     90          #include "MS_GPIO.h"
     91          #include "string.h"
     92          
     93          /*********************************************************************
     94           * MACROS
     95           */
     96          
     97          // how often to report temperature
     98          #define SAMPLETEMPERATURESENSOR_REPORT_INTERVAL   2500
     99          
    100          /*********************************************************************
    101           * CONSTANTS
    102           */
    103          
    104          /*********************************************************************
    105           * TYPEDEFS
    106           */
    107          
    108          /*********************************************************************
    109           * GLOBAL VARIABLES
    110           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          byte zclSampleTemperatureSensor_TaskID;
   \                     zclSampleTemperatureSensor_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          uint8 zclSampleTemperatureSensorSeqNum;
   \                     zclSampleTemperatureSensorSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          static byte gPermitDuration = 0x00;
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    115          
    116          /*********************************************************************
    117           * GLOBAL FUNCTIONS
    118           */
    119          
    120          /*********************************************************************
    121           * LOCAL VARIABLES
    122           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          afAddrType_t zclSampleTemperatureSensor_DstAddr;
   \                     zclSampleTemperatureSensor_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    124          
    125          #ifdef ZCL_EZMODE
    126          static void zclSampleTemperatureSensor_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    127          static void zclSampleTemperatureSensor_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    128          

   \                                 In  segment XDATA_ROM_C, align 1
    129          static const zclEZMode_RegisterData_t zclSampleTemperatureSensor_RegisterEZModeData =
   \                     zclSampleTemperatureSensor_RegisterEZModeData:
   \   000000   ....         DW zclSampleTemperatureSensor_TaskID
   \   000002   0400         DW 4
   \   000004   0200         DW 2
   \   000006   ....         DW zclSampleTemperatureSensorSeqNum
   \   000008   ....         DW `??zclSampleTemperatureSensor_EZModeCB::?relay`
    130          {
    131            &zclSampleTemperatureSensor_TaskID,
    132            SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT,
    133            SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT,
    134            &zclSampleTemperatureSensorSeqNum,
    135            zclSampleTemperatureSensor_EZModeCB
    136          };
    137          
    138          // NOT ZCL_EZMODE, Use EndDeviceBind
    139          #else
    140          
    141          static cId_t bindingOutClusters[] =
    142          {
    143            ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT
    144          };
    145          #define ZCLSAMPLETEMPERATURESENSOR_BINDINGLIST        1
    146          #endif
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          devStates_t zclSampleTemperatureSensor_NwkState = DEV_INIT;
   \                     zclSampleTemperatureSensor_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleTemperatureSensor_N`
   \   000001                REQUIRE __INIT_XDATA_I
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;   // display main screen mode first
   \                     giTemperatureSensorScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
   \                     aProcessCmd:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for aProcessCmd>`
   \   000004                REQUIRE __INIT_XDATA_I
    153          
    154          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          static endPointDesc_t sampleTemperatureSensor_TestEp =
   \                     sampleTemperatureSensor_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleTemperatureSensor_Test`
   \   000006                REQUIRE __INIT_XDATA_I
    156          {
    157            20,                                 // Test endpoint
    158            &zclSampleTemperatureSensor_TaskID,
    159            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    160            (afNetworkLatencyReq_t)0            // No Network Latency req
    161          };
    162          
    163          
    164          /*********************************************************************
    165           * LOCAL FUNCTIONS
    166           */
    167          static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys );
    168          static void zclSampleTemperatureSensor_BasicResetCB( void );
    169          static void zclSampleTemperatureSensor_IdentifyCB( zclIdentify_t *pCmd );
    170          static void zclSampleTemperatureSensor_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    171          static void zclSampleTemperatureSensor_ProcessIdentifyTimeChange( void );
    172          
    173          // app display functions
    174          void zclSampleTemperatureSensor_LcdDisplayUpdate(void);
    175          void zclSampleTemperatureSensor_LcdDisplayMainMode(void);
    176          void zclSampleTemperatureSensor_LcdDisplayTempMode(void);
    177          void zclSampleTemperatureSensor_LcdDisplayHelpMode(void);
    178          
    179          static void zclSampleTemperatureSensor_SendTemp(void);
    180          static void zclSampleTemperatureSensor_SendState(OUTPUT_TypeDef OUTX);
    181          
    182          
    183          // Functions to process ZCL Foundation incoming Command/Response messages
    184          static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    185          #ifdef ZCL_READ
    186          static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    187          #endif
    188          #ifdef ZCL_WRITE
    189          static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    190          #endif
    191          static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    192          #ifdef ZCL_DISCOVER
    193          static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    194          static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    195          static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    196          #endif 
    197          #ifdef ZCL_REPORT
    198          static void zclSampleTemperatureSensor_ProcessInReportCmd( zclIncomingMsg_t *pInMsg );
    199          #endif 
    200          
    201          /*********************************************************************
    202           * STATUS STRINGS
    203           */
    204          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    205          const char sClearLine[]    = " ";
   \                     sClearLine:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
    206          const char sDeviceName[]   = "  Temp Sensor";
   \                     sDeviceName:
   \   000000   20205465     DB "  Temp Sensor"
   \            6D702053
   \            656E736F
   \            7200    

   \                                 In  segment XDATA_ROM_C, align 1
    207          const char sSwTempUp[]     = "SW1: Raise Temp";
   \                     sSwTempUp:
   \   000000   5357313A     DB "SW1: Raise Temp"
   \            20526169
   \            73652054
   \            656D7000

   \                                 In  segment XDATA_ROM_C, align 1
    208          const char sSwEZMode[]     = "SW2: EZ-Mode";
   \                     sSwEZMode:
   \   000000   5357323A     DB "SW2: EZ-Mode"
   \            20455A2D
   \            4D6F6465
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    209          const char sSwTempDown[]   = "SW3: Lower Temp";
   \                     sSwTempDown:
   \   000000   5357333A     DB "SW3: Lower Temp"
   \            204C6F77
   \            65722054
   \            656D7000

   \                                 In  segment XDATA_ROM_C, align 1
    210          const char sSwHelp[]       = "SW5: Help";
   \                     sSwHelp:
   \   000000   5357353A     DB "SW5: Help"
   \            2048656C
   \            7000    
    211          #endif
    212          
    213          /*********************************************************************
    214           * ZCL General Profile Callback table
    215           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    216          static zclGeneral_AppCallbacks_t zclSampleTemperatureSensor_CmdCallbacks =
   \                     zclSampleTemperatureSensor_CmdCallbacks:
   \   000000                DS 24
   \   000018                REQUIRE `?<Initializer for zclSampleTemperatureSensor_C`
   \   000018                REQUIRE __INIT_XDATA_I
    217          {
    218            zclSampleTemperatureSensor_BasicResetCB,        // Basic Cluster Reset command
    219            zclSampleTemperatureSensor_IdentifyCB,          // Identify command
    220          #ifdef ZCL_EZMODE
    221            NULL,                                           // Identify EZ-Mode Invoke command
    222            NULL,                                           // Identify Update Commission State command
    223          #endif
    224            NULL,                                           // Identify Trigger Effect command
    225            zclSampleTemperatureSensor_IdentifyQueryRspCB,  // Identify Query Response command
    226            NULL,             				                      // On/Off cluster command
    227            NULL,                                           // On/Off cluster enhanced command Off with Effect
    228            NULL,                                           // On/Off cluster enhanced command On with Recall Global Scene
    229            NULL,                                           // On/Off cluster enhanced command On with Timed Off
    230          #ifdef ZCL_LEVEL_CTRL
    231            NULL,                                           // Level Control Move to Level command
    232            NULL,                                           // Level Control Move command
    233            NULL,                                           // Level Control Step command
    234            NULL,                                           // Level Control Stop command
    235          #endif
    236          #ifdef ZCL_GROUPS
    237            NULL,                                           // Group Response commands
    238          #endif
    239          #ifdef ZCL_SCENES
    240            NULL,                                           // Scene Store Request command
    241            NULL,                                           // Scene Recall Request command
    242            NULL,                                           // Scene Response command
    243          #endif
    244          #ifdef ZCL_ALARMS
    245            NULL,                                           // Alarm (Response) commands
    246          #endif
    247          #ifdef SE_UK_EXT
    248            NULL,                                           // Get Event Log command
    249            NULL,                                           // Publish Event Log command
    250          #endif
    251            NULL,                                           // RSSI Location command
    252            NULL                                            // RSSI Location Response command
    253          };
    254          
    255          /*********************************************************************
    256           * @fn          zclSampleTemperatureSensor_Init
    257           *
    258           * @brief       Initialization function for the zclGeneral layer.
    259           *
    260           * @param       none
    261           *
    262           * @return      none
    263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          void zclSampleTemperatureSensor_Init( byte task_id )
   \                     zclSampleTemperatureSensor_Init:
    265          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    266            zclSampleTemperatureSensor_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    267          
    268            // Set destination address to indirect
    269            zclSampleTemperatureSensor_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV     DPTR,#zclSampleTemperatureSensor_DstAddr + 8
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
    270            zclSampleTemperatureSensor_DstAddr.endPoint = 0;
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
    271            zclSampleTemperatureSensor_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV     DPTR,#zclSampleTemperatureSensor_DstAddr
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    272          
    273          //	zclSampleTemperatureSensor_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    274          //  zclSampleTemperatureSensor_DstAddr.endPoint = APP_ROUTER_ENDPOINT;
    275          //  zclSampleTemperatureSensor_DstAddr.addr.shortAddr = NLME_GetCoordShortAddr();
    276          
    277            // This app is part of the Home Automation Profile
    278            zclHA_Init( &zclSampleTemperatureSensor_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV     R2,#zclSampleTemperatureSensor_SimpleDesc & 0xff
   \   00001A   7B..         MOV     R3,#(zclSampleTemperatureSensor_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    279          
    280            // Register the ZCL General Cluster Library callback functions
    281            zclGeneral_RegisterCmdCallbacks( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_CmdCallbacks );
   \   00001F                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001F   7A..         MOV     R2,#zclSampleTemperatureSensor_CmdCallbacks & 0xff
   \   000021   7B..         MOV     R3,#(zclSampleTemperatureSensor_CmdCallbacks >> 8) & 0xff
   \   000023   7901         MOV     R1,#0x1
   \   000025   12....       LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    282          
    283            // Register the application's attribute list
    284            zcl_registerAttrList( SAMPLETEMPERATURESENSOR_ENDPOINT, SAMPLETEMPERATURESENSOR_MAX_ATTRIBUTES, zclSampleTemperatureSensor_Attrs );
   \   000028                ; Setup parameters for call to function zcl_registerAttrList
   \   000028   7C..         MOV     R4,#zclSampleTemperatureSensor_Attrs & 0xff
   \   00002A   7D..         MOV     R5,#(zclSampleTemperatureSensor_Attrs >> 8) & 0xff
   \   00002C   7A11         MOV     R2,#0x11
   \   00002E   7901         MOV     R1,#0x1
   \   000030   12....       LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    285          
    286            // Register the Application to receive the unprocessed Foundation command/response messages
    287            zcl_registerForMsg( zclSampleTemperatureSensor_TaskID );
   \   000033                ; Setup parameters for call to function zcl_registerForMsg
   \   000033   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   12....       LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    288          
    289          	#ifdef ZCL_EZMODE
    290            // Register EZ-Mode
    291            zcl_RegisterEZMode( &zclSampleTemperatureSensor_RegisterEZModeData );
   \   00003B                ; Setup parameters for call to function zcl_RegisterEZMode
   \   00003B   7A..         MOV     R2,#zclSampleTemperatureSensor_RegisterEZModeData & 0xff
   \   00003D   7B..         MOV     R3,#(zclSampleTemperatureSensor_RegisterEZModeData >> 8) & 0xff
   \   00003F   12....       LCALL   `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
    292          
    293            // Register with the ZDO to receive Match Descriptor Responses
    294            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
   \   000042                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000042   7A06         MOV     R2,#0x6
   \   000044   7B80         MOV     R3,#-0x80
   \   000046   EE           MOV     A,R6
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    295          	#endif
    296          
    297            // Register for all key events - This app will handle all key events
    298            RegisterForKeys( zclSampleTemperatureSensor_TaskID );
   \   00004B                ; Setup parameters for call to function RegisterForKeys
   \   00004B   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    299          
    300            // Register for a test endpoint
    301            afRegister( &sampleTemperatureSensor_TestEp );
   \   000053                ; Setup parameters for call to function afRegister
   \   000053   7A..         MOV     R2,#sampleTemperatureSensor_TestEp & 0xff
   \   000055   7B..         MOV     R3,#(sampleTemperatureSensor_TestEp >> 8) & 0xff
   \   000057   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    302          
    303          	#ifdef LCD_SUPPORTED
    304            // display the device name
    305            HalLcdWriteString( (char *)sDeviceName, HAL_LCD_LINE_3 );
   \   00005A                ; Setup parameters for call to function HalLcdWriteString
   \   00005A   7903         MOV     R1,#0x3
   \   00005C   7A..         MOV     R2,#sDeviceName & 0xff
   \   00005E   7B..         MOV     R3,#(sDeviceName >> 8) & 0xff
   \   000060   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    306          	#endif
    307                  
    308                  GPIO_init();
   \   000063                ; Setup parameters for call to function GPIO_init
   \   000063   12....       LCALL   `??GPIO_init::?relay`; Banked call to: GPIO_init
    309          	UART_Init(HAL_UART_PORT_0);
   \   000066                ; Setup parameters for call to function UART_Init
   \   000066   7900         MOV     R1,#0x0
   \   000068   12....       LCALL   `??UART_Init::?relay`; Banked call to: UART_Init
    310          
    311          	DHT11_Init();
   \   00006B                ; Setup parameters for call to function DHT11_Init
   \   00006B   12....       LCALL   `??DHT11_Init::?relay`; Banked call to: DHT11_Init
    312          	
    313          	// Set timer for first UART Reply CMD event
    314          	osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_UART_REPLY_CMD_EVT, UART_PARSE_RX_PACKAGE_EVT_PERIOD );
   \   00006E                ; Setup parameters for call to function osal_start_timerEx
   \   00006E   90....       MOV     DPTR,#__Constant_a
   \   000071   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000074   7A40         MOV     R2,#0x40
   \   000076   7B00         MOV     R3,#0x0
   \   000078   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000080   7404         MOV     A,#0x4
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    315          
    316          	// Set timer for first Check System event
    317          	osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_CHECK_SYSTEM_EVT, CHECK_SYSTEM_EVT_PERIOD );
   \   000085                ; Setup parameters for call to function osal_start_timerEx
   \   000085   90....       MOV     DPTR,#__Constant_2710
   \   000088   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00008B   7A80         MOV     R2,#-0x80
   \   00008D   7B00         MOV     R3,#0x0
   \   00008F   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F9           MOV     R1,A
   \   000094   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000097   7404         MOV     A,#0x4
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
    318          
    319          	// Set timer for first Join Setup event
    320          	if (NLME_GetShortAddr() != 0xFFFE)
   \   00009C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00009C   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00009F   8A..         MOV     ?V0,R2
   \   0000A1   8B..         MOV     ?V1,R3
   \   0000A3   74FE         MOV     A,#-0x2
   \   0000A5   65..         XRL     A,?V0
   \   0000A7   7004         JNZ     ??zclSampleTemperatureSensor_Init_0
   \   0000A9   74FF         MOV     A,#-0x1
   \   0000AB   65..         XRL     A,?V1
   \                     ??zclSampleTemperatureSensor_Init_0:
   \   0000AD   600C         JZ      ??zclSampleTemperatureSensor_Init_1
    321          	{
    322          		osal_set_event( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT );
   \   0000AF                ; Setup parameters for call to function osal_set_event
   \   0000AF   7A20         MOV     R2,#0x20
   \   0000B1   7B00         MOV     R3,#0x0
   \   0000B3   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    323          	}
    324          	
    325          }
   \                     ??zclSampleTemperatureSensor_Init_1:
   \   0000BB   7F02         MOV     R7,#0x2
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA
    326          
    327          /*********************************************************************
    328           * @fn          zclSample_event_loop
    329           *
    330           * @brief       Event Loop Processor for zclGeneral.
    331           *
    332           * @param       none
    333           *
    334           * @return      none
    335           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          uint16 zclSampleTemperatureSensor_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleTemperatureSensor_event_loop:
    337          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    338            afIncomingMSGPacket_t *MSGpkt;
    339          
    340            (void)task_id;  // Intentionally unreferenced parameter
    341          
    342          	/*--------------------------------------------------------------------------*/
    343            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7062         JNZ     ??zclSampleTemperatureSensor_event_loop_0
    344            {
    345              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleTemperatureSensor_TaskID )) )
    346              {
    347          			msg_RSSI = MSGpkt->rssi;
    348          				
    349                switch ( MSGpkt->hdr.event )
    350                {
    351          				#ifdef ZCL_EZMODE
    352                  case ZDO_CB_MSG:
    353                    zclSampleTemperatureSensor_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    354          					UART_DebugPrint(HAL_UART_PORT_0, "ZDO_CB_MSG");
    355                    break;
    356          				#endif
    357          
    358                  case ZCL_INCOMING_MSG:
    359                    // Incoming ZCL Foundation command/response messages
    360                    zclSampleTemperatureSensor_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    361          					UART_DebugPrint(HAL_UART_PORT_0, "ZCL_INCOMING_MSG");
    362                    break;
    363          
    364                  case KEY_CHANGE:
    365                    zclSampleTemperatureSensor_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    366          					UART_DebugPrint(HAL_UART_PORT_0, "KEY_CHANGE");
    367          					break;
    368          
    369                  case ZDO_STATE_CHANGE:
    370                    zclSampleTemperatureSensor_NwkState = (devStates_t)(MSGpkt->hdr.status);
    371          
    372          
    373                    // now on the network
    374                    if ( (zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD) ||
    375                         (zclSampleTemperatureSensor_NwkState == DEV_ROUTER)   ||
    376                         (zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE) )
    377                    {
    378          						#ifndef HOLD_AUTO_START
    379                      giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
    380                      zclSampleTemperatureSensor_LcdDisplayUpdate();
    381          						#endif
    382          						#ifdef ZCL_EZMODE
    383                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    384          						#endif // ZCL_EZMODE
    385          
    386          						UART_DebugPrint(HAL_UART_PORT_0, "ZDO_STATE_CHANGE");
    387                    }
    388                    break;
    389          
    390                  default:
    391                    break;
    392                }
    393          
    394                // Release the memory
    395                osal_msg_deallocate( (uint8 *)MSGpkt );
    396              }
    397          
    398              // return unprocessed events
    399              return (events ^ SYS_EVENT_MSG);
    400            }
    401          
    402          	/*--------------------------------------------------------------------------*/
    403            if ( events & SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT )
   \   000012   EE           MOV     A,R6
   \   000013   A2E0         MOV     C,0xE0 /* A   */.0
   \   000015   4003         JC      $+5
   \   000017   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_1 & 0xFFFF
    404            {
    405              if ( zclSampleTemperatureSensor_IdentifyTime > 0 )
   \   00001A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   600C         JZ      ??zclSampleTemperatureSensor_event_loop_2
    406                zclSampleTemperatureSensor_IdentifyTime--;
   \   000021   90....       MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
   \   000024   E0           MOVX    A,@DPTR
   \   000025   24FF         ADD     A,#-0x1
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   34FF         ADDC    A,#-0x1
   \   00002C   F0           MOVX    @DPTR,A
    407              zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
   \                     ??zclSampleTemperatureSensor_event_loop_2:
   \   00002D                ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
   \   00002D   12....       LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
    408          
    409          		UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT");
   \   000030                ; Setup parameters for call to function UART_DebugPrint
   \   000030   7A..         MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">` & 0xff
   \   000032   7B..         MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">` >> 8) & 0xff
   \   000034   7900         MOV     R1,#0x0
   \   000036   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    410          
    411              return ( events ^ SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT );
   \   000039   EE           MOV     A,R6
   \   00003A   6401         XRL     A,#0x1
   \   00003C   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
    412            }
   \                     ??zclSampleTemperatureSensor_event_loop_4:
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   90....       MOV     DPTR,#zclSampleTemperatureSensor_NwkState
   \   000044   F0           MOVX    @DPTR,A
   \   000045   6409         XRL     A,#0x9
   \   000047   600A         JZ      ??zclSampleTemperatureSensor_event_loop_5
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   6407         XRL     A,#0x7
   \   00004C   6005         JZ      ??zclSampleTemperatureSensor_event_loop_5
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6406         XRL     A,#0x6
   \   000051   701A         JNZ     ??zclSampleTemperatureSensor_event_loop_6
   \                     ??zclSampleTemperatureSensor_event_loop_5:
   \   000053   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058                ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayUpdate
   \   000058   12....       LCALL   `??zclSampleTemperatureSensor_LcdDisplayUpdate::`; Banked call to: zclSampleTemperatureSensor_LcdDisplayUpdate
   \   00005B                ; Setup parameters for call to function zcl_EZModeAction
   \   00005B   7A00         MOV     R2,#0x0
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   7902         MOV     R1,#0x2
   \   000061   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \   000064                ; Setup parameters for call to function UART_DebugPrint
   \   000064   7A..         MOV     R2,#`?<Constant "ZDO_STATE_CHANGE">` & 0xff
   \   000066   7B..         MOV     R3,#(`?<Constant "ZDO_STATE_CHANGE">` >> 8) & 0xff
   \                     ??zclSampleTemperatureSensor_event_loop_7:
   \   000068   7900         MOV     R1,#0x0
   \   00006A   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
   \                     ??zclSampleTemperatureSensor_event_loop_6:
   \   00006D                ; Setup parameters for call to function osal_msg_deallocate
   \   00006D   AA..         MOV     R2,?V0
   \   00006F   AB..         MOV     R3,?V1
   \   000071   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleTemperatureSensor_event_loop_0:
   \   000074                ; Setup parameters for call to function osal_msg_receive
   \   000074   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00007C   8A..         MOV     ?V0,R2
   \   00007E   8B..         MOV     ?V1,R3
   \   000080   EA           MOV     A,R2
   \   000081   45..         ORL     A,?V1
   \   000083   7003         JNZ     $+5
   \   000085   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_8 & 0xFFFF
   \   000088   EA           MOV     A,R2
   \   000089   2418         ADD     A,#0x18
   \   00008B   F582         MOV     DPL,A
   \   00008D   E4           CLR     A
   \   00008E   35..         ADDC    A,?V1
   \   000090   F583         MOV     DPH,A
   \   000092   E0           MOVX    A,@DPTR
   \   000093   90....       MOV     DPTR,#msg_RSSI
   \   000096   F0           MOVX    @DPTR,A
   \   000097   8A82         MOV     DPL,R2
   \   000099   8B83         MOV     DPH,R3
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   24CC         ADD     A,#-0x34
   \   00009E   6040         JZ      ??zclSampleTemperatureSensor_event_loop_9
   \   0000A0   2474         ADD     A,#0x74
   \   0000A2   7003         JNZ     $+5
   \   0000A4   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_10 & 0xFFFF
   \   0000A7   24EF         ADD     A,#-0x11
   \   0000A9   6094         JZ      ??zclSampleTemperatureSensor_event_loop_4
   \   0000AB   24FE         ADD     A,#-0x2
   \   0000AD   70BE         JNZ     ??zclSampleTemperatureSensor_event_loop_6
   \   0000AF   EA           MOV     A,R2
   \   0000B0   240C         ADD     A,#0xc
   \   0000B2   F582         MOV     DPL,A
   \   0000B4   E4           CLR     A
   \   0000B5   35..         ADDC    A,?V1
   \   0000B7   F583         MOV     DPH,A
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   6406         XRL     A,#0x6
   \   0000BC   7004         JNZ     ??zclSampleTemperatureSensor_event_loop_11
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   6480         XRL     A,#0x80
   \                     ??zclSampleTemperatureSensor_event_loop_11:
   \   0000C2   7016         JNZ     ??zclSampleTemperatureSensor_event_loop_12
   \   0000C4                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   0000C4   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   0000C7   8A..         MOV     ?V2,R2
   \   0000C9   8B..         MOV     ?V3,R3
   \   0000CB   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000CE   7905         MOV     R1,#0x5
   \   0000D0   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \   0000D3                ; Setup parameters for call to function osal_mem_free
   \   0000D3   AA..         MOV     R2,?V2
   \   0000D5   AB..         MOV     R3,?V3
   \   0000D7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??zclSampleTemperatureSensor_event_loop_12:
   \   0000DA                ; Setup parameters for call to function UART_DebugPrint
   \   0000DA   7A..         MOV     R2,#`?<Constant "ZDO_CB_MSG">` & 0xff
   \   0000DC   7B..         MOV     R3,#(`?<Constant "ZDO_CB_MSG">` >> 8) & 0xff
   \   0000DE   8088         SJMP    ??zclSampleTemperatureSensor_event_loop_7
   \                     ??zclSampleTemperatureSensor_event_loop_9:
   \   0000E0   EA           MOV     A,R2
   \   0000E1   2417         ADD     A,#0x17
   \   0000E3   F5..         MOV     ?V2,A
   \   0000E5   E4           CLR     A
   \   0000E6   35..         ADDC    A,?V1
   \   0000E8   F5..         MOV     ?V3,A
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   14           DEC     A
   \   0000F3   601A         JZ      ??zclSampleTemperatureSensor_event_loop_13
   \   0000F5   24FD         ADD     A,#-0x3
   \   0000F7   6009         JZ      ??zclSampleTemperatureSensor_event_loop_14
   \   0000F9   24FA         ADD     A,#-0x6
   \   0000FB   701F         JNZ     ??zclSampleTemperatureSensor_event_loop_15
   \   0000FD                ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessInReportCmd
   \   0000FD   12....       LCALL   ??zclSampleTemperatureSensor_ProcessInReportCmd; Banked call to: zclSampleTemperatureSensor_ProcessInReportCmd
   \   000100   801A         SJMP    ??zclSampleTemperatureSensor_event_loop_15
   \                     ??zclSampleTemperatureSensor_event_loop_14:
   \   000102   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F9           MOV     R1,A
   \   000107   E8           MOV     A,R0
   \   000108   C3           CLR     C
   \   000109   99           SUBB    A,R1
   \   00010A   5010         JNC     ??zclSampleTemperatureSensor_event_loop_15
   \   00010C   08           INC     R0
   \   00010D   80F6         SJMP    ??CrossCallReturnLabel_13
   \                     ??zclSampleTemperatureSensor_event_loop_13:
   \   00010F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000112   8001         SJMP    ??zclSampleTemperatureSensor_event_loop_16
   \                     ??zclSampleTemperatureSensor_event_loop_17:
   \   000114   08           INC     R0
   \                     ??zclSampleTemperatureSensor_event_loop_16:
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F9           MOV     R1,A
   \   000117   E8           MOV     A,R0
   \   000118   C3           CLR     C
   \   000119   99           SUBB    A,R1
   \   00011A   40F8         JC      ??zclSampleTemperatureSensor_event_loop_17
   \                     ??zclSampleTemperatureSensor_event_loop_15:
   \   00011C   85..82       MOV     DPL,?V2
   \   00011F   85..83       MOV     DPH,?V3
   \   000122   E0           MOVX    A,@DPTR
   \   000123   FA           MOV     R2,A
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   FB           MOV     R3,A
   \   000127   EA           MOV     A,R2
   \   000128   4B           ORL     A,R3
   \   000129   6003         JZ      ??zclSampleTemperatureSensor_event_loop_18
   \   00012B                ; Setup parameters for call to function osal_mem_free
   \   00012B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??zclSampleTemperatureSensor_event_loop_18:
   \   00012E                ; Setup parameters for call to function UART_DebugPrint
   \   00012E   7A..         MOV     R2,#`?<Constant "ZCL_INCOMING_MSG">` & 0xff
   \   000130   7B..         MOV     R3,#(`?<Constant "ZCL_INCOMING_MSG">` >> 8) & 0xff
   \   000132   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_7 & 0xFFFF
   \                     ??zclSampleTemperatureSensor_event_loop_10:
   \   000135                ; Setup parameters for call to function zclSampleTemperatureSensor_HandleKeys
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   FA           MOV     R2,A
   \   00013A   85..82       MOV     DPL,?V0
   \   00013D   8B83         MOV     DPH,R3
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   F9           MOV     R1,A
   \   000143   12....       LCALL   `??zclSampleTemperatureSensor_HandleKeys::?relay`; Banked call to: zclSampleTemperatureSensor_HandleKeys
   \   000146                ; Setup parameters for call to function UART_DebugPrint
   \   000146   7A..         MOV     R2,#`?<Constant "KEY_CHANGE">` & 0xff
   \   000148   7B..         MOV     R3,#(`?<Constant "KEY_CHANGE">` >> 8) & 0xff
   \   00014A   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_7 & 0xFFFF
   \                     ??zclSampleTemperatureSensor_event_loop_8:
   \   00014D   EE           MOV     A,R6
   \   00014E   FA           MOV     R2,A
   \   00014F   EF           MOV     A,R7
   \   000150   6480         XRL     A,#0x80
   \   000152   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_19 & 0xFFFF
    413          
    414          	/*--------------------------------------------------------------------------*/
    415          	#ifdef ZCL_EZMODE
    416            // going on to next state
    417            if ( events & SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT )
   \                     ??zclSampleTemperatureSensor_event_loop_1:
   \   000155   5404         ANL     A,#0x4
   \   000157   6018         JZ      ??zclSampleTemperatureSensor_event_loop_20
    418            {
    419              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
   \   000159                ; Setup parameters for call to function zcl_EZModeAction
   \   000159   7A00         MOV     R2,#0x0
   \   00015B   7B00         MOV     R3,#0x0
   \   00015D   7901         MOV     R1,#0x1
   \   00015F   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    420          
    421          		UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT");
   \   000162                ; Setup parameters for call to function UART_DebugPrint
   \   000162   7A..         MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">_1` & 0xff
   \   000164   7B..         MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">_1` >> 8) & 0xff
   \   000166   7900         MOV     R1,#0x0
   \   000168   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    422          		
    423              return ( events ^ SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT );
   \   00016B   EE           MOV     A,R6
   \   00016C   6404         XRL     A,#0x4
   \   00016E   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
    424            }
    425          	/*--------------------------------------------------------------------------*/
    426            // the overall EZMode timer expired, so we timed out
    427            if ( events & SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT )
   \                     ??zclSampleTemperatureSensor_event_loop_20:
   \   000171   EE           MOV     A,R6
   \   000172   5402         ANL     A,#0x2
   \   000174   6018         JZ      ??zclSampleTemperatureSensor_event_loop_21
    428            {
    429              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
   \   000176                ; Setup parameters for call to function zcl_EZModeAction
   \   000176   7A00         MOV     R2,#0x0
   \   000178   7B00         MOV     R3,#0x0
   \   00017A   7963         MOV     R1,#0x63
   \   00017C   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    430              UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT");	
   \   00017F                ; Setup parameters for call to function UART_DebugPrint
   \   00017F   7A..         MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">_2` & 0xff
   \   000181   7B..         MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">_2` >> 8) & 0xff
   \   000183   7900         MOV     R1,#0x0
   \   000185   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    431              return ( events ^ SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT );
   \   000188   EE           MOV     A,R6
   \   000189   6402         XRL     A,#0x2
   \   00018B   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
    432            }
    433          	#endif // ZLC_EZMODE
    434          
    435          	/*--------------------------------------------------------------------------*/
    436            if ( events & SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT )
   \                     ??zclSampleTemperatureSensor_event_loop_21:
   \   00018E   EE           MOV     A,R6
   \   00018F   5408         ANL     A,#0x8
   \   000191   6027         JZ      ??zclSampleTemperatureSensor_event_loop_22
    437            {
    438              giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
   \   000193   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   000196   E4           CLR     A
   \   000197   F0           MOVX    @DPTR,A
    439              zclSampleTemperatureSensor_LcdDisplayUpdate();
   \   000198                ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayUpdate
   \   000198   12....       LCALL   `??zclSampleTemperatureSensor_LcdDisplayUpdate::`; Banked call to: zclSampleTemperatureSensor_LcdDisplayUpdate
    440          		if (FLAG_BINDING)
   \   00019B   90....       MOV     DPTR,#FLAG_BINDING
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   600A         JZ      ??zclSampleTemperatureSensor_event_loop_23
    441          		{
    442          			FLAG_BINDING = FALSE;
   \   0001A1   E4           CLR     A
   \   0001A2   F0           MOVX    @DPTR,A
    443          			if (FLAG_HARD_BINDING)
   \   0001A3   90....       MOV     DPTR,#FLAG_HARD_BINDING
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   6002         JZ      ??zclSampleTemperatureSensor_event_loop_23
    444          			{
    445          				FLAG_HARD_BINDING = FALSE;
   \   0001A9   E4           CLR     A
   \   0001AA   F0           MOVX    @DPTR,A
    446          			}
    447          		}
    448          		UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT");
   \                     ??zclSampleTemperatureSensor_event_loop_23:
   \   0001AB                ; Setup parameters for call to function UART_DebugPrint
   \   0001AB   7A..         MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">_3` & 0xff
   \   0001AD   7B..         MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">_3` >> 8) & 0xff
   \   0001AF   7900         MOV     R1,#0x0
   \   0001B1   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    449              return ( events ^ SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT );
   \   0001B4   EE           MOV     A,R6
   \   0001B5   6408         XRL     A,#0x8
   \   0001B7   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
    450            }
    451          
    452          	/*--------------------------------------------------------------------------*/
    453          	if ( events & SAMPLETEMPERATURESENSOR_SW1)
   \                     ??zclSampleTemperatureSensor_event_loop_22:
   \   0001BA   EF           MOV     A,R7
   \   0001BB   5402         ANL     A,#0x2
   \   0001BD   6012         JZ      ??zclSampleTemperatureSensor_event_loop_24
    454          	{
    455                Toggle(Output_2);
   \   0001BF                ; Setup parameters for call to function Toggle
   \   0001BF   7902         MOV     R1,#0x2
   \   0001C1   12....       LCALL   `??Toggle::?relay`   ; Banked call to: Toggle
    456          	  zclSampleTemperatureSensor_SendState(Output_2);
   \   0001C4                ; Setup parameters for call to function zclSampleTemperatureSensor_SendState
   \   0001C4   7902         MOV     R1,#0x2
   \   0001C6   12....       LCALL   `??zclSampleTemperatureSensor_SendState::?relay`; Banked call to: zclSampleTemperatureSensor_SendState
    457          	  return (events ^ SAMPLETEMPERATURESENSOR_SW1);
   \   0001C9   EE           MOV     A,R6
   \   0001CA   FA           MOV     R2,A
   \   0001CB   EF           MOV     A,R7
   \   0001CC   6402         XRL     A,#0x2
   \   0001CE   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_19 & 0xFFFF
    458          	}
    459          	if ( events & SAMPLETEMPERATURESENSOR_SW2 )
   \                     ??zclSampleTemperatureSensor_event_loop_24:
   \   0001D1   EF           MOV     A,R7
   \   0001D2   5404         ANL     A,#0x4
   \   0001D4   6012         JZ      ??zclSampleTemperatureSensor_event_loop_25
    460          	{
    461                Toggle(Output_3);
   \   0001D6                ; Setup parameters for call to function Toggle
   \   0001D6   7903         MOV     R1,#0x3
   \   0001D8   12....       LCALL   `??Toggle::?relay`   ; Banked call to: Toggle
    462          	  zclSampleTemperatureSensor_SendState(Output_3);
   \   0001DB                ; Setup parameters for call to function zclSampleTemperatureSensor_SendState
   \   0001DB   7903         MOV     R1,#0x3
   \   0001DD   12....       LCALL   `??zclSampleTemperatureSensor_SendState::?relay`; Banked call to: zclSampleTemperatureSensor_SendState
    463          	  return (events ^ SAMPLETEMPERATURESENSOR_SW2);
   \   0001E0   EE           MOV     A,R6
   \   0001E1   FA           MOV     R2,A
   \   0001E2   EF           MOV     A,R7
   \   0001E3   6404         XRL     A,#0x4
   \   0001E5   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_19 & 0xFFFF
    464          	}
    465          	if ( events & SAMPLETEMPERATURESENSOR_SW3 )
   \                     ??zclSampleTemperatureSensor_event_loop_25:
   \   0001E8   EF           MOV     A,R7
   \   0001E9   5408         ANL     A,#0x8
   \   0001EB   6017         JZ      ??zclSampleTemperatureSensor_event_loop_26
    466          	{
    467                Toggle(Output_2);
   \   0001ED                ; Setup parameters for call to function Toggle
   \   0001ED   7902         MOV     R1,#0x2
   \   0001EF   12....       LCALL   `??Toggle::?relay`   ; Banked call to: Toggle
    468          	  Toggle(Output_3);
   \   0001F2                ; Setup parameters for call to function Toggle
   \   0001F2   7903         MOV     R1,#0x3
   \   0001F4   12....       LCALL   `??Toggle::?relay`   ; Banked call to: Toggle
    469          	  zclSampleTemperatureSensor_SendState(Output_1);
   \   0001F7                ; Setup parameters for call to function zclSampleTemperatureSensor_SendState
   \   0001F7   7901         MOV     R1,#0x1
   \   0001F9   12....       LCALL   `??zclSampleTemperatureSensor_SendState::?relay`; Banked call to: zclSampleTemperatureSensor_SendState
    470          	  return (events ^ SAMPLETEMPERATURESENSOR_SW3);
   \   0001FC   EE           MOV     A,R6
   \   0001FD   FA           MOV     R2,A
   \   0001FE   EF           MOV     A,R7
   \   0001FF   6408         XRL     A,#0x8
   \   000201   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_19 & 0xFFFF
    471          	}
    472          
    473          /****************************************
    474           *  Check event button 
    475           * 	
    476           ****************************************/
    477          
    478          
    479            if ( events & SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT )
   \                     ??zclSampleTemperatureSensor_event_loop_26:
   \   000204   EE           MOV     A,R6
   \   000205   5410         ANL     A,#0x10
   \   000207   6009         JZ      ??zclSampleTemperatureSensor_event_loop_27
    480            {
    481            	//UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT");
    482              zclSampleTemperatureSensor_SendTemp();			
   \   000209                ; Setup parameters for call to function zclSampleTemperatureSensor_SendTemp
   \   000209   12....       LCALL   `??zclSampleTemperatureSensor_SendTemp::?relay`; Banked call to: zclSampleTemperatureSensor_SendTemp
    483          	//UART_SendString(HAL_UART_PORT_0,"Teddy_sample");	
    484              // report current temperature reading every 10 seconds
    485              //osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT, SAMPLETEMPERATURESENSOR_REPORT_INTERVAL );
    486          
    487              return ( events ^ SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT );
   \   00020C   EE           MOV     A,R6
   \   00020D   6410         XRL     A,#0x10
   \   00020F   02....       LJMP    ??zclSampleTemperatureSensor_event_loop_3 & 0xFFFF
    488            }
    489          	/*--------------------------------------------------------------------------*/
    490          	if ( events & SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT )
   \                     ??zclSampleTemperatureSensor_event_loop_27:
   \   000212   EE           MOV     A,R6
   \   000213   5420         ANL     A,#0x20
   \   000215   6045         JZ      ??zclSampleTemperatureSensor_event_loop_28
    491            {
    492          		if (FLAG_JOIN_CONFIRM == FALSE && FLAG_BINDING == FALSE)
   \   000217   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   7022         JNZ     ??zclSampleTemperatureSensor_event_loop_29
   \   00021D   90....       MOV     DPTR,#FLAG_BINDING
   \   000220   E0           MOVX    A,@DPTR
   \   000221   702B         JNZ     ??zclSampleTemperatureSensor_event_loop_30
    493          		{
    494          			zclSampleTemperatureSensor_BindingProcess();
   \   000223                ; Setup parameters for call to function zclSampleTemperatureSensor_BindingProcess
   \   000223   12....       LCALL   `??zclSampleTemperatureSensor_BindingProcess::?r`; Banked call to: zclSampleTemperatureSensor_BindingProcess
    495          			// Stop binding after 100ms (time for process...)
    496          			osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT, 5000 );
   \   000226                ; Setup parameters for call to function osal_start_timerEx
   \   000226   90....       MOV     DPTR,#__Constant_1388
   \   000229   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00022C   7A20         MOV     R2,#0x20
   \   00022E   7B00         MOV     R3,#0x0
   \   000230   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   000233   E0           MOVX    A,@DPTR
   \   000234   F9           MOV     R1,A
   \   000235   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000238   7404         MOV     A,#0x4
   \   00023A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023D   800F         SJMP    ??zclSampleTemperatureSensor_event_loop_30
    497          		}
    498          		else if (FLAG_JOIN_CONFIRM == TRUE && FLAG_BINDING == TRUE)
   \                     ??zclSampleTemperatureSensor_event_loop_29:
   \   00023F   6401         XRL     A,#0x1
   \   000241   700B         JNZ     ??zclSampleTemperatureSensor_event_loop_30
   \   000243   90....       MOV     DPTR,#FLAG_BINDING
   \   000246   E0           MOVX    A,@DPTR
   \   000247   6401         XRL     A,#0x1
   \   000249   7003         JNZ     ??zclSampleTemperatureSensor_event_loop_30
    499          		{
    500          			zclSampleTemperatureSensor_BindingProcess();
   \   00024B                ; Setup parameters for call to function zclSampleTemperatureSensor_BindingProcess
   \   00024B   12....       LCALL   `??zclSampleTemperatureSensor_BindingProcess::?r`; Banked call to: zclSampleTemperatureSensor_BindingProcess
    501          		}
    502          		
    503          		UART_DebugPrint(HAL_UART_PORT_0, "SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT");
   \                     ??zclSampleTemperatureSensor_event_loop_30:
   \   00024E                ; Setup parameters for call to function UART_DebugPrint
   \   00024E   7A..         MOV     R2,#`?<Constant "SAMPLETEMPERATURESENS...">_4` & 0xff
   \   000250   7B..         MOV     R3,#(`?<Constant "SAMPLETEMPERATURESENS...">_4` >> 8) & 0xff
   \   000252   7900         MOV     R1,#0x0
   \   000254   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    504          
    505              return ( events ^ SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT );
   \   000257   EE           MOV     A,R6
   \   000258   6420         XRL     A,#0x20
   \   00025A   806F         SJMP    ??zclSampleTemperatureSensor_event_loop_3
    506            }
    507          	/*--------------------------------------------------------------------------*/
    508          	if ( events & SAMPLETEMPERATURESENSOR_UART_REPLY_CMD_EVT )
   \                     ??zclSampleTemperatureSensor_event_loop_28:
   \   00025C   EE           MOV     A,R6
   \   00025D   5440         ANL     A,#0x40
   \   00025F   6027         JZ      ??zclSampleTemperatureSensor_event_loop_31
    509            {
    510          		// My apps
    511          		if (UART_ParseRxPackage(HAL_UART_PORT_0))
   \   000261                ; Setup parameters for call to function UART_ParseRxPackage
   \   000261   7900         MOV     R1,#0x0
   \   000263   12....       LCALL   `??UART_ParseRxPackage::?relay`; Banked call to: UART_ParseRxPackage
   \   000266   E9           MOV     A,R1
   \   000267   6003         JZ      ??zclSampleTemperatureSensor_event_loop_32
    512          		{
    513          			ZCMD_ReplyCMD();
   \   000269                ; Setup parameters for call to function ZCMD_ReplyCMD
   \   000269   12....       LCALL   `??ZCMD_ReplyCMD::?relay`; Banked call to: ZCMD_ReplyCMD
    514          		}
    515          
    516          		// Restart timer
    517              if ( UART_PARSE_RX_PACKAGE_EVT_PERIOD )
    518              {
    519                osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_UART_REPLY_CMD_EVT, UART_PARSE_RX_PACKAGE_EVT_PERIOD );
   \                     ??zclSampleTemperatureSensor_event_loop_32:
   \   00026C                ; Setup parameters for call to function osal_start_timerEx
   \   00026C   90....       MOV     DPTR,#__Constant_a
   \   00026F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000272   7A40         MOV     R2,#0x40
   \   000274   7B00         MOV     R3,#0x0
   \   000276   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   F9           MOV     R1,A
   \   00027B   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00027E   7404         MOV     A,#0x4
   \   000280   12....       LCALL   ?DEALLOC_XSTACK8
    520              }		
    521              return (events ^ SAMPLETEMPERATURESENSOR_UART_REPLY_CMD_EVT);
   \   000283   EE           MOV     A,R6
   \   000284   6440         XRL     A,#0x40
   \   000286   8043         SJMP    ??zclSampleTemperatureSensor_event_loop_3
    522            }
    523          	/*--------------------------------------------------------------------------*/
    524          	if ( events & SAMPLETEMPERATURESENSOR_CHECK_SYSTEM_EVT )
   \                     ??zclSampleTemperatureSensor_event_loop_31:
   \   000288   EE           MOV     A,R6
   \   000289   5480         ANL     A,#0x80
   \   00028B   6043         JZ      ??zclSampleTemperatureSensor_event_loop_33
    525            {
    526          		// My apps
    527          		if ( (FLAG_JOIN_CONFIRM == FALSE) || (FLAG_JOIN_CONFIRM == TRUE && FLAG_BINDING == TRUE && FLAG_HARD_BINDING == FALSE) )
   \   00028D   90....       MOV     DPTR,#FLAG_JOIN_CONFIRM
   \   000290   E0           MOVX    A,@DPTR
   \   000291   6012         JZ      ??zclSampleTemperatureSensor_event_loop_34
   \   000293   6401         XRL     A,#0x1
   \   000295   701A         JNZ     ??zclSampleTemperatureSensor_event_loop_35
   \   000297   90....       MOV     DPTR,#FLAG_BINDING
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   6401         XRL     A,#0x1
   \   00029D   7012         JNZ     ??zclSampleTemperatureSensor_event_loop_35
   \   00029F   90....       MOV     DPTR,#FLAG_HARD_BINDING
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   700C         JNZ     ??zclSampleTemperatureSensor_event_loop_35
    528          		{
    529          			osal_set_event( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT );
   \                     ??zclSampleTemperatureSensor_event_loop_34:
   \   0002A5                ; Setup parameters for call to function osal_set_event
   \   0002A5   7A20         MOV     R2,#0x20
   \   0002A7   7B00         MOV     R3,#0x0
   \   0002A9   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   F9           MOV     R1,A
   \   0002AE   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    530          		}	
    531          
    532          		// Restart timer
    533              if ( CHECK_SYSTEM_EVT_PERIOD )
    534              {
    535                osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_CHECK_SYSTEM_EVT, CHECK_SYSTEM_EVT_PERIOD );
   \                     ??zclSampleTemperatureSensor_event_loop_35:
   \   0002B1                ; Setup parameters for call to function osal_start_timerEx
   \   0002B1   90....       MOV     DPTR,#__Constant_2710
   \   0002B4   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0002B7   7A80         MOV     R2,#-0x80
   \   0002B9   7B00         MOV     R3,#0x0
   \   0002BB   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   0002BE   E0           MOVX    A,@DPTR
   \   0002BF   F9           MOV     R1,A
   \   0002C0   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0002C3   7404         MOV     A,#0x4
   \   0002C5   12....       LCALL   ?DEALLOC_XSTACK8
    536              }		
    537              return (events ^ SAMPLETEMPERATURESENSOR_CHECK_SYSTEM_EVT);
   \   0002C8   EE           MOV     A,R6
   \   0002C9   6480         XRL     A,#0x80
   \                     ??zclSampleTemperatureSensor_event_loop_3:
   \   0002CB   FA           MOV     R2,A
   \   0002CC   EF           MOV     A,R7
   \                     ??zclSampleTemperatureSensor_event_loop_19:
   \   0002CD   FB           MOV     R3,A
   \   0002CE   8004         SJMP    ??zclSampleTemperatureSensor_event_loop_36
    538            }
    539          	
    540          	/*--------------------------------------------------------------------------*/
    541          
    542            // Discard unknown events
    543            return 0;
   \                     ??zclSampleTemperatureSensor_event_loop_33:
   \   0002D0   7A00         MOV     R2,#0x0
   \   0002D2   7B00         MOV     R3,#0x0
   \                     ??zclSampleTemperatureSensor_event_loop_36:
   \   0002D4   7402         MOV     A,#0x2
   \   0002D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D9   7F06         MOV     R7,#0x6
   \   0002DB   02....       LJMP    ?BANKED_LEAVE_XDATA
    544          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
   \   000003                REQUIRE ??Subroutine15_0
   \   000003                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    545          
    546          /*********************************************************************
    547           * @fn      zclSampleTemperatureSensor_HandleKeys
    548           *
    549           * @brief   Handles all key events for this device.
    550           *
    551           * @param   shift - true if in shift/alt.
    552           * @param   keys - bit field for key events. Valid entries:
    553           *                 HAL_KEY_SW_5
    554           *                 HAL_KEY_SW_4
    555           *                 HAL_KEY_SW_3
    556           *                 HAL_KEY_SW_2
    557           *                 HAL_KEY_SW_1
    558           *
    559           * @return  none
    560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_EZModeAction
   \   000001                ; Setup parameters for call to function zcl_EZModeAction
   \   000001                ; Setup parameters for call to function zcl_InvokeEZMode
   \   000001                ; Setup parameters for call to function zcl_InvokeEZMode
   \   000001   AA..         MOV     R2,?XSP + 0
   \   000003   AB..         MOV     R3,?XSP + 1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          static void zclSampleTemperatureSensor_HandleKeys( byte shift, byte keys )
   \                     zclSampleTemperatureSensor_HandleKeys:
    562          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    563               if ( keys & HAL_KEY_SW_9 ) 
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   500C         JNC     ??zclSampleTemperatureSensor_HandleKeys_0
    564          	{
    565                 osal_set_event(zclSampleTemperatureSensor_TaskID,SAMPLETEMPERATURESENSOR_SW3);	
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   7A00         MOV     R2,#0x0
   \   000014   7B08         MOV     R3,#0x8
   \   000016   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    566          	}
    567          	if ( keys & HAL_KEY_SW_7 ) //~ sw2 on board
   \                     ??zclSampleTemperatureSensor_HandleKeys_0:
   \   00001E   EF           MOV     A,R7
   \   00001F   A2E6         MOV     C,0xE0 /* A   */.6
   \   000021   500C         JNC     ??zclSampleTemperatureSensor_HandleKeys_1
    568          	{
    569          		
    570                 osal_set_event(zclSampleTemperatureSensor_TaskID,SAMPLETEMPERATURESENSOR_SW2);
   \   000023                ; Setup parameters for call to function osal_set_event
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B04         MOV     R3,#0x4
   \   000027   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    571          	}
    572          	if ( keys & HAL_KEY_SW_6 ) //~ SW1 on board
   \                     ??zclSampleTemperatureSensor_HandleKeys_1:
   \   00002F   EF           MOV     A,R7
   \   000030   A2E5         MOV     C,0xE0 /* A   */.5
   \   000032   500C         JNC     ??zclSampleTemperatureSensor_HandleKeys_2
    573          	{
    574          	osal_set_event(zclSampleTemperatureSensor_TaskID,SAMPLETEMPERATURESENSOR_SW1);
   \   000034                ; Setup parameters for call to function osal_set_event
   \   000034   7A00         MOV     R2,#0x0
   \   000036   7B02         MOV     R3,#0x2
   \   000038   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    575          	}
    576          
    577            if ( keys & HAL_KEY_SW_8 ) //~ SW3 on board
   \                     ??zclSampleTemperatureSensor_HandleKeys_2:
   \   000040   EF           MOV     A,R7
   \   000041   A2E7         MOV     C,0xE0 /* A   */.7
   \   000043   4003         JC      $+5
   \   000045   02....       LJMP    ??zclSampleTemperatureSensor_HandleKeys_3 & 0xFFFF
    578            {
    579            	UART_DebugPrint(HAL_UART_PORT_0, "SW8");
   \   000048                ; Setup parameters for call to function UART_DebugPrint
   \   000048   7A..         MOV     R2,#`?<Constant "SW8">` & 0xff
   \   00004A   7B..         MOV     R3,#(`?<Constant "SW8">` >> 8) & 0xff
   \   00004C   7900         MOV     R1,#0x0
   \   00004E   12....       LCALL   `??UART_DebugPrint::?relay`; Banked call to: UART_DebugPrint
    580              if ( ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE ) ||
    581                  ( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE ) )
   \   000051   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6004         JZ      ??zclSampleTemperatureSensor_HandleKeys_4
   \   000057   6401         XRL     A,#0x1
   \   000059   7072         JNZ     ??zclSampleTemperatureSensor_HandleKeys_3
    582              {
    583                giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
   \                     ??zclSampleTemperatureSensor_HandleKeys_4:
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
    584          
    585          			FLAG_BINDING = !FLAG_BINDING;
   \   00005D   90....       MOV     DPTR,#FLAG_BINDING
   \   000060   E0           MOVX    A,@DPTR
   \   000061   7004         JNZ     ??zclSampleTemperatureSensor_HandleKeys_5
   \   000063   7401         MOV     A,#0x1
   \   000065   8001         SJMP    ??zclSampleTemperatureSensor_HandleKeys_6
   \                     ??zclSampleTemperatureSensor_HandleKeys_5:
   \   000067   E4           CLR     A
   \                     ??zclSampleTemperatureSensor_HandleKeys_6:
   \   000068   F0           MOVX    @DPTR,A
    586          			FLAG_HARD_BINDING = !FLAG_HARD_BINDING;
   \   000069   90....       MOV     DPTR,#FLAG_HARD_BINDING
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   7004         JNZ     ??zclSampleTemperatureSensor_HandleKeys_7
   \   00006F   7401         MOV     A,#0x1
   \   000071   8001         SJMP    ??zclSampleTemperatureSensor_HandleKeys_8
   \                     ??zclSampleTemperatureSensor_HandleKeys_7:
   \   000073   E4           CLR     A
   \                     ??zclSampleTemperatureSensor_HandleKeys_8:
   \   000074   12....       LCALL   ?Subroutine3 & 0xFFFF
    587          		#ifdef ZCL_EZMODE
    588                zclEZMode_InvokeData_t ezModeData;
    589                static uint16 clusterIDs[] = { ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT };   // only bind on the Temperature Measurement cluster
    590          
    591                // Invoke EZ-Mode
    592                ezModeData.endpoint = SAMPLETEMPERATURESENSOR_ENDPOINT; // endpoint on which to invoke EZ-Mode
    593                if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
    594                     ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER )   ||
    595                     ( zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE ) )
   \                     ??CrossCallReturnLabel_2:
   \   000077   600A         JZ      ??zclSampleTemperatureSensor_HandleKeys_9
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   6407         XRL     A,#0x7
   \   00007C   6005         JZ      ??zclSampleTemperatureSensor_HandleKeys_9
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6406         XRL     A,#0x6
   \   000081   7009         JNZ     ??zclSampleTemperatureSensor_HandleKeys_10
    596                {
    597                  ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zclSampleTemperatureSensor_HandleKeys_9:
   \   000083   7401         MOV     A,#0x1
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   7401         MOV     A,#0x1
   \   00008A   8006         SJMP    ??zclSampleTemperatureSensor_HandleKeys_11
    598                }
    599                else
    600                {
    601                  ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zclSampleTemperatureSensor_HandleKeys_10:
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   E4           CLR     A
   \                     ??zclSampleTemperatureSensor_HandleKeys_11:
   \   000092   F0           MOVX    @DPTR,A
    602                }
    603                ezModeData.initiator = TRUE;        // Temperature Sensor is an initiator
   \   000093   7402         MOV     A,#0x2
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   7401         MOV     A,#0x1
   \   00009A   F0           MOVX    @DPTR,A
    604                ezModeData.numActiveInClusters = 1;
   \   00009B   7403         MOV     A,#0x3
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   F0           MOVX    @DPTR,A
    605                ezModeData.pActiveInClusterIDs = clusterIDs;
   \   0000A3   7404         MOV     A,#0x4
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   74..         MOV     A,#??clusterIDs & 0xff
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   74..         MOV     A,#(??clusterIDs >> 8) & 0xff
   \   0000AE   F0           MOVX    @DPTR,A
    606                ezModeData.numActiveOutClusters = 0;   // active output cluster
   \   0000AF   7406         MOV     A,#0x6
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   E4           CLR     A
   \   0000B5   F0           MOVX    @DPTR,A
    607                ezModeData.pActiveOutClusterIDs = NULL;
   \   0000B6   7407         MOV     A,#0x7
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   E4           CLR     A
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    608                zcl_InvokeEZMode( &ezModeData );
   \                     ??CrossCallReturnLabel_21:
   \   0000C1   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
    609          
    610          			#ifdef LCD_SUPPORTED
    611                HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   \   0000C4                ; Setup parameters for call to function HalLcdWriteString
   \   0000C4   7902         MOV     R1,#0x2
   \   0000C6   7A..         MOV     R2,#`?<Constant "EZMode">` & 0xff
   \   0000C8   7B..         MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
   \   0000CA   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    612          			#endif
    613          
    614                // NOT ZCL_EZMODE, Use EndDeviceBind
    615          		#else
    616                {
    617                  zAddrType_t dstAddr;
    618                  dstAddr.addrMode = Addr16Bit;
    619                  dstAddr.addr.shortAddr = 0;   // Coordinator makes the EDB match
    620          
    621                  // Initiate an End Device Bind Request, this bind request will
    622                  // only use a cluster list that is important to binding.
    623                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    624                  ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    625                                        SAMPLETEMPERATURESENSOR_ENDPOINT,
    626                                        ZCL_HA_PROFILE_ID,
    627                                        0, NULL,
    628                                        ZCLSAMPLETEMPERATURESENSOR_BINDINGLIST, bindingOutClusters,
    629                                        FALSE );
    630                }
    631          		#endif // ZCL_EZMODE
    632              }
    633            }
    634          
    635            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclSampleTemperatureSensor_HandleKeys_3:
   \   0000CD   EF           MOV     A,R7
   \   0000CE   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000D0   5041         JNC     ??zclSampleTemperatureSensor_HandleKeys_12
    636            {
    637              giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
   \   0000D2   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   0000D5   E4           CLR     A
   \   0000D6   F0           MOVX    @DPTR,A
    638          
    639              if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
    640                   ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER ) )
   \   0000D7   90....       MOV     DPTR,#zclSampleTemperatureSensor_NwkState
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   6409         XRL     A,#0x9
   \   0000DD   6005         JZ      ??zclSampleTemperatureSensor_HandleKeys_13
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   6407         XRL     A,#0x7
   \   0000E2   702F         JNZ     ??zclSampleTemperatureSensor_HandleKeys_12
    641              {
    642                zAddrType_t tmpAddr;
    643          
    644                tmpAddr.addrMode = Addr16Bit;
   \                     ??zclSampleTemperatureSensor_HandleKeys_13:
   \   0000E4   7408         MOV     A,#0x8
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   F0           MOVX    @DPTR,A
    645                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   0000EC                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000EC   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000EF   85..82       MOV     DPL,?XSP + 0
   \   0000F2   85..83       MOV     DPH,?XSP + 1
   \   0000F5   EA           MOV     A,R2
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   EB           MOV     A,R3
   \   0000F9   F0           MOVX    @DPTR,A
    646          
    647                // toggle permit join
    648                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \   0000FA   90....       MOV     DPTR,#gPermitDuration
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   6003         JZ      ??zclSampleTemperatureSensor_HandleKeys_14
   \   000100   E4           CLR     A
   \   000101   8002         SJMP    ??zclSampleTemperatureSensor_HandleKeys_15
   \                     ??zclSampleTemperatureSensor_HandleKeys_14:
   \   000103   74FF         MOV     A,#-0x1
   \                     ??zclSampleTemperatureSensor_HandleKeys_15:
   \   000105   F0           MOVX    @DPTR,A
    649          
    650                // Trust Center significance is always true
    651                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
   \   000106                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   000106   7D00         MOV     R5,#0x0
   \   000108   7C01         MOV     R4,#0x1
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F9           MOV     R1,A
   \   00010C   AA..         MOV     R2,?XSP + 0
   \   00010E   AB..         MOV     R3,?XSP + 1
   \   000110   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
    652              }
    653            }
    654          
    655            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zclSampleTemperatureSensor_HandleKeys_12:
   \   000113   EE           MOV     A,R6
   \   000114   600A         JZ      ??zclSampleTemperatureSensor_HandleKeys_16
   \   000116   EF           MOV     A,R7
   \   000117   A2E2         MOV     C,0xE0 /* A   */.2
   \   000119   5026         JNC     ??zclSampleTemperatureSensor_HandleKeys_17
    656            {
    657              zclSampleTemperatureSensor_BasicResetCB();
   \   00011B                ; Setup parameters for call to function zclSampleTemperatureSensor_BasicResetCB
   \   00011B   12....       LCALL   `??zclSampleTemperatureSensor_BasicResetCB::?rel`; Banked call to: zclSampleTemperatureSensor_BasicResetCB
   \   00011E   8021         SJMP    ??zclSampleTemperatureSensor_HandleKeys_17
    658            }
    659            else if ( keys & HAL_KEY_SW_5 )
   \                     ??zclSampleTemperatureSensor_HandleKeys_16:
   \   000120   EF           MOV     A,R7
   \   000121   A2E2         MOV     C,0xE0 /* A   */.2
   \   000123   501C         JNC     ??zclSampleTemperatureSensor_HandleKeys_17
    660            {
    661              if ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE )
   \   000125   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   000128   E0           MOVX    A,@DPTR
   \   000129   7004         JNZ     ??zclSampleTemperatureSensor_HandleKeys_18
    662              {
    663                giTemperatureSensorScreenMode = TEMPSENSE_HELPMODE;
   \   00012B   7401         MOV     A,#0x1
   \   00012D   8011         SJMP    ??zclSampleTemperatureSensor_HandleKeys_19
    664              }
    665              else if ( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE )
   \                     ??zclSampleTemperatureSensor_HandleKeys_18:
   \   00012F   6401         XRL     A,#0x1
   \   000131   700E         JNZ     ??zclSampleTemperatureSensor_HandleKeys_17
    666              {
    667          #ifdef LCD_SUPPORTED
    668                HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
   \   000133                ; Setup parameters for call to function HalLcdWriteString
   \   000133   7902         MOV     R1,#0x2
   \   000135   7A..         MOV     R2,#sClearLine & 0xff
   \   000137   7B..         MOV     R3,#(sClearLine >> 8) & 0xff
   \   000139   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    669          #endif
    670                giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
   \   00013C   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   00013F   E4           CLR     A
   \                     ??zclSampleTemperatureSensor_HandleKeys_19:
   \   000140   F0           MOVX    @DPTR,A
    671              }
    672            }
    673          
    674            // update display
    675            zclSampleTemperatureSensor_LcdDisplayUpdate();
   \                     ??zclSampleTemperatureSensor_HandleKeys_17:
   \   000141                ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayUpdate
   \   000141   12....       LCALL   `??zclSampleTemperatureSensor_LcdDisplayUpdate::`; Banked call to: zclSampleTemperatureSensor_LcdDisplayUpdate
    676          }
   \   000144   7409         MOV     A,#0x9
   \   000146   12....       LCALL   ?DEALLOC_XSTACK8
   \   000149   7F01         MOV     R7,#0x1
   \   00014B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#zclSampleTemperatureSensor_NwkState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6409         XRL     A,#0x9
   \   000010   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??clusterIDs:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for clusterIDs>`
   \   000002                REQUIRE __INIT_XDATA_I
    677          
    678          /*********************************************************************
    679           * @fn      zclSampleTemperatureSensor_LcdDisplayUpdate
    680           *
    681           * @brief   Called to update the LCD display.
    682           *
    683           * @param   none
    684           *
    685           * @return  none
    686           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    687          void zclSampleTemperatureSensor_LcdDisplayUpdate( void )
   \                     zclSampleTemperatureSensor_LcdDisplayUpdate:
    688          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    689            // turn on red LED for temperatures >= 24.00C
    690            if ( zclSampleTemperatureSensor_MeasuredValue >= 2400 )
    691            {
    692          //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
    693          //    HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    694            }
    695            // turn on green LED for temperatures <= 20.00C
    696            else if ( zclSampleTemperatureSensor_MeasuredValue <= 2000 )
    697            {
    698          //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    699          //    HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
    700            }
    701            // turn on both red and green LEDs for temperatures between 20.00C and 24.00C
    702            else
    703            {
    704          //    HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    705          //    HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    706            }
    707          
    708            if ( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE )
   \   000004   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7005         JNZ     ??zclSampleTemperatureSensor_LcdDisplayUpdate_0
    709            {
    710              zclSampleTemperatureSensor_LcdDisplayHelpMode();
   \   00000C                ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayHelpMode
   \   00000C   12....       LCALL   ??zclSampleTemperatureSensor_LcdDisplayHelpMode; Banked call to: zclSampleTemperatureSensor_LcdDisplayHelpMode
   \   00000F   8003         SJMP    ??zclSampleTemperatureSensor_LcdDisplayUpdate_1
    711            }
    712            else
    713            {
    714              zclSampleTemperatureSensor_LcdDisplayMainMode();
   \                     ??zclSampleTemperatureSensor_LcdDisplayUpdate_0:
   \   000011                ; Setup parameters for call to function zclSampleTemperatureSensor_LcdDisplayMainMode
   \   000011   12....       LCALL   ??zclSampleTemperatureSensor_LcdDisplayMainMode; Banked call to: zclSampleTemperatureSensor_LcdDisplayMainMode
    715            }
    716          }
   \                     ??zclSampleTemperatureSensor_LcdDisplayUpdate_1:
   \   000014   02....       LJMP    ??Subroutine14_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    717          
    718          /*********************************************************************
    719           * @fn      zclSampleTemperatureSensor_LcdDisplayMainMode
    720           *
    721           * @brief   Called to display the main screen on the LCD.
    722           *
    723           * @param   none
    724           *
    725           * @return  none
    726           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    727          void zclSampleTemperatureSensor_LcdDisplayMainMode( void )
   \                     zclSampleTemperatureSensor_LcdDisplayMainMode:
    728          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    729            char sDisplayTemp[16];
    730          
    731            if ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD )
   \   00000A   90....       MOV     DPTR,#zclSampleTemperatureSensor_NwkState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6409         XRL     A,#0x9
   \   000010   7004         JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_1
    732            {
    733              zclHA_LcdStatusLine1( 0 );
   \   000012                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000012   7900         MOV     R1,#0x0
   \   000014   8010         SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_2
    734            }
    735            else if ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER )
   \                     ??zclSampleTemperatureSensor_LcdDisplayMainMode_1:
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6407         XRL     A,#0x7
   \   000019   7004         JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_3
    736            {
    737              zclHA_LcdStatusLine1( 1 );
   \   00001B                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   00001B   7901         MOV     R1,#0x1
   \   00001D   8007         SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_2
    738            }
    739            else if ( zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE )
   \                     ??zclSampleTemperatureSensor_LcdDisplayMainMode_3:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6406         XRL     A,#0x6
   \   000022   7005         JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_4
    740            {
    741              zclHA_LcdStatusLine1( 2 );
   \   000024                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000024   7902         MOV     R1,#0x2
   \                     ??zclSampleTemperatureSensor_LcdDisplayMainMode_2:
   \   000026   12....       LCALL   `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
    742            }
    743          
    744            // display current temperature
    745            osal_memcpy(sDisplayTemp, "TEMP: ", 6);
   \                     ??zclSampleTemperatureSensor_LcdDisplayMainMode_4:
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   75....       MOV     ?V0,#`?<Constant "TEMP: ">` & 0xff
   \   00002C   75....       MOV     ?V1,#(`?<Constant "TEMP: ">` >> 8) & 0xff
   \   00002F   75..00       MOV     ?V2,#0x0
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000037   7C06         MOV     R4,#0x6
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   7403         MOV     A,#0x3
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
    746            _ltoa( ( zclSampleTemperatureSensor_MeasuredValue / 100 ), (void *)(&sDisplayTemp[6]), 10 );   // convert temperature to whole number
   \   000048                ; Setup parameters for call to function _ltoa
   \   000048   7406         MOV     A,#0x6
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   8582..       MOV     ?V0,DPL
   \   000050   8583..       MOV     ?V1,DPH
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   90....       MOV     DPTR,#zclSampleTemperatureSensor_MeasuredValue
   \   00005B   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00005E   7A64         MOV     R2,#0x64
   \   000060   7B00         MOV     R3,#0x0
   \   000062   12....       LCALL   ?S_DIV_MOD
   \   000065   E8           MOV     A,R0
   \   000066   FA           MOV     R2,A
   \   000067   E9           MOV     A,R1
   \   000068   FB           MOV     R3,A
   \   000069   33           RLC     A
   \   00006A   95E0         SUBB    A,0xE0 /* A   */
   \   00006C   FC           MOV     R4,A
   \   00006D   FD           MOV     R5,A
   \   00006E   790A         MOV     R1,#0xa
   \   000070   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   000073   7402         MOV     A,#0x2
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
    747            osal_memcpy( &sDisplayTemp[8], "C", 2 );
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   75....       MOV     ?V0,#`?<Constant "C">` & 0xff
   \   00007B   75....       MOV     ?V1,#(`?<Constant "C">` >> 8) & 0xff
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000083   7C02         MOV     R4,#0x2
   \   000085   7D00         MOV     R5,#0x0
   \   000087   740B         MOV     A,#0xb
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   AA82         MOV     R2,DPL
   \   00008E   AB83         MOV     R3,DPH
   \   000090   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000093   7403         MOV     A,#0x3
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
    748          #ifdef LCD_SUPPORTED
    749            HalLcdWriteString( (char *)sDisplayTemp, HAL_LCD_LINE_2 );
   \   000098                ; Setup parameters for call to function HalLcdWriteString
   \   000098   7902         MOV     R1,#0x2
   \   00009A   AA..         MOV     R2,?XSP + 0
   \   00009C   AB..         MOV     R3,?XSP + 1
   \   00009E   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    750          #endif
    751          
    752          #ifdef LCD_SUPPORTED
    753            if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
    754                 ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER ) )
   \   0000A1   90....       MOV     DPTR,#zclSampleTemperatureSensor_NwkState
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   6409         XRL     A,#0x9
   \   0000A7   6005         JZ      ??zclSampleTemperatureSensor_LcdDisplayMainMode_5
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   6407         XRL     A,#0x7
   \   0000AC   7014         JNZ     ??zclSampleTemperatureSensor_LcdDisplayMainMode_6
    755            {
    756              // display help key with permit join status
    757              if ( gPermitDuration )
   \                     ??zclSampleTemperatureSensor_LcdDisplayMainMode_5:
   \   0000AE   90....       MOV     DPTR,#gPermitDuration
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   7903         MOV     R1,#0x3
   \   0000B4   6006         JZ      ??zclSampleTemperatureSensor_LcdDisplayMainMode_7
    758              {
    759                HalLcdWriteString( "SW5: Help      *", HAL_LCD_LINE_3 );
   \   0000B6                ; Setup parameters for call to function HalLcdWriteString
   \   0000B6   7A..         MOV     R2,#`?<Constant "SW5: Help      *">` & 0xff
   \   0000B8   7B..         MOV     R3,#(`?<Constant "SW5: Help      *">` >> 8) & 0xff
   \   0000BA   800C         SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_8
    760              }
    761              else
    762              {
    763                HalLcdWriteString( "SW5: Help       ", HAL_LCD_LINE_3 );
   \                     ??zclSampleTemperatureSensor_LcdDisplayMainMode_7:
   \   0000BC                ; Setup parameters for call to function HalLcdWriteString
   \   0000BC   7A..         MOV     R2,#`?<Constant "SW5: Help       ">` & 0xff
   \   0000BE   7B..         MOV     R3,#(`?<Constant "SW5: Help       ">` >> 8) & 0xff
   \   0000C0   8006         SJMP    ??zclSampleTemperatureSensor_LcdDisplayMainMode_8
    764              }
    765            }
    766            else
    767            {
    768              // display help key
    769              HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
   \                     ??zclSampleTemperatureSensor_LcdDisplayMainMode_6:
   \   0000C2                ; Setup parameters for call to function HalLcdWriteString
   \   0000C2   7903         MOV     R1,#0x3
   \   0000C4   7A..         MOV     R2,#sSwHelp & 0xff
   \   0000C6   7B..         MOV     R3,#(sSwHelp >> 8) & 0xff
   \                     ??zclSampleTemperatureSensor_LcdDisplayMainMode_8:
   \   0000C8   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    770            }
    771          #endif
    772          }
   \   0000CB   7410         MOV     A,#0x10
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   7F03         MOV     R7,#0x3
   \   0000D2   02....       LJMP    ?BANKED_LEAVE_XDATA
    773          
    774          /*********************************************************************
    775           * @fn      zclSampleTemperatureSensor_LcdDisplayHelpMode
    776           *
    777           * @brief   Called to display the SW options on the LCD.
    778           *
    779           * @param   none
    780           *
    781           * @return  none
    782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    783          void zclSampleTemperatureSensor_LcdDisplayHelpMode( void )
   \                     zclSampleTemperatureSensor_LcdDisplayHelpMode:
    784          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    785          #ifdef LCD_SUPPORTED
    786            HalLcdWriteString( (char *)sSwTempUp, HAL_LCD_LINE_1 );
   \   000004                ; Setup parameters for call to function HalLcdWriteString
   \   000004   7901         MOV     R1,#0x1
   \   000006   7A..         MOV     R2,#sSwTempUp & 0xff
   \   000008   7B..         MOV     R3,#(sSwTempUp >> 8) & 0xff
   \   00000A   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    787            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
   \   00000D                ; Setup parameters for call to function HalLcdWriteString
   \   00000D   7902         MOV     R1,#0x2
   \   00000F   7A..         MOV     R2,#sSwEZMode & 0xff
   \   000011   7B..         MOV     R3,#(sSwEZMode >> 8) & 0xff
   \   000013   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    788            HalLcdWriteString( (char *)sSwTempDown, HAL_LCD_LINE_3 );
   \   000016                ; Setup parameters for call to function HalLcdWriteString
   \   000016   7903         MOV     R1,#0x3
   \   000018   7A..         MOV     R2,#sSwTempDown & 0xff
   \   00001A   7B..         MOV     R3,#(sSwTempDown >> 8) & 0xff
   \   00001C   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    789          #endif
    790          }
   \   00001F   80..         SJMP    ??Subroutine14_0
    791          
    792          /*********************************************************************
    793           * @fn      zclSampleTemperatureSensor_SendTemp
    794           *
    795           * @brief   Called to send current temperature information to the thermostat
    796           *
    797           * @param   none
    798           *
    799           * @return  none
    800           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    801          static void zclSampleTemperatureSensor_SendTemp( void )
   \                     zclSampleTemperatureSensor_SendTemp:
    802          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    803          	// if (DHT11_GetValue() == 0)
    804          	// {
    805          		// zclSampleTemperatureSensor_MeasuredValue = BUILD_UINT16(69, 96);
    806          	// }
    807          	// else
    808          	// {
    809          		// zclSampleTemperatureSensor_MeasuredValue = DHT11_GetPackageValue();
    810          	// }
    811          
    812          	// //HalLedBlink ( HAL_LED_1, 1, 50, 500 );
    813          	// UART_DebugPrintNum(HAL_UART_PORT_0, NLME_GetShortAddr());
    814          	// UART_DebugPrint(HAL_UART_PORT_0, "");
    815          	// UART_DebugPrintNum(HAL_UART_PORT_0, NLME_GetCoordShortAddr());
    816          	// UART_DebugPrint(HAL_UART_PORT_0, "");
    817          	// UART_DebugPrintNum(HAL_UART_PORT_0, zclSampleTemperatureSensor_MeasuredValue);
    818          	
    819          	// UART_SendNum(HAL_UART_PORT_0,zclSampleTemperatureSensor_MeasuredValue);
    820          	// UART_DebugPrint(HAL_UART_PORT_0, "");
    821          	uint8 state1;
    822          	uint8 state2;
    823          	uint16 pos1 = 21;
    824          	uint16 pos2 = 22;
    825          	uint16 data1;
    826          	uint16 data2;
    827          
    828          	state1 = CheckOutputState(Output_2);
   \   00000A                ; Setup parameters for call to function CheckOutputState
   \   00000A   7902         MOV     R1,#0x2
   \   00000C   12....       LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
   \   00000F   E9           MOV     A,R1
   \   000010   FE           MOV     R6,A
    829          	state2 = CheckOutputState(Output_3);
   \   000011                ; Setup parameters for call to function CheckOutputState
   \   000011   7903         MOV     R1,#0x3
   \   000013   12....       LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
   \   000016   E9           MOV     A,R1
   \   000017   FA           MOV     R2,A
    830          	data1 = BUILD_UINT16(state1,pos1);
   \   000018   EE           MOV     A,R6
   \   000019   F8           MOV     R0,A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E8           MOV     A,R0
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   7415         MOV     A,#0x15
   \   000024   F0           MOVX    @DPTR,A
    831          	data2 = BUILD_UINT16(state2,pos2);
   \   000025   EA           MOV     A,R2
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   7416         MOV     A,#0x16
   \   000030   F0           MOVX    @DPTR,A
    832          	
    833          	#ifdef ZCL_REPORT
    834            zclReportCmd_t *pReportCmd;
    835          	
    836            pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + 2 * sizeof(zclReport_t) );
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   7A0B         MOV     R2,#0xb
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000038   8A..         MOV     ?V0,R2
   \   00003A   8B..         MOV     ?V1,R3
    837            if ( pReportCmd != NULL )
   \   00003C   EA           MOV     A,R2
   \   00003D   45..         ORL     A,?V1
   \   00003F   6057         JZ      ??zclSampleTemperatureSensor_SendTemp_0
    838            {
    839              pReportCmd->numAttr = 2;
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   7402         MOV     A,#0x2
   \   000047   F0           MOVX    @DPTR,A
    840          		// Data
    841              pReportCmd->attrList[0].attrID = ATTRID_MS_TEMPERATURE_MEASURED_VALUE;
   \   000048   A3           INC     DPTR
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   12....       LCALL   ?Subroutine6 & 0xFFFF
    842              pReportCmd->attrList[0].dataType = ZCL_DATATYPE_INT16;
   \                     ??CrossCallReturnLabel_6:
   \   00004F   7429         MOV     A,#0x29
   \   000051   F0           MOVX    @DPTR,A
    843              pReportCmd->attrList[0].attrData = (void *)(&data1);
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?XSTACK_DISP100_8
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   12....       LCALL   ?Subroutine4 & 0xFFFF
    844          
    845              pReportCmd->attrList[1].dataType = ZCL_DATATYPE_INT16;
    846              pReportCmd->attrList[1].attrData = (void *)(&data2);	
    847          		
    848              zcl_SendReportCmd( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_DstAddr,
    849                                 ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
    850                                 pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, zclSampleTemperatureSensorSeqNum++ );
    851            }
   \                     ??CrossCallReturnLabel_4:
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   7429         MOV     A,#0x29
   \   00006B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00006E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   75..01       MOV     ?V2,#0x1
   \   000077   78..         MOV     R0,#?V2
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007C   78..         MOV     R0,#?V2
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   78..         MOV     R0,#?V0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   7C02         MOV     R4,#0x2
   \   000088   7D04         MOV     R5,#0x4
   \   00008A   7A..         MOV     R2,#zclSampleTemperatureSensor_DstAddr & 0xff
   \   00008C   7B..         MOV     R3,#(zclSampleTemperatureSensor_DstAddr >> 8) & 0xff
   \   00008E   7901         MOV     R1,#0x1
   \   000090   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   000093   7405         MOV     A,#0x5
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
    852          
    853            osal_mem_free( pReportCmd );
   \                     ??zclSampleTemperatureSensor_SendTemp_0:
   \   000098                ; Setup parameters for call to function osal_mem_free
   \   000098   AA..         MOV     R2,?V0
   \   00009A   AB..         MOV     R3,?V1
   \   00009C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    854          	#endif  // ZCL_REPORT
    855          }
   \   00009F   7404         MOV     A,#0x4
   \   0000A1                REQUIRE ?Subroutine1
   \   0000A1                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?XSP + 0
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?XSP + 1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   90....       MOV     DPTR,#zclSampleTemperatureSensorSeqNum
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   7401         MOV     A,#0x1
   \   000012   28           ADD     A,R0
   \   000013   F0           MOVX    @DPTR,A
   \   000014                ; Setup parameters for call to function zcl_SendReportCmd
   \   000014                ; Setup parameters for call to function zcl_SendReportCmd
   \   000014   E8           MOV     A,R0
   \   000015   F5..         MOV     ?V2,A
   \   000017   78..         MOV     R0,#?V2
   \   000019   22           RET
    856          
    857          //----------------------------
    858          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    859          static void zclSampleTemperatureSensor_SendState(OUTPUT_TypeDef OUTX)
   \                     zclSampleTemperatureSensor_SendState:
    860          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    861          	uint8 pos;
    862          	uint16 state;
    863          	uint8 temp_s;
    864          	 if(OUTX == 1)
   \   00000C   7401         MOV     A,#0x1
   \   00000E   6E           XRL     A,R6
   \   00000F   700B         JNZ     ??zclSampleTemperatureSensor_SendState_0
    865               {
    866          		 temp_s = CheckOutputState(Output_1);
   \   000011                ; Setup parameters for call to function CheckOutputState
   \   000011   7901         MOV     R1,#0x1
   \   000013   12....       LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
   \   000016   E9           MOV     A,R1
   \   000017   FA           MOV     R2,A
    867          		 pos = 23;
   \   000018   7817         MOV     R0,#0x17
   \   00001A   801E         SJMP    ??zclSampleTemperatureSensor_SendState_1
    868          	 }
    869          	 else if (OUTX == 2)
   \                     ??zclSampleTemperatureSensor_SendState_0:
   \   00001C   7402         MOV     A,#0x2
   \   00001E   6E           XRL     A,R6
   \   00001F   700B         JNZ     ??zclSampleTemperatureSensor_SendState_2
    870          	 {
    871          		 temp_s = CheckOutputState(Output_2);
   \   000021                ; Setup parameters for call to function CheckOutputState
   \   000021   7902         MOV     R1,#0x2
   \   000023   12....       LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
   \   000026   E9           MOV     A,R1
   \   000027   FA           MOV     R2,A
    872          		 pos = 21;
   \   000028   7815         MOV     R0,#0x15
   \   00002A   800E         SJMP    ??zclSampleTemperatureSensor_SendState_1
    873          	 }
    874          	 else if (OUTX == 3)
   \                     ??zclSampleTemperatureSensor_SendState_2:
   \   00002C   7403         MOV     A,#0x3
   \   00002E   6E           XRL     A,R6
   \   00002F   7009         JNZ     ??zclSampleTemperatureSensor_SendState_1
    875          	 {
    876          		 temp_s = CheckOutputState(Output_3);
   \   000031                ; Setup parameters for call to function CheckOutputState
   \   000031   7903         MOV     R1,#0x3
   \   000033   12....       LCALL   `??CheckOutputState::?relay`; Banked call to: CheckOutputState
   \   000036   E9           MOV     A,R1
   \   000037   FA           MOV     R2,A
    877          		 pos = 22;
   \   000038   7816         MOV     R0,#0x16
    878          	 }
    879          	 state = BUILD_UINT16(temp_s,pos);
   \                     ??zclSampleTemperatureSensor_SendState_1:
   \   00003A   E8           MOV     A,R0
   \   00003B   F9           MOV     R1,A
   \   00003C   EA           MOV     A,R2
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   E9           MOV     A,R1
   \   000046   F0           MOVX    @DPTR,A
    880          	 UART_SendNum(HAL_UART_PORT_0,state);
   \   000047                ; Setup parameters for call to function UART_SendNum
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   AA..         MOV     R2,?V0
   \   000054   FB           MOV     R3,A
   \   000055   E4           CLR     A
   \   000056   FC           MOV     R4,A
   \   000057   FD           MOV     R5,A
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   `??UART_SendNum::?relay`; Banked call to: UART_SendNum
    881          	 UART_SendString(HAL_UART_PORT_0,"!\n");
   \   00005C                ; Setup parameters for call to function UART_SendString
   \   00005C   7A..         MOV     R2,#`?<Constant "!\\n">` & 0xff
   \   00005E   7B..         MOV     R3,#(`?<Constant "!\\n">` >> 8) & 0xff
   \   000060   7900         MOV     R1,#0x0
   \   000062   12....       LCALL   `??UART_SendString::?relay`; Banked call to: UART_SendString
    882          	
    883          	#ifdef ZCL_REPORT
    884            zclReportCmd_t *pReportCmd;
    885          	
    886            pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + 1 * sizeof(zclReport_t) );
   \   000065                ; Setup parameters for call to function osal_mem_alloc
   \   000065   7A06         MOV     R2,#0x6
   \   000067   7B00         MOV     R3,#0x0
   \   000069   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006C   8A..         MOV     ?V0,R2
   \   00006E   8B..         MOV     ?V1,R3
    887            if ( pReportCmd != NULL )
   \   000070   EA           MOV     A,R2
   \   000071   45..         ORL     A,?V1
   \   000073   6042         JZ      ??zclSampleTemperatureSensor_SendState_3
    888            {
    889              pReportCmd->numAttr = 1;
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   7401         MOV     A,#0x1
   \   00007B   F0           MOVX    @DPTR,A
    890          		// Data
    891              pReportCmd->attrList[0].attrID = ATTRID_SENDSTATE;
   \   00007C   A3           INC     DPTR
   \   00007D   7406         MOV     A,#0x6
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   74A0         MOV     A,#-0x60
   \   000083   12....       LCALL   ?Subroutine6 & 0xFFFF
    892              pReportCmd->attrList[0].dataType = ZCL_DATATYPE_UINT16;
   \                     ??CrossCallReturnLabel_7:
   \   000086   7421         MOV     A,#0x21
   \   000088   F0           MOVX    @DPTR,A
    893              pReportCmd->attrList[0].attrData = (void *)(&state);
   \   000089   8A82         MOV     DPL,R2
   \   00008B   8B83         MOV     DPH,R3
   \   00008D   12....       LCALL   ?Subroutine2 & 0xFFFF
    894          
    895              // pReportCmd->attrList[1].attrID = NLME_GetCoordShortAddr();
    896              // pReportCmd->attrList[1].dataType = ZCL_DATATYPE_UINT8;
    897              // pReportCmd->attrList[1].attrData = (void *)(&state);
    898          		
    899              zcl_SendReportCmd( SAMPLETEMPERATURESENSOR_ENDPOINT, &zclSampleTemperatureSensor_DstAddr,
    900                                 ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
    901                                 pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, zclSampleTemperatureSensorSeqNum++ );
    902            }
   \                     ??CrossCallReturnLabel_1:
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..01       MOV     ?V2,#0x1
   \   000096   78..         MOV     R0,#?V2
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   78..         MOV     R0,#?V2
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A0   78..         MOV     R0,#?V0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   7C02         MOV     R4,#0x2
   \   0000A7   7D04         MOV     R5,#0x4
   \   0000A9   7A..         MOV     R2,#zclSampleTemperatureSensor_DstAddr & 0xff
   \   0000AB   7B..         MOV     R3,#(zclSampleTemperatureSensor_DstAddr >> 8) & 0xff
   \   0000AD   7901         MOV     R1,#0x1
   \   0000AF   12....       LCALL   `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   0000B2   7405         MOV     A,#0x5
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
    903            osal_mem_free( pReportCmd );
   \                     ??zclSampleTemperatureSensor_SendState_3:
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   AA..         MOV     R2,?V0
   \   0000B9   AB..         MOV     R3,?V1
   \   0000BB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    904          	#endif  // ZCL_REPORT
    905          }
   \   0000BE   7402         MOV     A,#0x2
   \   0000C0   02....       LJMP    ?Subroutine1 & 0xFFFF
    906          
    907          /*********************************************************************
    908           * @fn      zclSampleTemperatureSensor_ProcessIdentifyTimeChange
    909           *
    910           * @brief   Called to process any change to the IdentifyTime attribute.
    911           *
    912           * @param   none
    913           *
    914           * @return  none
    915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    916          static void zclSampleTemperatureSensor_ProcessIdentifyTimeChange( void )
   \                     zclSampleTemperatureSensor_ProcessIdentifyTimeChange:
    917          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    918            if ( zclSampleTemperatureSensor_IdentifyTime > 0 )
   \   000004   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000007   E8           MOV     A,R0
   \   000008   49           ORL     A,R1
   \   000009   6019         JZ      ??zclSampleTemperatureSensor_ProcessIdentifyTim_1
    919            {
    920              osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   00000B                ; Setup parameters for call to function osal_start_timerEx
   \   00000B   90....       MOV     DPTR,#__Constant_3e8
   \   00000E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7B00         MOV     R3,#0x0
   \   000015   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001D   7404         MOV     A,#0x4
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   801D         SJMP    ??zclSampleTemperatureSensor_ProcessIdentifyTim_2
    921              //HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
    922            }
    923            else
    924            {
    925              if ( zclSampleTemperatureSensor_OnOff )
   \                     ??zclSampleTemperatureSensor_ProcessIdentifyTim_1:
   \   000024   90....       MOV     DPTR,#zclSampleTemperatureSensor_OnOff
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6004         JZ      ??zclSampleTemperatureSensor_ProcessIdentifyTim_3
    926              {
    927                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   00002A                ; Setup parameters for call to function HalLedSet
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   8002         SJMP    ??zclSampleTemperatureSensor_ProcessIdentifyTim_4
    928              }
    929              else
    930              {
    931                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zclSampleTemperatureSensor_ProcessIdentifyTim_3:
   \   00002E                ; Setup parameters for call to function HalLedSet
   \   00002E   7A00         MOV     R2,#0x0
   \                     ??zclSampleTemperatureSensor_ProcessIdentifyTim_4:
   \   000030   7908         MOV     R1,#0x8
   \   000032   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    932              }
    933          
    934              osal_stop_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT );
   \   000035                ; Setup parameters for call to function osal_stop_timerEx
   \   000035   7A01         MOV     R2,#0x1
   \   000037   7B00         MOV     R3,#0x0
   \   000039   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    935            }
    936          }
   \                     ??zclSampleTemperatureSensor_ProcessIdentifyTim_2:
   \   000041   02....       LJMP    ??Subroutine14_0 & 0xFFFF
    937          
    938          /*********************************************************************
    939           * @fn      zclSampleTemperatureSensor_BasicResetCB
    940           *
    941           * @brief   Callback from the ZCL General Cluster Library
    942           *          to set all the Basic Cluster attributes to default values.
    943           *
    944           * @param   none
    945           *
    946           * @return  none
    947           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    948          static void zclSampleTemperatureSensor_BasicResetCB( void )
   \                     zclSampleTemperatureSensor_BasicResetCB:
    949          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    950            // Put device back to factory default settings
    951            zgWriteStartupOptions( ZG_STARTUP_SET, 3 );   // bit set both default configuration and default network
   \   000004                ; Setup parameters for call to function zgWriteStartupOptions
   \   000004   7A03         MOV     R2,#0x3
   \   000006   79FF         MOV     R1,#-0x1
   \   000008   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    952          
    953            // restart device
    954            MT_SysCommandProcessing( aProcessCmd );
   \   00000B                ; Setup parameters for call to function MT_SysCommandProcessing
   \   00000B   7A..         MOV     R2,#aProcessCmd & 0xff
   \   00000D   7B..         MOV     R3,#(aProcessCmd >> 8) & 0xff
   \   00000F   12....       LCALL   `??MT_SysCommandProcessing::?relay`; Banked call to: MT_SysCommandProcessing
    955          }
   \   000012   02....       LJMP    ??Subroutine14_0 & 0xFFFF
    956          
    957          /*********************************************************************
    958           * @fn      zclSampleTemperatureSensor_IdentifyCB
    959           *
    960           * @brief   Callback from the ZCL General Cluster Library when
    961           *          it received an Identity Command for this application.
    962           *
    963           * @param   srcAddr - source address and endpoint of the response message
    964           * @param   identifyTime - the number of seconds to identify yourself
    965           *
    966           * @return  none
    967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          static void zclSampleTemperatureSensor_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleTemperatureSensor_IdentifyCB:
    969          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    970            zclSampleTemperatureSensor_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00000D   90....       MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
    971            zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
   \   000015   12....       LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
    972          }
   \   000018   02....       LJMP    ??Subroutine14_0 & 0xFFFF
    973          
    974          /*********************************************************************
    975           * @fn      zclSampleTemperatureSensor_IdentifyQueryRspCB
    976           *
    977           * @brief   Callback from the ZCL General Cluster Library when
    978           *          it received an Identity Query Response Command for this application.
    979           *
    980           * @param   srcAddr - requestor's address
    981           * @param   timeout - number of seconds to identify yourself (valid for query response)
    982           *
    983           * @return  none
    984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A                REQUIRE ??Subroutine13_0
   \   00000A                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine14_0
   \   000003                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          static void zclSampleTemperatureSensor_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleTemperatureSensor_IdentifyQueryRspCB:
    986          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    987            (void)pRsp;
    988          #ifdef ZCL_EZMODE
    989            {
    990              zclEZMode_ActionData_t data;
    991              data.pIdentifyQueryRsp = pRsp;
   \   000009   12....       LCALL   ?Subroutine5 & 0xFFFF
    992              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
    993            }
   \                     ??CrossCallReturnLabel_20:
   \   00000C   7904         MOV     R1,#0x4
   \   00000E   12....       LCALL   `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    994          #endif
    995          }
   \   000011   7402         MOV     A,#0x2
   \   000013   02....       LJMP    ?Subroutine0 & 0xFFFF
    996          
    997          /******************************************************************************
    998           *
    999           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1000           *
   1001           *****************************************************************************/
   1002          
   1003          /*********************************************************************
   1004           * @fn      zclSampleTemperatureSensor_ProcessIncomingMsg
   1005           *
   1006           * @brief   Process ZCL Foundation incoming message
   1007           *
   1008           * @param   pInMsg - pointer to the received message
   1009           *
   1010           * @return  none
   1011           */
   1012          static void zclSampleTemperatureSensor_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
   1013          {
   1014            switch ( pInMsg->zclHdr.commandID )
   1015            {
   1016          #ifdef ZCL_READ
   1017              case ZCL_CMD_READ_RSP:
   1018                zclSampleTemperatureSensor_ProcessInReadRspCmd( pInMsg );
   1019                break;
   1020          #endif
   1021          #ifdef ZCL_WRITE
   1022              case ZCL_CMD_WRITE_RSP:
   1023                zclSampleTemperatureSensor_ProcessInWriteRspCmd( pInMsg );
   1024                break;
   1025          #endif
   1026          #ifdef ZCL_REPORT
   1027              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
   1028              case ZCL_CMD_CONFIG_REPORT:
   1029                //zclSampleTemperatureSensor_ProcessInConfigReportCmd( pInMsg );
   1030                break;
   1031          
   1032              case ZCL_CMD_CONFIG_REPORT_RSP:
   1033                //zclSampleTemperatureSensor_ProcessInConfigReportRspCmd( pInMsg );
   1034                break;
   1035          
   1036              case ZCL_CMD_READ_REPORT_CFG:
   1037                //zclSampleTemperatureSensor_ProcessInReadReportCfgCmd( pInMsg );
   1038                break;
   1039          
   1040              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1041                //zclSampleTemperatureSensor_ProcessInReadReportCfgRspCmd( pInMsg );
   1042                break;
   1043          
   1044              case ZCL_CMD_REPORT:
   1045                zclSampleTemperatureSensor_ProcessInReportCmd( pInMsg );
   1046                break;
   1047          #endif
   1048              case ZCL_CMD_DEFAULT_RSP:
   1049                zclSampleTemperatureSensor_ProcessInDefaultRspCmd( pInMsg );
   1050                break;
   1051          #ifdef ZCL_DISCOVER
   1052              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
   1053                zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
   1054                break;
   1055          
   1056              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
   1057                zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( pInMsg );
   1058                break;
   1059          
   1060              case ZCL_CMD_DISCOVER_ATTRS_RSP:
   1061                zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( pInMsg );
   1062                break;
   1063          
   1064              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
   1065                zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( pInMsg );
   1066                break;
   1067          #endif
   1068              default:
   1069                break;
   1070            }
   1071          
   1072            if ( pInMsg->attrCmd )
   1073            {
   1074              osal_mem_free( pInMsg->attrCmd );
   1075            }
   1076          }
   1077          
   1078          #ifdef ZCL_READ
   1079          /*********************************************************************
   1080           * @fn      zclSampleTemperatureSensor_ProcessInReadRspCmd
   1081           *
   1082           * @brief   Process the "Profile" Read Response Command
   1083           *
   1084           * @param   pInMsg - incoming message to process
   1085           *
   1086           * @return  none
   1087           */
   1088          static uint8 zclSampleTemperatureSensor_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1089          {
   1090            zclReadRspCmd_t *readRspCmd;
   1091            uint8 i;
   1092          
   1093            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1094            for ( i = 0; i < readRspCmd->numAttr; i++ )
   1095            {
   1096              // Notify the originator of the results of the original read attributes
   1097              // attempt and, for each successfull request, the value of the requested
   1098              // attribute
   1099            }
   1100          
   1101            return ( TRUE );
   1102          }
   1103          #endif // ZCL_READ
   1104          
   1105          #ifdef ZCL_WRITE
   1106          /*********************************************************************
   1107           * @fn      zclSampleTemperatureSensor_ProcessInWriteRspCmd
   1108           *
   1109           * @brief   Process the "Profile" Write Response Command
   1110           *
   1111           * @param   pInMsg - incoming message to process
   1112           *
   1113           * @return  none
   1114           */
   1115          static uint8 zclSampleTemperatureSensor_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1116          {
   1117            zclWriteRspCmd_t *writeRspCmd;
   1118            uint8 i;
   1119          
   1120            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1121            for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1122            {
   1123              // Notify the device of the results of the its original write attributes
   1124              // command.
   1125            }
   1126          
   1127            return ( TRUE );
   1128          }
   1129          #endif // ZCL_WRITE
   1130          
   1131          #ifdef ZCL_REPORT
   1132          /*********************************************************************
   1133           * @fn      zclSampleTemperatureSensor_ProcessInReportCmd
   1134           *
   1135           * @brief   Process the "Profile" Report Command
   1136           *
   1137           * @param   pInMsg - incoming message to process
   1138           *
   1139           * @return  none
   1140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1141          static void zclSampleTemperatureSensor_ProcessInReportCmd( zclIncomingMsg_t *pInMsg )
   \                     zclSampleTemperatureSensor_ProcessInReportCmd:
   1142          { 
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1143            zclReportCmd_t *pInReportCmd;	
   1144            pInReportCmd = (zclReportCmd_t *)pInMsg->attrCmd;
   \   00000E   EE           MOV     A,R6
   \   00000F   2417         ADD     A,#0x17
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   1145          
   1146          	/******************************** FREE DATA *********************************/
   1147          	if ( pInReportCmd->attrList[0].attrID == ATTRID_FREE_DATA )
   \                     ??CrossCallReturnLabel_25:
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FA           MOV     R2,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FB           MOV     R3,A
   \   000024   E8           MOV     A,R0
   \   000025   2404         ADD     A,#0x4
   \   000027   F5..         MOV     ?V6,A
   \   000029   E4           CLR     A
   \   00002A   39           ADDC    A,R1
   \   00002B   F5..         MOV     ?V7,A
   \   00002D   E8           MOV     A,R0
   \   00002E   2409         ADD     A,#0x9
   \   000030   F5..         MOV     ?V2,A
   \   000032   E4           CLR     A
   \   000033   39           ADDC    A,R1
   \   000034   F5..         MOV     ?V3,A
   \   000036   E8           MOV     A,R0
   \   000037   2406         ADD     A,#0x6
   \   000039   F5..         MOV     ?V4,A
   \   00003B   E4           CLR     A
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V5,A
   \   00003F   7403         MOV     A,#0x3
   \   000041   6A           XRL     A,R2
   \   000042   7003         JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_1
   \   000044   74A0         MOV     A,#-0x60
   \   000046   6B           XRL     A,R3
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_1:
   \   000047   6003         JZ      $+5
   \   000049   02....       LJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_2 & 0xFFFF
   1148          	{
   1149          		uint8 i;
   1150          		uint8 tmp_Data[20];
   1151          				
   1152          		if (FLAG_ECHO_RDATA)
   \   00004C   90....       MOV     DPTR,#FLAG_ECHO_RDATA
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_3 & 0xFFFF
   1153          		{
   1154          			UART_ZCmdPrintString(HAL_UART_PORT_0, "@ZBR:");
   \   000055                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000055   7A..         MOV     R2,#`?<Constant "@ZBR:">` & 0xff
   \   000057   7B..         MOV     R3,#(`?<Constant "@ZBR:">` >> 8) & 0xff
   \   000059   7900         MOV     R1,#0x0
   \   00005B   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1155          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, msg_RSSI);																// RSSI
   \   00005E                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   00005E   90....       MOV     DPTR,#msg_RSSI
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FA           MOV     R2,A
   \   000063   33           RLC     A
   \   000064   95E0         SUBB    A,0xE0 /* A   */
   \   000066   FB           MOV     R3,A
   \   000067   FC           MOV     R4,A
   \   000068   FD           MOV     R5,A
   \   000069   7900         MOV     R1,#0x0
   \   00006B   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1156          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   00006E   75....       MOV     ?V0,#`?<Constant ";">` & 0xff
   \   000071   75....       MOV     ?V1,#(`?<Constant ";">` >> 8) & 0xff
   \   000074                ; Setup parameters for call to function UART_ZCmdPrintString
   \   000074   AA..         MOV     R2,?V0
   \   000076   AB..         MOV     R3,?V1
   \   000078   7900         MOV     R1,#0x0
   \   00007A   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1157          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInMsg->srcAddr.addr.shortAddr);					// shortAddr
   \   00007D                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F5..         MOV     ?V8,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   AA..         MOV     R2,?V8
   \   000092   FB           MOV     R3,A
   \   000093   E4           CLR     A
   \   000094   FC           MOV     R4,A
   \   000095   FD           MOV     R5,A
   \   000096   F9           MOV     R1,A
   \   000097   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1158          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   00009A                ; Setup parameters for call to function UART_ZCmdPrintString
   \   00009A   AA..         MOV     R2,?V0
   \   00009C   AB..         MOV     R3,?V1
   \   00009E   7900         MOV     R1,#0x0
   \   0000A0   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1159          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInMsg->srcAddr.endPoint);								// endPoint
   \   0000A3                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000A3   EE           MOV     A,R6
   \   0000A4   2413         ADD     A,#0x13
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   E4           CLR     A
   \   0000A9   3F           ADDC    A,R7
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   FA           MOV     R2,A
   \   0000AE   E4           CLR     A
   \   0000AF   FB           MOV     R3,A
   \   0000B0   FC           MOV     R4,A
   \   0000B1   FD           MOV     R5,A
   \   0000B2   F9           MOV     R1,A
   \   0000B3   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1160          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0000B6                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000B6   AA..         MOV     R2,?V0
   \   0000B8   AB..         MOV     R3,?V1
   \   0000BA   7900         MOV     R1,#0x0
   \   0000BC   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1161          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrID); 				// coordShortAddr
   \   0000BF                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000BF   85..82       MOV     DPL,?V4
   \   0000C2   85..83       MOV     DPH,?V5
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F5..         MOV     ?V4,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   AA..         MOV     R2,?V4
   \   0000CC   FB           MOV     R3,A
   \   0000CD   E4           CLR     A
   \   0000CE   FC           MOV     R4,A
   \   0000CF   FD           MOV     R5,A
   \   0000D0   F9           MOV     R1,A
   \   0000D1   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1162          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";"); 
   \   0000D4                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000D4   AA..         MOV     R2,?V0
   \   0000D6   AB..         MOV     R3,?V1
   \   0000D8   7900         MOV     R1,#0x0
   \   0000DA   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1163          			UART_ZCmdPrintNum 	(HAL_UART_PORT_0, pInReportCmd->attrList[1].attrData[0]); 	// data size
   \   0000DD                ; Setup parameters for call to function UART_ZCmdPrintNum
   \   0000DD   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000E0   FA           MOV     R2,A
   \   0000E1   E4           CLR     A
   \   0000E2   FB           MOV     R3,A
   \   0000E3   FC           MOV     R4,A
   \   0000E4   FD           MOV     R5,A
   \   0000E5   F9           MOV     R1,A
   \   0000E6   12....       LCALL   `??UART_ZCmdPrintNum::?relay`; Banked call to: UART_ZCmdPrintNum
   1164          			UART_ZCmdPrintString(HAL_UART_PORT_0, ";");
   \   0000E9                ; Setup parameters for call to function UART_ZCmdPrintString
   \   0000E9   AA..         MOV     R2,?V0
   \   0000EB   AB..         MOV     R3,?V1
   \   0000ED   7900         MOV     R1,#0x0
   \   0000EF   12....       LCALL   `??UART_ZCmdPrintString::?relay`; Banked call to: UART_ZCmdPrintString
   1165          			
   1166          			// eliminate DUMMY byte index[0]
   1167          			for (i = 1; i <= pInReportCmd->attrList[1].attrData[0]; i++)
   \   0000F2   7A01         MOV     R2,#0x1
   \   0000F4   800C         SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_4
   1168          			{
   1169          				tmp_Data[i-1] = pInReportCmd->attrList[0].attrData[i];
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_5:
   \   0000F6   12....       LCALL   ?Subroutine8 & 0xFFFF
   1170          			}
   \                     ??CrossCallReturnLabel_11:
   \   0000F9   C0E0         PUSH    A
   \   0000FB   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000FE   D0E0         POP     A
   \   000100   F0           MOVX    @DPTR,A
   \   000101   0A           INC     R2
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_4:
   \   000102   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000105   FC           MOV     R4,A
   \   000106   C3           CLR     C
   \   000107   9A           SUBB    A,R2
   \   000108   50EC         JNC     ??zclSampleTemperatureSensor_ProcessInReportCmd_5
   1171          			UART_ZCmdPrintBuffer(HAL_UART_PORT_0, tmp_Data, pInReportCmd->attrList[1].attrData[0]); 	// Free Data
   \   00010A                ; Setup parameters for call to function UART_ZCmdPrintBuffer
   \   00010A   AA..         MOV     R2,?XSP + 0
   \   00010C   AB..         MOV     R3,?XSP + 1
   \   00010E   7900         MOV     R1,#0x0
   \   000110   12....       LCALL   `??UART_ZCmdPrintBuffer::?relay`; Banked call to: UART_ZCmdPrintBuffer
   1172          			UART_ZCmdPrint			(HAL_UART_PORT_0, "!");
   \   000113                ; Setup parameters for call to function UART_ZCmdPrint
   \   000113   7A..         MOV     R2,#`?<Constant "!">` & 0xff
   \   000115   7B..         MOV     R3,#(`?<Constant "!">` >> 8) & 0xff
   \   000117   02....       LJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_6 & 0xFFFF
   1173          		}
   1174          		return;
   1175          	}
   1176          
   1177          	if (pInReportCmd->attrList[0].attrID == ATTRID_CONTROL_DATA)
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_2:
   \   00011A   7407         MOV     A,#0x7
   \   00011C   6A           XRL     A,R2
   \   00011D   7003         JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_7
   \   00011F   74A0         MOV     A,#-0x60
   \   000121   6B           XRL     A,R3
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_7:
   \   000122   6003         JZ      $+5
   \   000124   02....       LJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_8 & 0xFFFF
   1178          	{
   1179          		uint8 i;
   1180          		char tmp_Data[20];
   1181          		for (i = 1; i <= pInReportCmd->attrList[1].attrData[0]; i++)
   \   000127   7A01         MOV     R2,#0x1
   \   000129   800C         SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_9
   1182          		{
   1183          			tmp_Data[i-1] = pInReportCmd->attrList[0].attrData[i];
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_10:
   \   00012B   12....       LCALL   ?Subroutine8 & 0xFFFF
   1184          		}
   \                     ??CrossCallReturnLabel_12:
   \   00012E   C0E0         PUSH    A
   \   000130   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000133   D0E0         POP     A
   \   000135   F0           MOVX    @DPTR,A
   \   000136   0A           INC     R2
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_9:
   \   000137   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00013A   C3           CLR     C
   \   00013B   9A           SUBB    A,R2
   \   00013C   50ED         JNC     ??zclSampleTemperatureSensor_ProcessInReportCmd_10
   1185          		UART_SendString(HAL_UART_PORT_0,tmp_Data);
                 		                                ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   00013E                ; Setup parameters for call to function UART_SendString
   \   00013E   AA..         MOV     R2,?XSP + 0
   \   000140   AB..         MOV     R3,?XSP + 1
   \   000142   7900         MOV     R1,#0x0
   \   000144   12....       LCALL   `??UART_SendString::?relay`; Banked call to: UART_SendString
   1186          		if (strstr(tmp_Data,"R2;OUT3;1"))
   \   000147                ; Setup parameters for call to function strstr
   \   000147   7C..         MOV     R4,#`?<Constant "R2;OUT3;1">` & 0xff
   \   000149   7D..         MOV     R5,#(`?<Constant "R2;OUT3;1">` >> 8) & 0xff
   \   00014B   AA..         MOV     R2,?XSP + 0
   \   00014D   AB..         MOV     R3,?XSP + 1
   \   00014F   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000152   8B..         MOV     ?V1,R3
   \   000154   EA           MOV     A,R2
   \   000155   45..         ORL     A,?V1
   \   000157   600B         JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_11
   1187          		{
   1188          			TURN_on(Output_1);
   \   000159                ; Setup parameters for call to function TURN_on
   \   000159   7901         MOV     R1,#0x1
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_12:
   \   00015B   12....       LCALL   `??TURN_on::?relay`  ; Banked call to: TURN_on
   1189          		}
   1190          		else if (strstr(tmp_Data,"R2;OUT1;1"))
   1191          		{
   1192          			TURN_on(Output_2);
   1193          		}
   1194          		else if (strstr(tmp_Data,"R2;OUT2;1"))
   1195          		{
   1196          			TURN_on(Output_3);
   1197          		}
   1198          		else if (strstr(tmp_Data,"R2;OUT3;0"))
   1199          		{
   1200          			TURN_off(Output_1);
   1201          		}
   1202          		else if (strstr(tmp_Data,"R2;OUT1;0"))
   1203          		{
   1204          			TURN_off(Output_2);
   1205          		}
   1206          		else if (strstr(tmp_Data,"R2;OUT2;0"))
   1207          		{
   1208          			TURN_off(Output_3);
   1209          		}
   1210          		else
   1211          		{
   1212          			UART_SendString(HAL_UART_PORT_0,"ERROR!");
   1213          			return;
   1214          		}
   1215          		UART_SendString(HAL_UART_PORT_0,"Done!");
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_13:
   \   00015E                ; Setup parameters for call to function UART_SendString
   \   00015E   7A..         MOV     R2,#`?<Constant "Done!">` & 0xff
   \   000160   7B..         MOV     R3,#(`?<Constant "Done!">` >> 8) & 0xff
   \   000162   8075         SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_14
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_11:
   \   000164                ; Setup parameters for call to function strstr
   \   000164   7C..         MOV     R4,#`?<Constant "R2;OUT1;1">` & 0xff
   \   000166   7D..         MOV     R5,#(`?<Constant "R2;OUT1;1">` >> 8) & 0xff
   \   000168   AA..         MOV     R2,?XSP + 0
   \   00016A   AB..         MOV     R3,?XSP + 1
   \   00016C   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   00016F   8B..         MOV     ?V1,R3
   \   000171   EA           MOV     A,R2
   \   000172   45..         ORL     A,?V1
   \   000174   6004         JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_15
   \   000176                ; Setup parameters for call to function TURN_on
   \   000176   7902         MOV     R1,#0x2
   \   000178   80E1         SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_12
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_15:
   \   00017A                ; Setup parameters for call to function strstr
   \   00017A   7C..         MOV     R4,#`?<Constant "R2;OUT2;1">` & 0xff
   \   00017C   7D..         MOV     R5,#(`?<Constant "R2;OUT2;1">` >> 8) & 0xff
   \   00017E   AA..         MOV     R2,?XSP + 0
   \   000180   AB..         MOV     R3,?XSP + 1
   \   000182   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000185   8B..         MOV     ?V1,R3
   \   000187   EA           MOV     A,R2
   \   000188   45..         ORL     A,?V1
   \   00018A   6004         JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_16
   \   00018C                ; Setup parameters for call to function TURN_on
   \   00018C   7903         MOV     R1,#0x3
   \   00018E   80CB         SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_12
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_16:
   \   000190                ; Setup parameters for call to function strstr
   \   000190   7C..         MOV     R4,#`?<Constant "R2;OUT3;0">` & 0xff
   \   000192   7D..         MOV     R5,#(`?<Constant "R2;OUT3;0">` >> 8) & 0xff
   \   000194   AA..         MOV     R2,?XSP + 0
   \   000196   AB..         MOV     R3,?XSP + 1
   \   000198   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   00019B   8B..         MOV     ?V1,R3
   \   00019D   EA           MOV     A,R2
   \   00019E   45..         ORL     A,?V1
   \   0001A0   6007         JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_17
   \   0001A2                ; Setup parameters for call to function TURN_off
   \   0001A2   7901         MOV     R1,#0x1
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_18:
   \   0001A4   12....       LCALL   `??TURN_off::?relay` ; Banked call to: TURN_off
   \   0001A7   80B5         SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_13
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_17:
   \   0001A9                ; Setup parameters for call to function strstr
   \   0001A9   7C..         MOV     R4,#`?<Constant "R2;OUT1;0">` & 0xff
   \   0001AB   7D..         MOV     R5,#(`?<Constant "R2;OUT1;0">` >> 8) & 0xff
   \   0001AD   AA..         MOV     R2,?XSP + 0
   \   0001AF   AB..         MOV     R3,?XSP + 1
   \   0001B1   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   0001B4   8B..         MOV     ?V1,R3
   \   0001B6   EA           MOV     A,R2
   \   0001B7   45..         ORL     A,?V1
   \   0001B9   6004         JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_19
   \   0001BB                ; Setup parameters for call to function TURN_off
   \   0001BB   7902         MOV     R1,#0x2
   \   0001BD   80E5         SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_18
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_19:
   \   0001BF                ; Setup parameters for call to function strstr
   \   0001BF   7C..         MOV     R4,#`?<Constant "R2;OUT2;0">` & 0xff
   \   0001C1   7D..         MOV     R5,#(`?<Constant "R2;OUT2;0">` >> 8) & 0xff
   \   0001C3   AA..         MOV     R2,?XSP + 0
   \   0001C5   AB..         MOV     R3,?XSP + 1
   \   0001C7   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   0001CA   8B..         MOV     ?V1,R3
   \   0001CC   EA           MOV     A,R2
   \   0001CD   45..         ORL     A,?V1
   \   0001CF   6004         JZ      ??zclSampleTemperatureSensor_ProcessInReportCmd_20
   \   0001D1                ; Setup parameters for call to function TURN_off
   \   0001D1   7903         MOV     R1,#0x3
   \   0001D3   80CF         SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_18
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_20:
   \   0001D5                ; Setup parameters for call to function UART_SendString
   \   0001D5   7A..         MOV     R2,#`?<Constant "ERROR!">` & 0xff
   \   0001D7   7B..         MOV     R3,#(`?<Constant "ERROR!">` >> 8) & 0xff
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_14:
   \   0001D9   7900         MOV     R1,#0x0
   \   0001DB   12....       LCALL   `??UART_SendString::?relay`; Banked call to: UART_SendString
   \   0001DE   8030         SJMP    ??zclSampleTemperatureSensor_ProcessInReportCmd_3
   1216          		return;
   1217          		
   1218          	}
   1219          	/*************************** THERMOSTAT DEMAND ******************************/
   1220          	if ( ( pInReportCmd->attrList[0].attrID == 0x0008 ) &&
   1221                 ( pInReportCmd->attrList[1].attrID == 0x0007 ) &&
   1222                 ( pInReportCmd->attrList[2].attrID == 0x0029	) )
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_8:
   \   0001E0   7408         MOV     A,#0x8
   \   0001E2   6A           XRL     A,R2
   \   0001E3   4B           ORL     A,R3
   \   0001E4   702A         JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_3
   \   0001E6   85..82       MOV     DPL,?V4
   \   0001E9   85..83       MOV     DPH,?V5
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   6407         XRL     A,#0x7
   \   0001EF   7002         JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_21
   \   0001F1   A3           INC     DPTR
   \   0001F2   E0           MOVX    A,@DPTR
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_21:
   \   0001F3   701B         JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_3
   \   0001F5   E8           MOV     A,R0
   \   0001F6   240B         ADD     A,#0xb
   \   0001F8   F582         MOV     DPL,A
   \   0001FA   E4           CLR     A
   \   0001FB   39           ADDC    A,R1
   \   0001FC   F583         MOV     DPH,A
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   6429         XRL     A,#0x29
   \   000201   7002         JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_22
   \   000203   A3           INC     DPTR
   \   000204   E0           MOVX    A,@DPTR
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_22:
   \   000205   7009         JNZ     ??zclSampleTemperatureSensor_ProcessInReportCmd_3
   1223          	{
   1224            	UART_ZCmdPrint(HAL_UART_PORT_0, "ATTRID_HVAC_THERMOSTAT");
   \   000207                ; Setup parameters for call to function UART_ZCmdPrint
   \   000207   7A..         MOV     R2,#`?<Constant "ATTRID_HVAC_THERMOSTAT">` & 0xff
   \   000209   7B..         MOV     R3,#(`?<Constant "ATTRID_HVAC_THERMOSTAT">` >> 8) & 0xff
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_6:
   \   00020B   7900         MOV     R1,#0x0
   \   00020D   12....       LCALL   `??UART_ZCmdPrint::?relay`; Banked call to: UART_ZCmdPrint
   1225          	}
   1226          	
   1227          }
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd_3:
   \   000210   7414         MOV     A,#0x14
   \   000212   12....       LCALL   ?DEALLOC_XSTACK8
   \   000215   7F0A         MOV     R7,#0xa
   \   000217   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   28           ADD     A,R0
   \   000009   F8           MOV     R0,A
   \   00000A   E4           CLR     A
   \   00000B   3583         ADDC    A,DPH
   \   00000D   F9           MOV     R1,A
   \   00000E   E8           MOV     A,R0
   \   00000F   24FF         ADD     A,#-0x1
   \   000011   F582         MOV     DPL,A
   \   000013   E9           MOV     A,R1
   \   000014   34FF         ADDC    A,#-0x1
   \   000016   F583         MOV     DPH,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   EA           MOV     A,R2
   \   000001   F8           MOV     R0,A
   \   000002   85..82       MOV     DPL,?V6
   \   000005   85..83       MOV     DPH,?V7
   \   000008   E0           MOVX    A,@DPTR
   \   000009   28           ADD     A,R0
   \   00000A   FB           MOV     R3,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   8B82         MOV     DPL,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET
   1228          #endif  // ZCL_REPORT
   1229          
   1230          /*********************************************************************
   1231           * @fn      zclSampleTemperatureSensor_ProcessInDefaultRspCmd
   1232           *
   1233           * @brief   Process the "Profile" Default Response Command
   1234           *
   1235           * @param   pInMsg - incoming message to process
   1236           *
   1237           * @return  none
   1238           */
   1239          static uint8 zclSampleTemperatureSensor_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1240          {
   1241            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1242          
   1243            // Device is notified of the Default Response command.
   1244            (void)pInMsg;
   1245          
   1246            return ( TRUE );
   1247          }
   1248          
   1249          #ifdef ZCL_DISCOVER
   1250          /*********************************************************************
   1251           * @fn      zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd
   1252           *
   1253           * @brief   Process the Discover Commands Response Command
   1254           *
   1255           * @param   pInMsg - incoming message to process
   1256           *
   1257           * @return  none
   1258           */
   1259          static uint8 zclSampleTemperatureSensor_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   1260          {
   1261            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
   1262            uint8 i;
   1263          
   1264            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   1265            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   1266            {
   1267              // Device is notified of the result of its attribute discovery command.
   1268            }
   1269          
   1270            return ( TRUE );
   1271          }
   1272          
   1273          /*********************************************************************
   1274           * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd
   1275           *
   1276           * @brief   Process the "Profile" Discover Attributes Response Command
   1277           *
   1278           * @param   pInMsg - incoming message to process
   1279           *
   1280           * @return  none
   1281           */
   1282          static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
   1283          {
   1284            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
   1285            uint8 i;
   1286          
   1287            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
   1288            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1289            {
   1290              // Device is notified of the result of its attribute discovery command.
   1291            }
   1292          
   1293            return ( TRUE );
   1294          }
   1295          
   1296          /*********************************************************************
   1297           * @fn      zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd
   1298           *
   1299           * @brief   Process the "Profile" Discover Attributes Extended Response Command
   1300           *
   1301           * @param   pInMsg - incoming message to process
   1302           *
   1303           * @return  none
   1304           */
   1305          static uint8 zclSampleTemperatureSensor_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
   1306          {
   1307            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
   1308            uint8 i;
   1309          
   1310            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
   1311            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
   1312            {
   1313              // Device is notified of the result of its attribute discovery command.
   1314            }
   1315          
   1316            return ( TRUE );
   1317          }
   1318          #endif // ZCL_DISCOVER
   1319          
   1320          #ifdef ZCL_EZMODE
   1321          
   1322          /*********************************************************************
   1323           * @fn      zclSampleTemperatureSensor_ProcessZDOMsgs
   1324           *
   1325           * @brief   Called when this node receives a ZDO/ZDP response.
   1326           *
   1327           * @param   none
   1328           *
   1329           * @return  status
   1330           */
   1331          static void zclSampleTemperatureSensor_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   1332          {
   1333            zclEZMode_ActionData_t data;
   1334            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1335          
   1336            // Let EZ-Mode know of the Match Descriptor Response
   1337            if ( pMsg->clusterID == Match_Desc_rsp )
   1338            {
   1339              pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
   1340              data.pMatchDescRsp = pMatchDescRsp;
   1341              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   1342              osal_mem_free( pMatchDescRsp );
   1343            }
   1344          }
   1345          
   1346          /*********************************************************************
   1347           * @fn      zclSampleTemperatureSensor_EZModeCB
   1348           *
   1349           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1350          *           going on during EZ-Mode steering/finding/binding.
   1351           *
   1352           * @param   state - an
   1353           *
   1354           * @return  none
   1355           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1356          static void zclSampleTemperatureSensor_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   \                     zclSampleTemperatureSensor_EZModeCB:
   1357          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   1358          #ifdef LCD_SUPPORTED
   1359            char szLine[20];
   1360            char *pStr;
   1361            uint8 err;
   1362          #endif
   1363          
   1364            // time to go into identify mode
   1365            if ( state == EZMODE_STATE_IDENTIFYING )
   \   000010   7404         MOV     A,#0x4
   \   000012   65..         XRL     A,?V2
   \   000014   700F         JNZ     ??zclSampleTemperatureSensor_EZModeCB_0
   1366            {
   1367              zclSampleTemperatureSensor_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
   \   000016   90....       MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
   \   000019   74B4         MOV     A,#-0x4c
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
   1368              zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
   \   00001F                ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
   \   00001F   12....       LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
   \   000022   02....       LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
   1369            }
   1370          
   1371            // autoclosing, show what happened (success, cancelled, etc...)
   1372            if( state == EZMODE_STATE_AUTOCLOSE )
   \                     ??zclSampleTemperatureSensor_EZModeCB_0:
   \   000025   7407         MOV     A,#0x7
   \   000027   65..         XRL     A,?V2
   \   000029   7032         JNZ     ??zclSampleTemperatureSensor_EZModeCB_2
   1373            {
   1374          #ifdef LCD_SUPPORTED
   1375              pStr = NULL;
   1376              err = pData->sAutoClose.err;
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   1377              if ( err == EZMODE_ERR_SUCCESS )
   \   000031   7006         JNZ     ??zclSampleTemperatureSensor_EZModeCB_3
   1378              {
   1379                pStr = "EZMode: Success";
   \   000033   7A..         MOV     R2,#`?<Constant "EZMode: Success">` & 0xff
   \   000035   7B..         MOV     R3,#(`?<Constant "EZMode: Success">` >> 8) & 0xff
   \   000037   800C         SJMP    ??zclSampleTemperatureSensor_EZModeCB_4
   1380              }
   1381              else if ( err == EZMODE_ERR_NOMATCH )
   \                     ??zclSampleTemperatureSensor_EZModeCB_3:
   \   000039   7404         MOV     A,#0x4
   \   00003B   68           XRL     A,R0
   \   00003C   6003         JZ      $+5
   \   00003E   02....       LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
   1382              {
   1383                pStr = "EZMode: NoMatch"; // not a match made in heaven
   \   000041   7A..         MOV     R2,#`?<Constant "EZMode: NoMatch">` & 0xff
   \   000043   7B..         MOV     R3,#(`?<Constant "EZMode: NoMatch">` >> 8) & 0xff
   1384              }
   1385              if ( pStr )
   \                     ??zclSampleTemperatureSensor_EZModeCB_4:
   \   000045   EA           MOV     A,R2
   \   000046   4B           ORL     A,R3
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
   1386              {
   1387                if ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE )
   \   00004C   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6003         JZ      $+5
   \   000052   02....       LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
   1388                {
   1389                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   000055                ; Setup parameters for call to function HalLcdWriteString
   \   000055   7902         MOV     R1,#0x2
   \   000057   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   00005A   02....       LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
   1390                }
   1391              }
   1392          #endif
   1393            }
   1394          
   1395            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1396            if( state == EZMODE_STATE_FINISH )
   \                     ??zclSampleTemperatureSensor_EZModeCB_2:
   \   00005D   7463         MOV     A,#0x63
   \   00005F   65..         XRL     A,?V2
   \   000061   6003         JZ      $+5
   \   000063   02....       LJMP    ??zclSampleTemperatureSensor_EZModeCB_1 & 0xFFFF
   1397            {
   1398              // turn off identify mode
   1399              zclSampleTemperatureSensor_IdentifyTime = 0;
   \   000066   90....       MOV     DPTR,#zclSampleTemperatureSensor_IdentifyTime
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   F0           MOVX    @DPTR,A
   1400              zclSampleTemperatureSensor_ProcessIdentifyTimeChange();
   \   00006D                ; Setup parameters for call to function zclSampleTemperatureSensor_ProcessIdentifyTimeChange
   \   00006D   12....       LCALL   ??zclSampleTemperatureSensor_ProcessIdentifyTim; Banked call to: zclSampleTemperatureSensor_ProcessIdentifyTimeChange
   1401          
   1402          #ifdef LCD_SUPPORTED
   1403              // if successful, inform user which nwkaddr/ep we bound to
   1404              pStr = NULL;
   1405              err = pData->sFinish.err;
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F8           MOV     R0,A
   1406              if( err == EZMODE_ERR_SUCCESS )
   \   000076   6003         JZ      $+5
   \   000078   02....       LJMP    ??zclSampleTemperatureSensor_EZModeCB_5 & 0xFFFF
   1407              {
   1408                // "EZDst:1234 EP:34"
   1409                osal_memcpy( szLine, "EZDst:", 6 );
   \   00007B                ; Setup parameters for call to function osal_memcpy
   \   00007B   75....       MOV     ?V4,#`?<Constant "EZDst:">` & 0xff
   \   00007E   75....       MOV     ?V5,#(`?<Constant "EZDst:">` >> 8) & 0xff
   \   000081   75..00       MOV     ?V6,#0x0
   \   000084   78..         MOV     R0,#?V4
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000089   7C06         MOV     R4,#0x6
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   7403         MOV     A,#0x3
   \   00008F   12....       LCALL   ?XSTACK_DISP101_8
   \   000092   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000095   7403         MOV     A,#0x3
   \   000097   12....       LCALL   ?DEALLOC_XSTACK8
   1410                zclHA_uint16toa( pData->sFinish.nwkaddr, &szLine[6] );
   \   00009A                ; Setup parameters for call to function zclHA_uint16toa
   \   00009A   7406         MOV     A,#0x6
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   AC82         MOV     R4,DPL
   \   0000A1   AD83         MOV     R5,DPH
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FA           MOV     R2,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   FB           MOV     R3,A
   \   0000AE   12....       LCALL   `??zclHA_uint16toa::?relay`; Banked call to: zclHA_uint16toa
   1411                osal_memcpy( &szLine[10], " EP:", 4 );
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   75....       MOV     ?V4,#`?<Constant " EP:">` & 0xff
   \   0000B4   75....       MOV     ?V5,#(`?<Constant " EP:">` >> 8) & 0xff
   \   0000B7   78..         MOV     R0,#?V4
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BC   7C04         MOV     R4,#0x4
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   740D         MOV     A,#0xd
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   AA82         MOV     R2,DPL
   \   0000C7   AB83         MOV     R3,DPH
   \   0000C9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CC   7403         MOV     A,#0x3
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   1412                _ltoa( pData->sFinish.ep, (void *)(&szLine[14]), 16 );  // _ltoa NULL terminates
   \   0000D1                ; Setup parameters for call to function _ltoa
   \   0000D1   740E         MOV     A,#0xe
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   8582..       MOV     ?V0,DPL
   \   0000D9   8583..       MOV     ?V1,DPH
   \   0000DC   78..         MOV     R0,#?V0
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E1   7910         MOV     R1,#0x10
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   FA           MOV     R2,A
   \   0000EA   E4           CLR     A
   \   0000EB   FB           MOV     R3,A
   \   0000EC   FC           MOV     R4,A
   \   0000ED   FD           MOV     R5,A
   \   0000EE   12....       LCALL   `??_ltoa::?relay`    ; Banked call to: _ltoa
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   1413                pStr = szLine;
   \   0000F6   A8..         MOV     R0,?XSP + 0
   \   0000F8   A9..         MOV     R1,?XSP + 1
   \   0000FA   88..         MOV     ?V0,R0
   \   0000FC   89..         MOV     ?V1,R1
   \   0000FE   AA..         MOV     R2,?V0
   \   000100   AB..         MOV     R3,?V1
   \   000102   801A         SJMP    ??zclSampleTemperatureSensor_EZModeCB_6
   1414              }
   1415              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   \                     ??zclSampleTemperatureSensor_EZModeCB_5:
   \   000104   7401         MOV     A,#0x1
   \   000106   68           XRL     A,R0
   \   000107   7006         JNZ     ??zclSampleTemperatureSensor_EZModeCB_7
   1416              {
   1417                pStr = "EZMode: BadParm";
   \   000109   7A..         MOV     R2,#`?<Constant "EZMode: BadParm">` & 0xff
   \   00010B   7B..         MOV     R3,#(`?<Constant "EZMode: BadParm">` >> 8) & 0xff
   \   00010D   800F         SJMP    ??zclSampleTemperatureSensor_EZModeCB_6
   1418              }
   1419              else if ( err == EZMODE_ERR_CANCELLED )
   \                     ??zclSampleTemperatureSensor_EZModeCB_7:
   \   00010F   7402         MOV     A,#0x2
   \   000111   68           XRL     A,R0
   \   000112   7006         JNZ     ??zclSampleTemperatureSensor_EZModeCB_8
   1420              {
   1421                pStr = "EZMode: Cancel";
   \   000114   7A..         MOV     R2,#`?<Constant "EZMode: Cancel">` & 0xff
   \   000116   7B..         MOV     R3,#(`?<Constant "EZMode: Cancel">` >> 8) & 0xff
   \   000118   8004         SJMP    ??zclSampleTemperatureSensor_EZModeCB_6
   1422              }
   1423              else
   1424              {
   1425                pStr = "EZMode: TimeOut";
   \                     ??zclSampleTemperatureSensor_EZModeCB_8:
   \   00011A   7A..         MOV     R2,#`?<Constant "EZMode: TimeOut">` & 0xff
   \   00011C   7B..         MOV     R3,#(`?<Constant "EZMode: TimeOut">` >> 8) & 0xff
   1426              }
   1427              if ( pStr )
   \                     ??zclSampleTemperatureSensor_EZModeCB_6:
   \   00011E   EA           MOV     A,R2
   \   00011F   4B           ORL     A,R3
   \   000120   600B         JZ      ??zclSampleTemperatureSensor_EZModeCB_9
   1428              {
   1429                if ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE )
   \   000122   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   000125   E0           MOVX    A,@DPTR
   \   000126   7005         JNZ     ??zclSampleTemperatureSensor_EZModeCB_9
   1430                {
   1431                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   000128                ; Setup parameters for call to function HalLcdWriteString
   \   000128   7902         MOV     R1,#0x2
   \   00012A   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1432                }
   1433              }
   1434          #endif  // LCD_SUPPORTED
   1435          
   1436              // show main UI screen 3 seconds after joining network
   1437              osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT, 3000 );
   \                     ??zclSampleTemperatureSensor_EZModeCB_9:
   \   00012D                ; Setup parameters for call to function osal_start_timerEx
   \   00012D   90....       MOV     DPTR,#__Constant_bb8
   \   000130   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000133   7A08         MOV     R2,#0x8
   \   000135   7B00         MOV     R3,#0x0
   \   000137   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F9           MOV     R1,A
   \   00013C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00013F   7404         MOV     A,#0x4
   \   000141   12....       LCALL   ?DEALLOC_XSTACK8
   1438          
   1439              // report current temperature reading 15 seconds after joinging the network
   1440              osal_start_timerEx( zclSampleTemperatureSensor_TaskID, SAMPLETEMPERATURESENSOR_TEMP_SEND_EVT, SAMPLETEMPERATURESENSOR_REPORT_INTERVAL );
   \   000144                ; Setup parameters for call to function osal_start_timerEx
   \   000144   90....       MOV     DPTR,#__Constant_9c4
   \   000147   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00014A   7A10         MOV     R2,#0x10
   \   00014C   7B00         MOV     R3,#0x0
   \   00014E   90....       MOV     DPTR,#zclSampleTemperatureSensor_TaskID
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000156   7404         MOV     A,#0x4
   \   000158   12....       LCALL   ?DEALLOC_XSTACK8
   1441            }
   1442          }
   \                     ??zclSampleTemperatureSensor_EZModeCB_1:
   \   00015B   7414         MOV     A,#0x14
   \   00015D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000160   7F07         MOV     R7,#0x7
   \   000162   02....       LJMP    ?BANKED_LEAVE_XDATA
   1443          #endif // ZCL_EZMODE
   1444          
   1445          /****************************************************************************
   1446          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1447          void zclSampleTemperatureSensor_BindingProcess(void)
   \                     zclSampleTemperatureSensor_BindingProcess:
   1448          { 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 9
   \   000004   74F7         MOV     A,#-0x9
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1449          	if ( ( giTemperatureSensorScreenMode == TEMPSENSE_MAINMODE ) ||
   1450          			( giTemperatureSensorScreenMode == TEMPSENSE_HELPMODE ) )
   \   000009   90....       MOV     DPTR,#giTemperatureSensorScreenMode
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6004         JZ      ??zclSampleTemperatureSensor_BindingProcess_0
   \   00000F   6401         XRL     A,#0x1
   \   000011   7066         JNZ     ??zclSampleTemperatureSensor_BindingProcess_1
   1451          	{
   1452          		giTemperatureSensorScreenMode = TEMPSENSE_MAINMODE;
   \                     ??zclSampleTemperatureSensor_BindingProcess_0:
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1453          
   1454          	FLAG_BINDING = !FLAG_BINDING;
   \   000015   90....       MOV     DPTR,#FLAG_BINDING
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7004         JNZ     ??zclSampleTemperatureSensor_BindingProcess_2
   \   00001B   7401         MOV     A,#0x1
   \   00001D   8001         SJMP    ??zclSampleTemperatureSensor_BindingProcess_3
   \                     ??zclSampleTemperatureSensor_BindingProcess_2:
   \   00001F   E4           CLR     A
   \                     ??zclSampleTemperatureSensor_BindingProcess_3:
   \   000020   12....       LCALL   ?Subroutine3 & 0xFFFF
   1455          	
   1456          	#ifdef ZCL_EZMODE
   1457          		zclEZMode_InvokeData_t ezModeData;
   1458          		static uint16 clusterIDs[] = { ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT }; 	// only bind on the Temperature Measurement cluster
   1459          	
   1460          		// Invoke EZ-Mode
   1461          		ezModeData.endpoint = SAMPLETEMPERATURESENSOR_ENDPOINT; // endpoint on which to invoke EZ-Mode
   1462          		if ( ( zclSampleTemperatureSensor_NwkState == DEV_ZB_COORD ) ||
   1463          				 ( zclSampleTemperatureSensor_NwkState == DEV_ROUTER )	 ||
   1464          				 ( zclSampleTemperatureSensor_NwkState == DEV_END_DEVICE ) )
   \                     ??CrossCallReturnLabel_3:
   \   000023   600A         JZ      ??zclSampleTemperatureSensor_BindingProcess_4
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6407         XRL     A,#0x7
   \   000028   6005         JZ      ??zclSampleTemperatureSensor_BindingProcess_4
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6406         XRL     A,#0x6
   \   00002D   7009         JNZ     ??zclSampleTemperatureSensor_BindingProcess_5
   1465          		{
   1466          			ezModeData.onNetwork = TRUE;			// node is already on the network
   \                     ??zclSampleTemperatureSensor_BindingProcess_4:
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   7401         MOV     A,#0x1
   \   000036   8006         SJMP    ??zclSampleTemperatureSensor_BindingProcess_6
   1467          		}
   1468          		else
   1469          		{
   1470          			ezModeData.onNetwork = FALSE; 		// node is not yet on the network
   \                     ??zclSampleTemperatureSensor_BindingProcess_5:
   \   000038   7401         MOV     A,#0x1
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E4           CLR     A
   \                     ??zclSampleTemperatureSensor_BindingProcess_6:
   \   00003E   F0           MOVX    @DPTR,A
   1471          		}
   1472          		ezModeData.initiator = TRUE;				// Temperature Sensor is an initiator
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7401         MOV     A,#0x1
   \   000046   F0           MOVX    @DPTR,A
   1473          		ezModeData.numActiveInClusters = 1;
   \   000047   7403         MOV     A,#0x3
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   7401         MOV     A,#0x1
   \   00004E   F0           MOVX    @DPTR,A
   1474          		ezModeData.pActiveInClusterIDs = clusterIDs;
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   74..         MOV     A,#??clusterIDs_1 & 0xff
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   74..         MOV     A,#(??clusterIDs_1 >> 8) & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   1475          		ezModeData.numActiveOutClusters = 0;	 // active output cluster
   \   00005B   7406         MOV     A,#0x6
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   E4           CLR     A
   \   000061   F0           MOVX    @DPTR,A
   1476          		ezModeData.pActiveOutClusterIDs = NULL;
   \   000062   7407         MOV     A,#0x7
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   1477          		zcl_InvokeEZMode( &ezModeData );
   \                     ??CrossCallReturnLabel_22:
   \   00006D   12....       LCALL   `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
   1478          	
   1479          	#ifdef LCD_SUPPORTED
   1480          		HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   \   000070                ; Setup parameters for call to function HalLcdWriteString
   \   000070   7902         MOV     R1,#0x2
   \   000072   7A..         MOV     R2,#`?<Constant "EZMode">` & 0xff
   \   000074   7B..         MOV     R3,#(`?<Constant "EZMode">` >> 8) & 0xff
   \   000076   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1481          	#endif
   1482          	
   1483          		// NOT ZCL_EZMODE, Use EndDeviceBind
   1484          	#else
   1485          		{
   1486          			zAddrType_t dstAddr;
   1487          			dstAddr.addrMode = Addr16Bit;
   1488          			dstAddr.addr.shortAddr = 0; 	// Coordinator makes the EDB match
   1489          	
   1490          			// Initiate an End Device Bind Request, this bind request will
   1491          			// only use a cluster list that is important to binding.
   1492          			HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   1493          			ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
   1494          														SAMPLETEMPERATURESENSOR_ENDPOINT,
   1495          														ZCL_HA_PROFILE_ID,
   1496          														0, NULL,
   1497          														ZCLSAMPLETEMPERATURESENSOR_BINDINGLIST, bindingOutClusters,
   1498          														FALSE );
   1499          		}
   1500          	#endif // ZCL_EZMODE
   1501          	}
   1502          
   1503          }
   \                     ??zclSampleTemperatureSensor_BindingProcess_1:
   \   000079   7409         MOV     A,#0x9
   \   00007B   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??clusterIDs_1:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for clusterIDs>_1`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   7800         MOV     R0,#0x0
   \   000011   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleTemperatureSensor_N`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for aProcessCmd>`:
   \   000000   01           DB 1
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleTemperatureSensor_Test`:
   \   000000   14           DB 20
   \   000001   ....         DW zclSampleTemperatureSensor_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleTemperatureSensor_C`:
   \   000000   ....         DW `??zclSampleTemperatureSensor_BasicResetCB::?rel`
   \   000002   ....         DW `??zclSampleTemperatureSensor_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW ??zclSampleTemperatureSensor_IdentifyQueryRspCB
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for clusterIDs>`:
   \   000000   0204         DW 1026

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for clusterIDs>_1`:
   \   000000   0204         DW 1026

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_LcdDisplayUpdate::`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleTemperatureSensor_LcdDisplayMainMode:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_LcdDisplayMainMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleTemperatureSensor_LcdDisplayHelpMode:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_LcdDisplayHelpMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_SendTemp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_SendTemp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_SendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_SendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleTemperatureSensor_ProcessIdentifyTim:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_BasicResetCB::?rel`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleTemperatureSensor_IdentifyQueryRspCB:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSampleTemperatureSensor_ProcessInReportCmd:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_ProcessInReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_EZModeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_EZModeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleTemperatureSensor_BindingProcess::?r`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleTemperatureSensor_BindingProcess

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZDO_CB_MSG">`:
   \   000000   5A444F5F     DB "ZDO_CB_MSG"
   \            43425F4D
   \            534700  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZCL_INCOMING_MSG">`:
   \   000000   5A434C5F     DB "ZCL_INCOMING_MSG"
   \            494E434F
   \            4D494E47
   \            5F4D5347
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "KEY_CHANGE">`:
   \   000000   4B45595F     DB "KEY_CHANGE"
   \            4348414E
   \            474500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZDO_STATE_CHANGE">`:
   \   000000   5A444F5F     DB "ZDO_STATE_CHANGE"
   \            53544154
   \            455F4348
   \            414E4745
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SAMPLETEMPERATURESENS...">`:
   \   000000   53414D50     DB "SAMPLETEMPERATURESENSOR_IDENTIFY_TIMEOUT_EVT"
   \            4C455445
   \            4D504552
   \            41545552
   \            4553454E
   \            534F525F
   \            4944454E
   \            54494659
   \            5F54494D
   \            454F5554
   \            5F455654
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SAMPLETEMPERATURESENS...">_1`:
   \   000000   53414D50     DB "SAMPLETEMPERATURESENSOR_EZMODE_NEXTSTATE_EVT"
   \            4C455445
   \            4D504552
   \            41545552
   \            4553454E
   \            534F525F
   \            455A4D4F
   \            44455F4E
   \            45585453
   \            54415445
   \            5F455654
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SAMPLETEMPERATURESENS...">_2`:
   \   000000   53414D50     DB "SAMPLETEMPERATURESENSOR_EZMODE_TIMEOUT_EVT"
   \            4C455445
   \            4D504552
   \            41545552
   \            4553454E
   \            534F525F
   \            455A4D4F
   \            44455F54
   \            494D454F
   \            55545F45
   \            565400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SAMPLETEMPERATURESENS...">_3`:
   \   000000   53414D50     DB "SAMPLETEMPERATURESENSOR_MAIN_SCREEN_EVT"
   \            4C455445
   \            4D504552
   \            41545552
   \            4553454E
   \            534F525F
   \            4D41494E
   \            5F534352
   \            45454E5F
   \            45565400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SAMPLETEMPERATURESENS...">_4`:
   \   000000   53414D50     DB "SAMPLETEMPERATURESENSOR_JOIN_SETUP_EVT"
   \            4C455445
   \            4D504552
   \            41545552
   \            4553454E
   \            534F525F
   \            4A4F494E
   \            5F534554
   \            55505F45
   \            565400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SW8">`:
   \   000000   53573800     DB "SW8"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode">`:
   \   000000   455A4D6F     DB "EZMode"
   \            646500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEMP: ">`:
   \   000000   54454D50     DB "TEMP: "
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "C">`:
   \   000000   4300         DB "C"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SW5: Help      *">`:
   \   000000   5357353A     DB "SW5: Help      *"
   \            2048656C
   \            70202020
   \            2020202A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SW5: Help       ">`:
   \   000000   5357353A     DB "SW5: Help       "
   \            2048656C
   \            70202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!\\n">`:
   \   000000   210A00       DB "!\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@ZBR:">`:
   \   000000   405A4252     DB "@ZBR:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ";">`:
   \   000000   3B00         DB ";"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "!">`:
   \   000000   2100         DB "!"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "R2;OUT3;1">`:
   \   000000   52323B4F     DB "R2;OUT3;1"
   \            5554333B
   \            3100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "R2;OUT1;1">`:
   \   000000   52323B4F     DB "R2;OUT1;1"
   \            5554313B
   \            3100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "R2;OUT2;1">`:
   \   000000   52323B4F     DB "R2;OUT2;1"
   \            5554323B
   \            3100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "R2;OUT3;0">`:
   \   000000   52323B4F     DB "R2;OUT3;0"
   \            5554333B
   \            3000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "R2;OUT1;0">`:
   \   000000   52323B4F     DB "R2;OUT1;0"
   \            5554313B
   \            3000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "R2;OUT2;0">`:
   \   000000   52323B4F     DB "R2;OUT2;0"
   \            5554323B
   \            3000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR!">`:
   \   000000   4552524F     DB "ERROR!"
   \            522100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Done!">`:
   \   000000   446F6E65     DB "Done!"
   \            2100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ATTRID_HVAC_THERMOSTAT">`:
   \   000000   41545452     DB "ATTRID_HVAC_THERMOSTAT"
   \            49445F48
   \            5641435F
   \            54484552
   \            4D4F5354
   \            415400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Success">`:
   \   000000   455A4D6F     DB "EZMode: Success"
   \            64653A20
   \            53756363
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: NoMatch">`:
   \   000000   455A4D6F     DB "EZMode: NoMatch"
   \            64653A20
   \            4E6F4D61
   \            74636800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZDst:">`:
   \   000000   455A4473     DB "EZDst:"
   \            743A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " EP:">`:
   \   000000   2045503A     DB " EP:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: BadParm">`:
   \   000000   455A4D6F     DB "EZMode: BadParm"
   \            64653A20
   \            42616450
   \            61726D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Cancel">`:
   \   000000   455A4D6F     DB "EZMode: Cancel"
   \            64653A20
   \            43616E63
   \            656C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: TimeOut">`:
   \   000000   455A4D6F     DB "EZMode: TimeOut"
   \            64653A20
   \            54696D65
   \            4F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_9c4:
   \   000000   C4090000     DD 2500
   1504          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     18   zclSampleTemperatureSensor_BasicResetCB
        2      0   -> MT_SysCommandProcessing
        2      0   -> zgWriteStartupOptions
      2     25   zclSampleTemperatureSensor_BindingProcess
        2      9   -> HalLcdWriteString
        2      9   -> zcl_InvokeEZMode
      0     39   zclSampleTemperatureSensor_EZModeCB
        0     35   -> HalLcdWriteString
        0     37   -> _ltoa
        0     38   -> osal_memcpy
        0     39   -> osal_start_timerEx
        0     35   -> zclHA_uint16toa
        0     35   -> zclSampleTemperatureSensor_ProcessIdentifyTimeChange
      0     34   zclSampleTemperatureSensor_HandleKeys
        0     18   -> HalLcdWriteString
        0     18   -> NLME_GetShortAddr
        0     18   -> UART_DebugPrint
        0     18   -> ZDP_MgmtPermitJoinReq
        0     18   -> osal_set_event
        0     18   -> zclSampleTemperatureSensor_BasicResetCB
        0     18   -> zclSampleTemperatureSensor_LcdDisplayUpdate
        0     18   -> zcl_InvokeEZMode
      2      0   zclSampleTemperatureSensor_IdentifyCB
        2      0   -> zclSampleTemperatureSensor_ProcessIdentifyTimeChange
      2      2   zclSampleTemperatureSensor_IdentifyQueryRspCB
        2      2   -> zcl_EZModeAction
      0     14   zclSampleTemperatureSensor_Init
        0     10   -> DHT11_Init
        0     10   -> GPIO_init
        0     10   -> HalLcdWriteString
        0     10   -> NLME_GetShortAddr
        0     10   -> RegisterForKeys
        0     10   -> UART_Init
        0     10   -> ZDO_RegisterForZDOMsg
        0     10   -> afRegister
        0     10   -> osal_set_event
        0     14   -> osal_start_timerEx
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclHA_Init
        0     10   -> zcl_RegisterEZMode
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerForMsg
      2      0   zclSampleTemperatureSensor_LcdDisplayHelpMode
        2      0   -> HalLcdWriteString
      0     30   zclSampleTemperatureSensor_LcdDisplayMainMode
        0     27   -> HalLcdWriteString
        0     29   -> _ltoa
        0     30   -> osal_memcpy
        0     27   -> zclHA_LcdStatusLine1
      2     18   zclSampleTemperatureSensor_LcdDisplayUpdate
        2      0   -> zclSampleTemperatureSensor_LcdDisplayHelpMode
        2      0   -> zclSampleTemperatureSensor_LcdDisplayMainMode
      2     39   zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        2      0   -> HalLedSet
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      1     54   zclSampleTemperatureSensor_ProcessInReportCmd
        0     38   -> TURN_off
        0     38   -> TURN_on
        0     38   -> UART_SendString
        0     38   -> UART_ZCmdPrint
        0     38   -> UART_ZCmdPrintBuffer
        0     38   -> UART_ZCmdPrintNum
        0     38   -> UART_ZCmdPrintString
        0     38   -> strstr
      0     35   zclSampleTemperatureSensor_SendState
        0     14   -> CheckOutputState
        0     14   -> UART_SendNum
        0     14   -> UART_SendString
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     19   -> zcl_SendReportCmd
      0     37   zclSampleTemperatureSensor_SendTemp
        0     16   -> CheckOutputState
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     21   -> zcl_SendReportCmd
      0     20   zclSampleTemperatureSensor_event_loop
        0     16   -> Toggle
        0     16   -> UART_DebugPrint
        0     16   -> UART_ParseRxPackage
        0     16   -> ZCMD_ReplyCMD
        0     16   -> ZDO_ParseEPListRsp
        0     16   -> osal_mem_free
        0     16   -> osal_msg_deallocate
        0     16   -> osal_msg_receive
        0     16   -> osal_set_event
        0     20   -> osal_start_timerEx
        0     16   -> zclSampleTemperatureSensor_BindingProcess
        0     16   -> zclSampleTemperatureSensor_HandleKeys
        0     16   -> zclSampleTemperatureSensor_LcdDisplayUpdate
        0     16   -> zclSampleTemperatureSensor_ProcessIdentifyTimeChange
        0     16   -> zclSampleTemperatureSensor_ProcessInReportCmd
        0     16   -> zclSampleTemperatureSensor_SendState
        0     16   -> zclSampleTemperatureSensor_SendTemp
        0     16   -> zcl_EZModeAction


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant " EP:">
       2  ?<Constant "!">
       3  ?<Constant "!\n">
       2  ?<Constant ";">
       6  ?<Constant "@ZBR:">
      23  ?<Constant "ATTRID_HVAC_THERMOSTAT">
       2  ?<Constant "C">
       6  ?<Constant "Done!">
       7  ?<Constant "ERROR!">
       7  ?<Constant "EZDst:">
       7  ?<Constant "EZMode">
      16  ?<Constant "EZMode: BadParm">
      15  ?<Constant "EZMode: Cancel">
      16  ?<Constant "EZMode: NoMatch">
      16  ?<Constant "EZMode: Success">
      16  ?<Constant "EZMode: TimeOut">
      11  ?<Constant "KEY_CHANGE">
      10  ?<Constant "R2;OUT1;0">
      10  ?<Constant "R2;OUT1;1">
      10  ?<Constant "R2;OUT2;0">
      10  ?<Constant "R2;OUT2;1">
      10  ?<Constant "R2;OUT3;0">
      10  ?<Constant "R2;OUT3;1">
      45  ?<Constant "SAMPLETEMPERATURESENS...">
      45  ?<Constant "SAMPLETEMPERATURESENS...">_1
      43  ?<Constant "SAMPLETEMPERATURESENS...">_2
      40  ?<Constant "SAMPLETEMPERATURESENS...">_3
      39  ?<Constant "SAMPLETEMPERATURESENS...">_4
      17  ?<Constant "SW5: Help       ">
      17  ?<Constant "SW5: Help      *">
       4  ?<Constant "SW8">
       7  ?<Constant "TEMP: ">
      17  ?<Constant "ZCL_INCOMING_MSG">
      11  ?<Constant "ZDO_CB_MSG">
      17  ?<Constant "ZDO_STATE_CHANGE">
       4  ?<Initializer for aProcessCmd>
       2  ?<Initializer for clusterIDs>
       2  ?<Initializer for clusterIDs>_1
       6  ?<Initializer for sampleTemperatureSensor_Test
      24  ?<Initializer for zclSampleTemperatureSensor_C
       1  ?<Initializer for zclSampleTemperatureSensor_N
       6  ??Subroutine13_0
       7  ??Subroutine14_0
       6  ??Subroutine15_0
       3  ?Subroutine0
       8  ?Subroutine1
       3  ?Subroutine10
      25  ?Subroutine11
       9  ?Subroutine12
      26  ?Subroutine2
      17  ?Subroutine3
       6  ?Subroutine4
      10  ?Subroutine5
       4  ?Subroutine6
      16  ?Subroutine7
      21  ?Subroutine8
      18  ?Subroutine9
       4  __Constant_1388
       4  __Constant_2710
       4  __Constant_3e8
       4  __Constant_9c4
       4  __Constant_a
       4  __Constant_bb8
       4  aProcessCmd
       2  clusterIDs
       2  clusterIDs
       1  gPermitDuration
       1  giTemperatureSensorScreenMode
       2  sClearLine
      14  sDeviceName
      13  sSwEZMode
      10  sSwHelp
      16  sSwTempDown
      16  sSwTempUp
       6  sampleTemperatureSensor_TestEp
       1  zclSampleTemperatureSensorSeqNum
      21  zclSampleTemperatureSensor_BasicResetCB
       6  zclSampleTemperatureSensor_BasicResetCB::?relay
     126  zclSampleTemperatureSensor_BindingProcess
       6  zclSampleTemperatureSensor_BindingProcess::?relay
      24  zclSampleTemperatureSensor_CmdCallbacks
      12  zclSampleTemperatureSensor_DstAddr
     357  zclSampleTemperatureSensor_EZModeCB
       6  zclSampleTemperatureSensor_EZModeCB::?relay
     334  zclSampleTemperatureSensor_HandleKeys
       6  zclSampleTemperatureSensor_HandleKeys::?relay
      27  zclSampleTemperatureSensor_IdentifyCB
       6  zclSampleTemperatureSensor_IdentifyCB::?relay
      22  zclSampleTemperatureSensor_IdentifyQueryRspCB
       6  zclSampleTemperatureSensor_IdentifyQueryRspCB::?relay
     192  zclSampleTemperatureSensor_Init
       6  zclSampleTemperatureSensor_Init::?relay
      33  zclSampleTemperatureSensor_LcdDisplayHelpMode
       6  zclSampleTemperatureSensor_LcdDisplayHelpMode::?relay
     213  zclSampleTemperatureSensor_LcdDisplayMainMode
       6  zclSampleTemperatureSensor_LcdDisplayMainMode::?relay
      23  zclSampleTemperatureSensor_LcdDisplayUpdate
       6  zclSampleTemperatureSensor_LcdDisplayUpdate::?relay
       1  zclSampleTemperatureSensor_NwkState
      68  zclSampleTemperatureSensor_ProcessIdentifyTimeChange
       6  zclSampleTemperatureSensor_ProcessIdentifyTimeChange::?relay
     538  zclSampleTemperatureSensor_ProcessInReportCmd
       6  zclSampleTemperatureSensor_ProcessInReportCmd::?relay
      10  zclSampleTemperatureSensor_RegisterEZModeData
     195  zclSampleTemperatureSensor_SendState
       6  zclSampleTemperatureSensor_SendState::?relay
     161  zclSampleTemperatureSensor_SendTemp
       6  zclSampleTemperatureSensor_SendTemp::?relay
       1  zclSampleTemperatureSensor_TaskID
     734  zclSampleTemperatureSensor_event_loop
       6  zclSampleTemperatureSensor_event_loop::?relay

 
 3 229 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
    39 bytes in segment XDATA_I
    39 bytes in segment XDATA_ID
   627 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
   129 bytes of CODE     memory
   603 bytes of CONST    memory (+ 24 bytes shared)
 3 229 bytes of HUGECODE memory
    55 bytes of XDATA    memory

Errors: none
Warnings: 1
